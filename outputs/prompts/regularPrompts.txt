
# **Instructions**

## **Plan**
- Use the **exact** plan outlined below as the foundation for your implementation.
- `Component Name: KPIDashboard, Component requirements: ### Final Plan for KPIDashboard Component

#### Description
The KPIDashboard component serves as an interactive interface for startups to visualize and analyze their key performance indicators (KPIs). This plan outlines enhancements to improve user engagement, data visualization, and overall functionality. The focus will be on creating a professional, user-friendly dashboard tailored for desktop use.

#### Content

##### Component Description
- The KPIDashboard will display key performance indicators in a card format, allowing for real-time updates and detailed analysis.
- Each KPI will be represented as a KpiCard component, displaying essential metrics such as Monthly Recurring Revenue (MRR), Monthly Active Users (MAUs), Customer Acquisition Cost (CAC), and more.

##### Functionality
- The dashboard will iteratively create KpiCard components based on startup data.
- Each card will dynamically update according to real-time data inputs, ensuring users have the latest metrics available.
- Consistent styling and layout for KPI cards will be enforced to provide a cohesive visual experience.
- Users will have customization options to select which KPIs are displayed according to their preferences.

##### Interconnectivity
- KpiCard components will be reused to display KPIs in the Cohort Analytics Page, providing a consistent user experience across different sections of the application.

##### User Interaction
- Users can interact with individual KpiCard components to access detailed KPI data or historical trends.
- Upon clicking a KpiCard, the system will fetch detailed historical data for that KPI and present it in a modal or dedicated page for in-depth analysis.

### New Ideas for Enhancements

1. **Data Visualization Enhancements**
    - **Main Functionality**: Integrate ECharts or Chart.js for graphical representations of data trends for each KPI.
    - **Key Components**: Line charts for MRR growth, bar charts for MAU trends, and pie charts for user demographics.
    - **User Interaction Flow**: Users can hover over charts to see tooltips containing detailed data points.
    - **Potential Challenges**: Ensure charts are responsive and load quickly.
        - **Solution**: Optimize data fetching and rendering processes.

2. **Interactive Notifications**
    - **Main Functionality**: Notify users of significant KPI changes or when thresholds are met.
    - **Key Components**: Notification pop-ups or toast messages that are visually distinct.
    - **User Interaction Flow**: Notifications will appear on the dashboard and can be clicked for more details.
    - **Potential Challenges**: Avoid overwhelming users with notifications.
        - **Solution**: Implement priority settings for notifications based on user-defined thresholds.

3. **Customization Options**
    - **Main Functionality**: Allow users to customize which KPIs are displayed on their dashboard.
    - **Key Components**: A settings panel where users can select or deselect KPIs.
    - **User Interaction Flow**: Users can save their preferences, and the dashboard will update in real-time.
    - **Potential Challenges**: Managing state across user sessions.
        - **Solution**: Use local storage or a state management library to save user preferences.

4. **Gamification Elements**
    - **Main Functionality**: Introduce a rewards system based on engagement and achievement of KPI targets.
    - **Key Components**: Badges or a points system displayed on the dashboard.
    - **User Interaction Flow**: Users can track their progress and earn rewards based on KPI improvements.
    - **Potential Challenges**: Ensuring that gamification encourages positive engagement.
        - **Solution**: Focus on personal milestones rather than competition among users.

5. **Dynamic Content Updates**
    - **Main Functionality**: Implement real-time data refreshes for KPIs.
    - **Key Components**: Auto-refresh mechanism for KpiCard components.
    - **User Interaction Flow**: Users will see live updates without manual page refreshes.
    - **Potential Challenges**: Managing performance with frequent updates.
        - **Solution**: Optimize refresh intervals based on user activity and system performance.

### Prioritization
1. Data Visualization Enhancements - High impact, feasible.
2. Interactive Notifications - High impact, feasible.
3. Customization Options - Medium impact, feasible.
4. Dynamic Content Updates - Medium impact, feasible.
5. Gamification Elements - Low impact, feasible.

### Step-by-Step Implementation Plan

#### Step 1: Clarification of Requirements
- Review and clarify the user requirements for each KPI and the desired interactivity level.
- Ensure a comprehensive understanding of the KPIs relevant to startups.

#### Step 2: Implementation of KpiCard Component
- Create a KpiCard component that accepts props for each KPI metric and displays it in a visually appealing card format.
- Ensure the cards are styled consistently using CSS or a styling library (e.g., styled-components).

#### Step 3: Data Integration
- Set up a mechanism to fetch and integrate real-time data for each KPI.
- Use libraries like Axios or Fetch API to pull data from predefined endpoints or simulate data with dummy datasets.

#### Step 4: Chart Integration
- Integrate ECharts or Chart.js within the KpiCard to visualize KPI data dynamically.
- Implement hover functionality on the charts to reveal tooltips with detailed information.

#### Step 5: Notification System
- Develop a notification system to alert users about significant KPI changes, using either a pop-up or toast message system.
- Create logic to trigger notifications based on user-defined thresholds.

#### Step 6: Customization Panel
- Implement a settings panel allowing users to select which KPIs to display.
- Use local storage or a state management solution to save user preferences and update the dashboard accordingly.

#### Step 7: Gamification Mechanism
- Design and implement a rewards system where users earn points or badges based on their performance against set KPIs.
- Display user progress and achievements on the dashboard.

#### Step 8: Auto-refresh Logic
- Set up an auto-refresh mechanism to update KPI data at specified intervals.
- Ensure that refreshes do not impact performance negatively.

### Edge Cases
1. **Data Fetching Errors**: Implement error handling to manage failed API calls.
    - Example: Display an error message on the dashboard if data fails to load.
2. **No Data Available**: Handle scenarios where no KPI data is available.
    - Example: Show a message indicating no data is available for the selected KPIs.
3. **User Preferences State Management**: Ensure user preferences are correctly loaded and saved.
    - Example: Verify that changes in the customization panel persist across sessions.

### Enhancements
- Consider using CSS animations to enhance user engagement when KPIs are updated.
- Implement user feedback mechanisms to gather insights on the dashboard usability and performance.

This comprehensive plan provides a structured approach to enhancing the KPIDashboard component, focusing on user engagement, data visualization, interactivity, and overall functionality, ensuring a professional and cohesive experience for users.`
- **Integrate** the plan directly into the code components provided, ensuring every part of the plan is fully reflected in the code. The integration must be seamless, with no missing details or gaps. All pieces should function together as a single, cohesive file.

## **CodeComponents**
- **Rewrite EVERY SINGLE LINE** of the components below as **const** functions within the current file.
- **DO NOT** leave out any provided code.
- **DO NOT** import any components or functions from other files. Every component must be rewritten as a **const** function in this file, fully recoded from scratch.
- **Adjust** the code so that it **dynamically works** for your current code structure. Every function should be self-contained, with dynamic behavior that adapts to the current project setup.
- `

```javascript
// File Path: KpiCard.js
import React, { useState } from 'react';
import ReactECharts from 'echarts-for-react';

const KpiCard = ({ title, value, trend, description }) => {
  const [loading, setLoading] = useState(false);
  const [showChart, setShowChart] = useState(false);
  const [notifications, setNotifications] = useState([]);
  
  const handleChartToggle = () => {
    setShowChart((prev) => !prev);
  };

  const handleNotificationClick = () => {
    alert('Viewing recent alerts...');
  };

  const getColor = (trend) => {
    if (trend === 'up') return 'green';
    if (trend === 'down') return 'red';
    return 'yellow';
  };

  const getTrendIndicator = () => {
    return trend === 'up' ? '↑' : trend === 'down' ? '↓' : '→';
  };

  const chartOption = {
    title: {
      text: 'KPI Trend',
    },
    tooltip: {},
    xAxis: {
      data: ['Last Month', 'Current Month'],
    },
    yAxis: {},
    series: [
      {
        name: title,
        type: 'line',
        data: [9000, parseInt(value.replace(/[^0-9]/g, ''))],
      },
    ],
  };

  return (
    <div
      style={{
        border: `2px solid ${getColor(trend)}`,
        borderRadius: '10px',
        padding: '20px',
        width: '400px',
        position: 'relative',
        backgroundColor: 'white',
      }}
      onClick={handleChartToggle}
      onMouseEnter={() => setLoading(true)}
      onMouseLeave={() => setLoading(false)}
    >
      {loading && <div>Loading...</div>}
      <h3>{title}</h3>
      <h2 style={{ color: getColor(trend) }}>{value} {getTrendIndicator()}</h2>
      <p>{description}</p>
      <div style={{ cursor: 'pointer', color: 'blue' }} onClick={handleNotificationClick}>
        Notifications ({notifications.length})
      </div>
      {showChart && (
        <div style={{ marginTop: '20px' }}>
          <ReactECharts option={chartOption} style={{ height: '200px' }} />
        </div>
      )}
    </div>
  );
};

const App = () => {
  return (
    <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>
      <KpiCard 
        title="Monthly Recurring Revenue" 
        value="$10,000" 
        trend="up" 
        description="Increased by 5% from last month" 
      />
      <KpiCard 
        title="Monthly Active Users" 
        value="1,500" 
        trend="down" 
        description="Decreased by 10% from last month" 
      />
    </div>
  );
};

export default App;
````
- Ensure that every line of code is **faithfully recoded**. **No shortcuts, no omissions, no imports.** Every component should be rewritten as a **const** function and fully integrated into the file.

## **FileRequirements**
- Create a single **JavaScript** file.
- **DO NOT** include any external styling (e.g., CSS files). Styling should not be a part of this task.
- Use only **dummy data**, with no backend, API calls, or external services.
- Include only necessary React imports (e.g., `useState`, `useEffect` if needed).
- **DO NOT** import any custom components or functions from other files. All logic and components must be fully contained within the single file.

## **Rules**

### **General**
- **NO ERRORS**: The code must work perfectly on the first try, without bugs or issues.
- Provide **complete code**, fully functional and self-contained. **Recreate every part of the code in this file** with no omissions, placeholders, or imports.
- **DO NOT** import any external JS files or components. **Recreate every component and function exactly as specified**, rewriting each as a **const** function.

## **Goal**
- The final product should be a **single, complete component** that integrates the plan and code components fully.
- Every component and function provided should be **recoded, rewritten as const functions**, and **integrated perfectly** into the current file without summarization, omission, or importation from other files.
- The result should be **100% functional**, fully dynamic, and self-contained with no missing code. It should fully reflect the plan provided and **adapt to the current code structure**.

---

**Important**: Absolutely **NO summarization**. Every single piece of code must be **rewritten as a const function**, fully integrated and dynamically functional within the current file. The goal is to have one **complete, error-free**, and **self-contained** file with everything implemented as described.





# **Instructions**

## **Plan**
- Use the **exact** plan outlined below as the foundation for your implementation.
- `Component Name: StartupList, Component requirements: ### Final Plan for StartupList Component

#### Component Description
The StartupList component serves as a comprehensive hub for users to explore startup summaries, enhancing engagement and interactivity. It supports efficient navigation through various startup profiles and offers a robust set of features to provide users with valuable insights.

#### Functionality
The StartupList component will display a dynamic list of startups sourced from the StartupProfilesContainer. It will facilitate user interactions through various means such as search queries, filters, infinite scrolling, and pagination, ensuring a smooth experience even with large datasets.

#### Core Details
- **Mapping and Rendering**: Use the `.map()` function to iterate over the startup data array and render a list of StartupCards. Each StartupCard should showcase essential startup information, including name, description, funding status, and a thumbnail image.
- **Dynamic Updates**: Implement a controlled input for search queries and filter options. Utilize React state management to reflect real-time updates in the displayed list based on user input.
- **Scrolling and Pagination**: Choose between implementing infinite scrolling using the Intersection Observer API or traditional pagination to manage extensive datasets, ensuring minimal load times.

#### User Interaction
- **Interaction Mechanics**: Each StartupCard should be clickable, leading to a detailed view of the selected startup profile. Implement a routing mechanism (e.g., React Router) to navigate to `/startups/profiles/details/:id`.
- **Outcome**: The detailed view will include comprehensive information about the startup, including industry sector, founding team, funding history, and links to associated documents or reports.

### New Features and Enhancements

#### 1. User Engagement Features
- **Startup Comparison Tool**
    - **Functionality**: Users can select multiple startups for side-by-side comparison of key metrics.
    - **Components**: Create a modal component that displays selected startups with relevant data such as funding, team size, and market reach.
    - **Data Requirements**: Include dummy data for the startups, ensuring metrics are defined.
    - **User Interaction Flow**: Users select startups via checkboxes, click ‘Compare’, and view results in a modal.
    - **Challenges & Solutions**: Design the layout to accommodate varying numbers of metrics; use CSS Grid or Flexbox for flexibility.

#### 2. Data Visualization
- **Interactive Charts and Graphs**
    - **Functionality**: Visualize funding trends, market growth, and demographic data using libraries like ECharts or Chart.js.
    - **Components**: Integrate chart components either directly within the StartupList or in a dedicated analytics section.
    - **Data Requirements**: Create dummy datasets that demonstrate trends over time or comparisons.
    - **User Interaction Flow**: Enable hover interactions on data points for detailed insights.
    - **Challenges & Solutions**: Maintain a visually appealing design while ensuring clarity; use Ant Design for uniform styling across components.

#### 3. Customization Options
- **User-Defined Filters**
    - **Functionality**: Users can define and save custom filters for easy access in future sessions.
    - **Components**: Design a filter configuration panel that allows users to specify criteria (e.g., industry type, funding range).
    - **Data Requirements**: Store user filter preferences in local storage for persistence.
    - **User Interaction Flow**: Users set their filters, save preferences, and apply them, reflecting changes in real-time.
    - **Challenges & Solutions**: Manage browser storage limits effectively; ensure efficient retrieval and application of stored filters.

#### 4. Notifications
- **Real-Time Updates**
    - **Functionality**: Notify users of new startups that match their saved interests or filters.
    - **Components**: Implement a notification bell icon that indicates alerts.
    - **Data Requirements**: Utilize dummy data simulating new startup entries based on user preferences.
    - **User Interaction Flow**: Clicking on the notification bell reveals a dropdown with alerts.
    - **Challenges & Solutions**: Ensure notifications are tailored to user preferences, possibly using a subscription approach for updates.

#### 5. Gamification
- **Achievement Badges**
    - **Functionality**: Users earn badges for actions like viewing profiles and comparing startups.
    - **Components**: Create a dedicated section in the user profile to display earned badges.
    - **Data Requirements**: Design dummy data that outlines badge types and the criteria for earning them.
    - **User Interaction Flow**: Users receive badges upon completing specified actions, with descriptions available for each badge.
    - **Challenges & Solutions**: Maintain ongoing engagement; provide clear descriptions and visual indicators of progress towards earning badges.

### Prioritization of Ideas
1. **User Engagement Features** - High impact on usability and user interaction.
2. **Data Visualization** - Critical for enhancing understanding of startup performance.
3. **Customization Options** - Personalizes user experience, adding value.
4. **Notifications** - Essential for user retention and engagement.
5. **Gamification** - Adds a fun aspect, but requires careful design to maintain interest.

### Conclusion
This enhanced StartupList component plan integrates engaging user interactions, valuable data visualization, and customization options designed to create a comprehensive user experience. Each feature is designed for practical implementation in a single-page React application, ensuring seamless integration with existing components while maintaining consistent design and functionality.

### Step-by-Step Plan

#### Clarification
- Ensure that each feature aligns with user goals and expectations for the StartupList component.

#### Implementation Guidance
1. **Mapping and Rendering**
   - Use React’s `.map()` to create StartupCards.
2. **Dynamic Updates**
   - Set up state to store search queries and apply filters.
3. **Scrolling and Pagination**
   - Decide between infinite scrolling or pagination based on user experience goals.
4. **Comparison Tool**
   - Develop a modal for comparisons.
   - Handle data aggregation in the modal.
5. **Data Visualization**
   - Integrate ECharts or Chart.js for graphing metrics.
6. **User Filters**
   - Create a filter panel and manage state for saved filters.
7. **Notifications**
   - Design a notification system to alert users of relevant updates.
8. **Gamification**
   - Implement badge logic and criteria tracking.

#### Efficiency
- Structure components modularly to enhance maintainability and reusability.

#### Technical Specifications
- Use React for component structure.
- Utilize CSS-in-JS or styled-components for styling.
- Ensure responsiveness using Flexbox or Grid layouts.

#### Examples
- Provide examples of user flows, such as selecting startups for comparison or applying filters.

#### Edge Cases
- Test for scenarios where no startups meet the filter criteria.
- Handle cases where the user navigates away before saving preferences.

#### Enhancements
- Implement lazy loading for images to improve performance.
- Use a state management library (like Redux) for larger datasets or complex state management.

This plan outlines the necessary steps and considerations to create a robust StartupList component tailored for desktop use, ensuring a rich user experience that is both engaging and informative.`
- **Integrate** the plan directly into the code components provided, ensuring every part of the plan is fully reflected in the code. The integration must be seamless, with no missing details or gaps. All pieces should function together as a single, cohesive file.

## **CodeComponents**
- **Rewrite EVERY SINGLE LINE** of the components below as **const** functions within the current file.
- **DO NOT** leave out any provided code.
- **DO NOT** import any components or functions from other files. Every component must be rewritten as a **const** function in this file, fully recoded from scratch.
- **Adjust** the code so that it **dynamically works** for your current code structure. Every function should be self-contained, with dynamic behavior that adapts to the current project setup.
- `

```javascript
// File Path: StartupCard.js
import React, { useState } from 'react';
import ReactECharts from 'echarts-for-react';

const dummyStartups = [
    { id: 1, name: 'Startup A', industry: 'Technology', cohort: '2023', rating: 4, metrics: [10, 20, 30, 40, 50] },
    { id: 2, name: 'Startup B', industry: 'Finance', cohort: '2023', rating: 3, metrics: [15, 25, 35, 45, 55] },
    { id: 3, name: 'Startup C', industry: 'Health', cohort: '2023', rating: 5, metrics: [20, 30, 40, 50, 60] },
];

const RatingStars = ({ rating, onRate }) => {
    return (
        <div>
            {[1, 2, 3, 4, 5].map((star) => (
                <span
                    key={star}
                    onClick={() => onRate(star)}
                    style={{ cursor: 'pointer', color: star <= rating ? 'gold' : 'gray' }}
                >
                    ★
                </span>
            ))}
        </div>
    );
};

const FollowButton = ({ isFollowed, onToggle }) => {
    return (
        <button onClick={onToggle} style={{ backgroundColor: isFollowed ? 'lightcoral' : 'lightgreen' }}>
            {isFollowed ? 'Following' : 'Follow'}
        </button>
    );
};

const MiniChart = ({ data }) => {
    const option = {
        xAxis: {
            type: 'category',
            data: ['Q1', 'Q2', 'Q3', 'Q4', 'Q5'],
        },
        yAxis: {
            type: 'value',
        },
        series: [{
            data: data,
            type: 'line',
        }],
    };

    return <ReactECharts option={option} style={{ height: '100px', width: '200px' }} />;
};

const StartupCard = ({ startup }) => {
    const [rating, setRating] = useState(startup.rating);
    const [isFollowed, setIsFollowed] = useState(false);

    const handleRate = (newRating) => {
        setRating(newRating);
    };

    const toggleFollow = () => {
        setIsFollowed(!isFollowed);
    };

    return (
        <div
            onClick={() => window.location.href = `/startups/profiles/details`}
            style={{ border: '1px solid black', padding: '20px', margin: '10px', cursor: 'pointer' }}
        >
            <h3>{startup.name}</h3>
            <p>Industry: {startup.industry}</p>
            <p>Cohort: {startup.cohort}</p>
            <RatingStars rating={rating} onRate={handleRate} />
            <FollowButton isFollowed={isFollowed} onToggle={toggleFollow} />
            <MiniChart data={startup.metrics} />
        </div>
    );
};

const StartupList = () => {
    return (
        <div>
            {dummyStartups.map(startup => (
                <StartupCard key={startup.id} startup={startup} />
            ))}
        </div>
    );
};

const App = () => {
    return (
        <div>
            <StartupList />
        </div>
    );
};

export default App;
````
- Ensure that every line of code is **faithfully recoded**. **No shortcuts, no omissions, no imports.** Every component should be rewritten as a **const** function and fully integrated into the file.

## **FileRequirements**
- Create a single **JavaScript** file.
- **DO NOT** include any external styling (e.g., CSS files). Styling should not be a part of this task.
- Use only **dummy data**, with no backend, API calls, or external services.
- Include only necessary React imports (e.g., `useState`, `useEffect` if needed).
- **DO NOT** import any custom components or functions from other files. All logic and components must be fully contained within the single file.

## **Rules**

### **General**
- **NO ERRORS**: The code must work perfectly on the first try, without bugs or issues.
- Provide **complete code**, fully functional and self-contained. **Recreate every part of the code in this file** with no omissions, placeholders, or imports.
- **DO NOT** import any external JS files or components. **Recreate every component and function exactly as specified**, rewriting each as a **const** function.

## **Goal**
- The final product should be a **single, complete component** that integrates the plan and code components fully.
- Every component and function provided should be **recoded, rewritten as const functions**, and **integrated perfectly** into the current file without summarization, omission, or importation from other files.
- The result should be **100% functional**, fully dynamic, and self-contained with no missing code. It should fully reflect the plan provided and **adapt to the current code structure**.

---

**Important**: Absolutely **NO summarization**. Every single piece of code must be **rewritten as a const function**, fully integrated and dynamically functional within the current file. The goal is to have one **complete, error-free**, and **self-contained** file with everything implemented as described.





# **Instructions**

## **Plan**
- Use the **exact** plan outlined below as the foundation for your implementation.
- `Component Name: MentorCard, Component requirements: ### Final Plan

#### **Description**
This plan outlines an enhanced `MentorCard` component for a professional ERP (Enterprise Resource Planning) system, focusing on individual mentor profiles. The objective is to improve user engagement, data visualization, and interactivity while maintaining a clean and coherent user experience.

#### **Content**
- **Component Description**
    - The `MentorCard` represents individual mentor profiles, showcasing their name, expertise, assigned startups, and additional interactive features.

- **Functionality**
    - The `MentorCard` is designed to be a visually appealing, clickable component that provides a quick overview of a mentor's profile. It includes:
        - Mentor's name
        - Areas of expertise (displayed as tags)
        - Startups assigned to the mentor
        - Quick statistics displayed on hover (number of startups mentored, date of last feedback)
        - A link to a more detailed `Mentor Detail Page` for in-depth exploration of the mentor's background and engagements.

- **Details**
    - Displays mentor name, expertise tags, assigned startups.
    - Includes a hover-over tooltip feature showing quick stats.
    - Clickable, linking to a detailed `Mentor Detail Page`.
    - Responsive hover effects and animations to enhance user interaction.
    - Integration of a rating system where users can rate mentors based on their experiences.

- **Interconnectivity**
    - Links to the `Mentor Detail Page` for a detailed view of a mentor's profile.

- **User Interaction**
    - **Interact**: User can hover over or click on a `MentorCard`.
    - **Possible Interactions**:
        - Hovering displays a tooltip with quick stats.
        - Clicking navigates to the detailed profile page.
    - **Result**: Tooltip appears on hover; a new page loads on click, showing detailed mentor information.
    - **Result Functionality**: Displays additional information upon hover and redirects to the detailed profile on click.

#### **Idea Generation**
Based on the previous plan, the following features and components could enhance the user experience:

1. **Mentor Rating System**
   - **Main Functionality**: Allow users to rate mentors and provide feedback.
   - **Key Components**: Star rating widget, feedback text area.
   - **Data Requirements**: Dummy data for ratings and reviews.
   - **User Interaction Flow**: Users click on the rating stars, submit feedback, and see average ratings on the `MentorCard`.
   - **Challenges & Solutions**: Moderation of feedback could be a challenge; implement a review system for feedback before publishing.

2. **Dynamic Feedback Loop**
   - **Main Functionality**: Display real-time feedback and updates on the `MentorCard`.
   - **Key Components**: Notification badge for new feedback, real-time updates section.
   - **Data Requirements**: Dummy data simulating new feedback entries.
   - **User Interaction Flow**: Users receive notifications and can click to read new feedback.
   - **Challenges & Solutions**: Keeping the UI clean with numerous feedback; utilize a notification center to manage visibility.

3. **Interactive Data Visualization**
   - **Main Functionality**: Visual representation of mentor activities and startup engagements.
   - **Key Components**: ECharts integrated graphs/charts.
   - **Data Requirements**: Dummy data showcasing engagements and stats.
   - **User Interaction Flow**: Users can hover over graphs for more details.
   - **Challenges & Solutions**: Ensuring visual clarity; maintain a balance between information density and legibility.

4. **Customization Options**
   - **Main Functionality**: Allow users to customize the display of mentor cards (e.g., sort by expertise or recent activity).
   - **Key Components**: Dropdown filters and sorting options.
   - **Data Requirements**: Dummy data reflecting various mentors and their attributes.
   - **User Interaction Flow**: Users select sorting/filtering criteria, and the `MentorCard` updates dynamically.
   - **Challenges & Solutions**: Maintain performance with large datasets; implement efficient state management.

5. **Gamification Elements**
   - **Main Functionality**: Introduce badges or rewards for mentors based on user interactions.
   - **Key Components**: Badge display within the `MentorCard`.
   - **Data Requirements**: Dummy data for badges and achievements.
   - **User Interaction Flow**: Users see badges on mentors and can click for more details about the achievements.
   - **Challenges & Solutions**: Designing meaningful achievements; ensure the system is engaging without being overwhelming.

#### **Prioritization**
1. **Mentor Rating System** - High impact, moderate feasibility.
2. **Dynamic Feedback Loop** - High impact, moderate feasibility.
3. **Interactive Data Visualization** - Medium impact, high feasibility.
4. **Customization Options** - Medium impact, moderate feasibility.
5. **Gamification Elements** - Low impact, high feasibility.

### Step-by-Step Plan

#### **Clarification**
1. **MentorCard Component**: Ensure clarity on the visual layout of the card, including the positioning of name, expertise tags, and assigned startups.
2. **Interactive Features**: Clearly define how the hover effects and tooltips will function, including what statistics are displayed and their format.

#### **Implementation Guidance**
1. **MentorCard Creation**
    - Use a card component structure (e.g., defined via CSS Flexbox or Grid).
    - Incorporate props for mentor's name, expertise, and startups.
  
2. **Hover Tooltip Implementation**
    - Utilize CSS for hover effects.
    - Display a tooltip with quick stats using a state variable to manage visibility.
  
3. **Clickable Navigation**
    - Add an `onClick` event handler to the `MentorCard` that routes to the `Mentor Detail Page`.

4. **Rating System Integration**
    - Implement a star rating widget using a library like React Stars.
    - Create a feedback form component that takes user input and submits it.

5. **Dynamic Feedback Loop**
    - Include a notification badge that updates based on new feedback.
    - Use a state management solution to reflect changes in real-time.

6. **Interactive Data Visualization**
    - Integrate ECharts or Chart.js for data visualization.
    - Ensure that the graphs are responsive and provide tooltips on hover.

7. **Customization Options**
    - Use dropdown components to provide filtering and sorting functionalities.
    - Implement state management to update the displayed list of MentorCards dynamically.

8. **Gamification Elements**
    - Create a badge display section on the `MentorCard` to showcase achievements.
    - Define criteria for earning badges and ensure these are visually distinct.

#### **Efficiency**
- Structure components for reusability, e.g., create a reusable `Tooltip` and `Rating` component.
- Use memoization techniques where necessary to avoid unnecessary re-renders.

#### **Technical Specifications**
- Framework: React.js (or a similar front-end framework).
- State Management: React's Context API or Redux.
- Styling: CSS-in-JS libraries (e.g., styled-components) or traditional CSS/SASS.

#### **Examples**
- **MentorCard Example**:
```jsx
<MentorCard 
    name="John Doe" 
    expertise={["Finance", "Marketing"]} 
    startups={["Startup A", "Startup B"]} 
/>
```

#### **Edge Cases**
1. **No Assigned Startups**: Display a placeholder message or icon.
2. **No Ratings Yet**: Show a default state indicating that ratings are welcome.
3. **Feedback Moderation**: Ensure that feedback submitted is validated before displaying it.

#### **Enhancements**
- Implement dark/light mode toggle for better accessibility.
- Add animations for loading states when data is fetched for mentors.
- Introduce keyboard navigation for improved accessibility.

By implementing these features, the `MentorCard` component can provide a comprehensive and engaging experience for users, encouraging exploration and interaction while presenting information in a visually appealing manner.`
- **Integrate** the plan directly into the code components provided, ensuring every part of the plan is fully reflected in the code. The integration must be seamless, with no missing details or gaps. All pieces should function together as a single, cohesive file.

## **CodeComponents**
- **Rewrite EVERY SINGLE LINE** of the components below as **const** functions within the current file.
- **DO NOT** leave out any provided code.
- **DO NOT** import any components or functions from other files. Every component must be rewritten as a **const** function in this file, fully recoded from scratch.
- **Adjust** the code so that it **dynamically works** for your current code structure. Every function should be self-contained, with dynamic behavior that adapts to the current project setup.
- `

```javascript
// File Path: Tooltip.js
import React, { useState } from 'react';
import ReactECharts from 'echarts-for-react';

const Tooltip = () => {
  const [tooltipVisible, setTooltipVisible] = useState(false);
  const [mentorData] = useState({
    name: "Mentor XYZ",
    startupsMentored: 10,
    lastFeedbackDate: "01/12/2023",
    bio: "Expert in tech startups with a background in software engineering.",
  });

  const [chartData] = useState({
    pieData: [
      { value: 5, name: 'Tech' },
      { value: 3, name: 'Health' },
      { value: 2, name: 'Finance' },
    ],
    barData: [
      { date: 'Jan', feedback: 2 },
      { date: 'Feb', feedback: 4 },
      { date: 'Mar', feedback: 1 },
    ],
  });

  const showTooltip = () => {
    setTooltipVisible(true);
  };

  const hideTooltip = () => {
    setTooltipVisible(false);
  };

  const getOption = () => ({
    tooltip: {
      trigger: 'item',
    },
    series: [
      {
        name: 'Startups Mentored',
        type: 'pie',
        radius: '50%',
        data: chartData.pieData,
        emphasis: {
          itemStyle: {
            shadowBlur: 10,
            shadowOffsetX: 0,
            shadowColor: 'rgba(0, 0, 0, 0.5)',
          },
        },
      },
    ],
  });

  const getBarOption = () => ({
    xAxis: {
      type: 'category',
      data: chartData.barData.map(item => item.date),
    },
    yAxis: {
      type: 'value',
    },
    series: [
      {
        data: chartData.barData.map(item => item.feedback),
        type: 'bar',
      },
    ],
  });

  return (
    <div style={{ position: 'relative', width: '500px', height: '400px' }}>
      <div
        onMouseEnter={showTooltip}
        onMouseLeave={hideTooltip}
        style={{ padding: '20px', border: '1px solid black', cursor: 'pointer' }}
      >
        {mentorData.name}
      </div>
      {tooltipVisible && (
        <div style={{
          position: 'absolute',
          backgroundColor: 'white',
          border: '1px solid black',
          padding: '10px',
          top: '40px',
          left: '0',
          transition: 'opacity 0.5s ease',
          zIndex: 1000,
        }}>
          <p>Mentored: {mentorData.startupsMentored} Startups</p>
          <p>Last Feedback: {mentorData.lastFeedbackDate}</p>
          <p>Bio: {mentorData.bio}</p>
        </div>
      )}
      <ReactECharts option={getOption()} style={{ height: '200px', marginTop: '20px' }} />
      <ReactECharts option={getBarOption()} style={{ height: '200px', marginTop: '20px' }} />
    </div>
  );
};

export default Tooltip;
````
- Ensure that every line of code is **faithfully recoded**. **No shortcuts, no omissions, no imports.** Every component should be rewritten as a **const** function and fully integrated into the file.

## **FileRequirements**
- Create a single **JavaScript** file.
- **DO NOT** include any external styling (e.g., CSS files). Styling should not be a part of this task.
- Use only **dummy data**, with no backend, API calls, or external services.
- Include only necessary React imports (e.g., `useState`, `useEffect` if needed).
- **DO NOT** import any custom components or functions from other files. All logic and components must be fully contained within the single file.

## **Rules**

### **General**
- **NO ERRORS**: The code must work perfectly on the first try, without bugs or issues.
- Provide **complete code**, fully functional and self-contained. **Recreate every part of the code in this file** with no omissions, placeholders, or imports.
- **DO NOT** import any external JS files or components. **Recreate every component and function exactly as specified**, rewriting each as a **const** function.

## **Goal**
- The final product should be a **single, complete component** that integrates the plan and code components fully.
- Every component and function provided should be **recoded, rewritten as const functions**, and **integrated perfectly** into the current file without summarization, omission, or importation from other files.
- The result should be **100% functional**, fully dynamic, and self-contained with no missing code. It should fully reflect the plan provided and **adapt to the current code structure**.

---

**Important**: Absolutely **NO summarization**. Every single piece of code must be **rewritten as a const function**, fully integrated and dynamically functional within the current file. The goal is to have one **complete, error-free**, and **self-contained** file with everything implemented as described.




