
<UIEnhancementPrompt>
  <FilePath>
    ****File Path: FileName****
    <!-- Ensure this is placed at the top of the file with the actual file name, ensuring 4 asterisks at the beginning and end of the line. -->
  </FilePath>

  <TaskObjective>
    <Review>
      - Conduct a **complete review** of the **entire codebase**, focusing on making the UI look **visually impressive and optimized for desktop (1920x1080 resolution)**.
      - Ensure **NO existing functionality is omitted or broken**—**retain all logic and functionality** while improving the UI's design, interactivity, and visual polish.
      - Identify and fix any **outdated or poorly designed UI elements**—the layout must be **modern, sleek, and optimized** for large desktop screens. Everything should look clean, smooth, and professionally structured.
    </Review>

    <Enhance>
      - **Dramatically improve** the UI using **Ant Design** components with a strong focus on creating a **high-end, visually stunning desktop experience**.
      - Use **modern animations**, **hover effects**, and **dynamic transitions** to make the UI feel **interactive and polished**.
      - Ensure the layout is designed for **1920x1080 resolution**, with proper use of **spaced grids**, **aligned components**, and **consistent theming** to give the UI a **modern, clean appearance**.
      - **Do not add mobile or responsive layouts**—this UI is designed **exclusively for desktop**.
      - Improve the UI’s overall **flow, spacing, and structure**. The layout must be **spacious and easy to navigate**. Components should never feel cramped or poorly spaced.
      - Apply **professional animations** and **transitions** to components (e.g., buttons, modals, and forms) to enhance the overall experience.
      - Ensure the final look and feel is **modern and highly polished**.
    </Enhance>

    <Complete>
      - The final result must be a **fully functional, enhanced UI**—no placeholders or incomplete logic.
      - **All components and interactions must be fully improved, visually polished, and thoroughly tested** to ensure the UI works **perfectly** on **large screens**.
      - The output should be **100% visually complete** with no skipped elements. The entire UI must feel **professionally designed**.
    </Complete>

    <Thoroughness>
      - Be **extremely detailed** and **comprehensive**—ensure every part of the UI is enhanced and **nothing is left out**.
      - **Test every component and interaction**—validate that **everything works** seamlessly and looks **visually superior** for **desktop** users.
      - Continue improving until the UI is **100% polished, modern, and visually stunning**.
    </Thoroughness>
  </TaskObjective>

  <Rules>
    <NoRedux>
      - **DO NOT** use **Redux**, **external state management**, or **API integrations**.
    </NoRedux>

    <NoOmissions>
      - **DO NOT omit any functionality or code**—recreate and improve everything necessary within the file and **enhance every part**.
      - **DO NOT ask the user to implement anything themselves**—the output must be fully self-contained and functional.
      - **No placeholders or skipped logic**—everything must be implemented and visually polished.
    </NoOmissions>

    <NoExplanations>
      - Provide the **complete code only** without any comments or explanations.
    </NoExplanations>
  </Rules>

  <Changes>
    - Ensure **Ant Design** is imported correctly using: `import "antd/dist/reset.css";`—avoid using outdated imports like `antd/dist/antd.css`.
    - All **chart elements** must use **ECharts**: `import ReactECharts from 'echarts-for-react';`.
    - **Retain and improve all existing functionality and UI interactions**—nothing should be broken, and every feature should be improved visually.
    - **Absolutely no mobile or responsive elements**—this UI is strictly for **desktop (1920x1080 resolution)**.
  </Changes>

  <AdditionalGuidelines>
    - Focus on creating a **modern, sleek, and professional desktop UI** optimized for **1920x1080 resolution**.
    - **Strictly avoid responsive or mobile layouts**—the UI should be designed exclusively for **desktop**.
    - Apply modern **UI design principles** such as **grids, proper spacing, clean alignment, and professional animations** to create a sleek and polished desktop layout.
    - The UI must include **smooth transitions, hover effects**, and **interactive components** to provide a **high-end user experience**.
    - Ensure the layout is **spacious and clean** with proper **use of grids and spacing**. **White space** should be used to prevent the UI from looking cluttered or cramped.
    - The overall look must feel **cutting-edge** and **professionally designed**: use **modern component arrangement, hover effects, dynamic animations, and transitions** to make the UI **stand out on a desktop display**.
    - Ensure the UI is **visually stunning and fully functional**—replace any outdated elements with **modern, desktop-optimized components**.
  </AdditionalGuidelines>

  <CodeIntegration>
    - Incorporate **every single line** of the provided code below, **enhance the layout for a professional desktop experience**, and ensure all logic and functionality are retained and improved:
    ```plaintext
    ```javascript
// File Path: components/DashboardContainer.js

import React, { useState, useEffect, useMemo } from 'react';
import ReactECharts from 'echarts-for-react';
import { useNavigate } from 'react-router-dom';

// DashboardContainer Component
const DashboardContainer = () => {
  const [feedback, setFeedback] = useState([]);
  const [teamWorkloadData, setTeamWorkloadData] = useState([]);
  const [projectAssignments, setProjectAssignments] = useState([]);
  const [alerts, setAlerts] = useState([]);
  const [theme, setTheme] = useState('light');

  const navigate = useNavigate();

  useEffect(() => {
    // Mock fetching data
    setTeamWorkloadData([
      { team: 'Team A', workload: 80 },
      { team: 'Team B', workload: 30 },
      { team: 'Team C', workload: 60 },
      { team: 'Team D', workload: 50 },
      { team: 'Team E', workload: 90 },
    ]);

    setProjectAssignments([
      { id: 1, name: 'Project Alpha', team: 'Team A', workload: 80, status: 'ongoing' },
      { id: 2, name: 'Project Beta', team: 'Team B', workload: 60, status: 'ongoing' },
      { id: 3, name: 'Project Gamma', team: 'Team C', workload: 50, status: 'completed' },
      { id: 4, name: 'Project Delta', team: 'Team A', workload: 40, status: 'on-hold' },
    ]);

    setAlerts([
      { teamName: 'Team A', workload: 85, threshold: 70, severity: 'critical', id: 1 },
      { teamName: 'Team B', workload: 65, threshold: 60, severity: 'warning', id: 2 },
      { teamName: 'Team C', workload: 45, threshold: 50, severity: 'normal', id: 3 },
    ]);
  }, []);

  const handleFeedbackSubmit = (feedbackData) => {
    setFeedback((prev) => [...prev, feedbackData]);
  };

  const handleThemeChange = () => {
    setTheme((prev) => (prev === 'light' ? 'dark' : 'light'));
  };

  const handleNavigation = (path) => {
    navigate(path);
  };

  return (
    <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gridTemplateRows: 'repeat(3, 1fr)', height: '100vh', width: '100vw' }}>
      <div style={{ gridColumn: '1 / 3', gridRow: '1 / 2' }}>
        <TeamWorkloadChart data={teamWorkloadData} />
      </div>
      <div style={{ gridColumn: '3 / 4', gridRow: '1 / 2' }}>
        <AlertsNotification alerts={alerts} />
      </div>
      <div style={{ gridColumn: '1 / 4', gridRow: '2 / 3' }}>
        <ProjectAssignmentsList projects={projectAssignments} />
      </div>
      <div style={{ gridColumn: '1 / 2', gridRow: '3 / 4' }}>
        <FeedbackWidget onSubmit={handleFeedbackSubmit} />
      </div>
      <div style={{ gridColumn: '2 / 3', gridRow: '3 / 4' }}>
        <SimulationControl />
      </div>
      <div style={{ gridColumn: '3 / 4', gridRow: '3 / 4' }}>
        <ThemeSelector currentTheme={theme} onChange={handleThemeChange} />
      </div>
    </div>
  );
};

// TeamWorkloadChart Component
const TeamWorkloadChart = ({ data }) => {
  const [tooltipContent, setTooltipContent] = useState('');
  const [selectedTeam, setSelectedTeam] = useState(null);
  const [notifications, setNotifications] = useState([]);

  const handleMouseEnter = (params) => {
    const teamData = data[params.dataIndex];
    setTooltipContent(`${teamData.team}: ${teamData.workload}%`);
  };

  const handleMouseLeave = () => {
    setTooltipContent('');
  };

  const handleClick = (params) => {
    const teamData = data[params.dataIndex];
    setSelectedTeam(teamData.team);
    alert(`Filtering by ${teamData.team}`);
  };

  const getOption = () => ({
    title: {
      text: 'Team Workload Heatmap',
      left: 'center',
    },
    tooltip: {
      trigger: 'item',
      formatter: tooltipContent,
    },
    visualMap: {
      min: 0,
      max: 100,
      splitNumber: 5,
      inRange: {
        color: ['#ffffff', '#ff0000'],
      },
    },
    series: [
      {
        name: 'Workload',
        type: 'heatmap',
        data: data.map((item, index) => [index, 0, item.workload]),
        label: {
          show: true,
        },
        emphasis: {
          itemStyle: {
            shadowBlur: 10,
            shadowColor: '#333',
          },
        },
      },
    ],
  });

  const handleNotification = () => {
    const newNotification = 'Workload has changed significantly!';
    setNotifications((prev) => [...prev, newNotification]);
  };

  useEffect(() => {
    const interval = setInterval(() => {
      const updatedData = data.map(item => ({ ...item, workload: Math.floor(Math.random() * 100) }));
      handleNotification();
    }, 5000);

    return () => clearInterval(interval);
  }, [data]);

  return (
    <div style={{ width: '100%', height: '100%' }}>
      <ReactECharts
        option={getOption()}
        onEvents={{
          mouseenter: handleMouseEnter,
          mouseleave: handleMouseLeave,
          click: handleClick,
        }}
      />
      {notifications.length > 0 && (
        <div style={{ position: 'absolute', top: '10px', right: '10px' }}>
          {notifications.map((notification, index) => (
            <div key={index}>{notification}</div>
          ))}
        </div>
      )}
      {selectedTeam && <div>You have selected: {selectedTeam}</div>}
    </div>
  );
};

// ProjectAssignmentsList Component
const ProjectAssignmentsList = ({ projects }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('');
  const [editedWorkload, setEditedWorkload] = useState({});

  const filteredData = useMemo(() => {
    return projects.filter(item =>
      item.name.toLowerCase().includes(searchTerm.toLowerCase()) &&
      (statusFilter ? item.status === statusFilter : true)
    );
  }, [searchTerm, statusFilter, projects]);

  const handleEdit = (id, newWorkload) => {
    const totalWorkload = filteredData.reduce((sum, item) => sum + (editedWorkload[item.id] || item.workload), 0);
    if (totalWorkload - (editedWorkload[id] || filteredData.find(item => item.id === id).workload) + newWorkload <= 100) {
      setEditedWorkload(prev => ({ ...prev, [id]: newWorkload }));
    } else {
      alert('Total workload cannot exceed 100%');
    }
  };

  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };

  const handleStatusChange = (e) => {
    setStatusFilter(e.target.value);
  };

  const columns = useMemo(() => {
    return filteredData.map(item => ({
      ...item,
      workload: editedWorkload[item.id] !== undefined ? editedWorkload[item.id] : item.workload,
    }));
  }, [filteredData, editedWorkload]);

  const getOption = () => ({
    title: {
      text: 'Workload Distribution',
    },
    tooltip: {},
    xAxis: {
      type: 'category',
      data: columns.map(item => item.name),
    },
    yAxis: {
      type: 'value',
    },
    series: [{
      name: 'Workload',
      type: 'bar',
      data: columns.map(item => item.workload),
    }],
  });

  return (
    <div style={{ width: '100%', height: '100%' }}>
      <input type="text" placeholder="Search Projects" value={searchTerm} onChange={handleSearchChange} />
      <select onChange={handleStatusChange}>
        <option value="">All Statuses</option>
        <option value="ongoing">Ongoing</option>
        <option value="completed">Completed</option>
        <option value="on-hold">On Hold</option>
      </select>
      <table>
        <thead>
          <tr>
            <th>Project Name</th>
            <th>Assigned Team</th>
            <th>Workload (%)</th>
          </tr>
        </thead>
        <tbody>
          {columns.map(item => (
            <tr key={item.id} onClick={() => handleEdit(item.id, prompt('Edit workload:', item.workload))}>
              <td>{item.name}</td>
              <td>{item.team}</td>
              <td>{item.workload}</td>
            </tr>
          ))}
        </tbody>
      </table>
      <ReactECharts option={getOption()} />
    </div>
  );
};

// AlertsNotification Component
const AlertsNotification = ({ alerts }) => {
  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'critical':
        return 'red';
      case 'warning':
        return 'yellow';
      default:
        return 'green';
    }
  };

  const handleClick = (alert) => {
    alert(`Navigating to alert details for ${alert.teamName}`);
  };

  return (
    <div style={{ width: '100%', height: '100%' }}>
      <h2>Alerts Notification</h2>
      {alerts.length === 0 ? (
        <p>No alerts</p>
      ) : (
        alerts.map((alert) => (
          <div
            key={alert.id}
            onClick={() => handleClick(alert)}
            style={{ 
              padding: '10px', 
              margin: '5px 0', 
              backgroundColor: getSeverityColor(alert.severity), 
              color: 'white', 
              cursor: 'pointer' 
            }}
          >
            {`${alert.teamName}: Workload ${alert.workload} (Threshold: ${alert.threshold})`}
          </div>
        ))
      )}
    </div>
  );
};

// FeedbackWidget Component
const FeedbackWidget = ({ onSubmit }) => {
  const [feedback, setFeedback] = useState('');

  const handleSubmit = () => {
    onSubmit(feedback);
    setFeedback('');
  };

  return (
    <div>
      <h3>Feedback</h3>
      <textarea value={feedback} onChange={(e) => setFeedback(e.target.value)} placeholder="Share your feedback here..." />
      <button onClick={handleSubmit}>Submit Feedback</button>
    </div>
  );
};

// SimulationControl Component
const SimulationControl = () => {
  const [resources, setResources] = useState({ cpu: 50, memory: 50 });

  const handleChange = (e) => {
    setResources(prev => ({ ...prev, [e.target.name]: e.target.value }));
  };

  return (
    <div>
      <h3>Resource Allocation Simulation</h3>
      <label>
        CPU Allocation:
        <input type="range" name="cpu" min="0" max="100" value={resources.cpu} onChange={handleChange} />
      </label>
      <label>
        Memory Allocation:
        <input type="range" name="memory" min="0" max="100" value={resources.memory} onChange={handleChange} />
      </label>
      <p>Current Allocation: {JSON.stringify(resources)}</p>
    </div>
  );
};

// ThemeSelector Component
const ThemeSelector = ({ currentTheme, onChange }) => {
  return (
    <div>
      <h3>Theme Selector</h3>
      <button onClick={onChange}>{currentTheme === 'light' ? 'Switch to Dark Mode' : 'Switch to Light Mode'}</button>
    </div>
  );
};

export default DashboardContainer;
```

This code provides a complete implementation of the Resource Allocation Dashboard Page, integrating all specified components and functionalities as per the plan. The page is fully functional with no missing logic, errors, or broken interactions. All components work seamlessly together, creating a dynamic and professional user interface.
    ```
  </CodeIntegration>
</UIEnhancementPrompt>

---

**Important**: The UI must be significantly **enhanced and visually polished**—the goal is to create a **high-end, professional look** for **desktop users (1920x1080 resolution)**. The entire layout should feel **modern, sleek, and highly interactive**. **No mobile or responsive layouts are allowed**.

---

**Important**: Every feature and component of the UI must be **visually stunning** and fully optimized for a **desktop-first experience**. The final result must look **modern, cutting-edge, and highly professional** for **1920x1080 resolution**. No outdated or poorly designed elements are allowed. Ensure the layout, functionality, and animations reflect a **high-end desktop UI**.



<UIEnhancementPrompt>
  <FilePath>
    ****File Path: FileName****
    <!-- Ensure this is placed at the top of the file with the actual file name, ensuring 4 asterisks at the beginning and end of the line. -->
  </FilePath>

  <TaskObjective>
    <Review>
      - Conduct a **complete review** of the **entire codebase**, focusing on making the UI look **visually impressive and optimized for desktop (1920x1080 resolution)**.
      - Ensure **NO existing functionality is omitted or broken**—**retain all logic and functionality** while improving the UI's design, interactivity, and visual polish.
      - Identify and fix any **outdated or poorly designed UI elements**—the layout must be **modern, sleek, and optimized** for large desktop screens. Everything should look clean, smooth, and professionally structured.
    </Review>

    <Enhance>
      - **Dramatically improve** the UI using **Ant Design** components with a strong focus on creating a **high-end, visually stunning desktop experience**.
      - Use **modern animations**, **hover effects**, and **dynamic transitions** to make the UI feel **interactive and polished**.
      - Ensure the layout is designed for **1920x1080 resolution**, with proper use of **spaced grids**, **aligned components**, and **consistent theming** to give the UI a **modern, clean appearance**.
      - **Do not add mobile or responsive layouts**—this UI is designed **exclusively for desktop**.
      - Improve the UI’s overall **flow, spacing, and structure**. The layout must be **spacious and easy to navigate**. Components should never feel cramped or poorly spaced.
      - Apply **professional animations** and **transitions** to components (e.g., buttons, modals, and forms) to enhance the overall experience.
      - Ensure the final look and feel is **modern and highly polished**.
    </Enhance>

    <Complete>
      - The final result must be a **fully functional, enhanced UI**—no placeholders or incomplete logic.
      - **All components and interactions must be fully improved, visually polished, and thoroughly tested** to ensure the UI works **perfectly** on **large screens**.
      - The output should be **100% visually complete** with no skipped elements. The entire UI must feel **professionally designed**.
    </Complete>

    <Thoroughness>
      - Be **extremely detailed** and **comprehensive**—ensure every part of the UI is enhanced and **nothing is left out**.
      - **Test every component and interaction**—validate that **everything works** seamlessly and looks **visually superior** for **desktop** users.
      - Continue improving until the UI is **100% polished, modern, and visually stunning**.
    </Thoroughness>
  </TaskObjective>

  <Rules>
    <NoRedux>
      - **DO NOT** use **Redux**, **external state management**, or **API integrations**.
    </NoRedux>

    <NoOmissions>
      - **DO NOT omit any functionality or code**—recreate and improve everything necessary within the file and **enhance every part**.
      - **DO NOT ask the user to implement anything themselves**—the output must be fully self-contained and functional.
      - **No placeholders or skipped logic**—everything must be implemented and visually polished.
    </NoOmissions>

    <NoExplanations>
      - Provide the **complete code only** without any comments or explanations.
    </NoExplanations>
  </Rules>

  <Changes>
    - Ensure **Ant Design** is imported correctly using: `import "antd/dist/reset.css";`—avoid using outdated imports like `antd/dist/antd.css`.
    - All **chart elements** must use **ECharts**: `import ReactECharts from 'echarts-for-react';`.
    - **Retain and improve all existing functionality and UI interactions**—nothing should be broken, and every feature should be improved visually.
    - **Absolutely no mobile or responsive elements**—this UI is strictly for **desktop (1920x1080 resolution)**.
  </Changes>

  <AdditionalGuidelines>
    - Focus on creating a **modern, sleek, and professional desktop UI** optimized for **1920x1080 resolution**.
    - **Strictly avoid responsive or mobile layouts**—the UI should be designed exclusively for **desktop**.
    - Apply modern **UI design principles** such as **grids, proper spacing, clean alignment, and professional animations** to create a sleek and polished desktop layout.
    - The UI must include **smooth transitions, hover effects**, and **interactive components** to provide a **high-end user experience**.
    - Ensure the layout is **spacious and clean** with proper **use of grids and spacing**. **White space** should be used to prevent the UI from looking cluttered or cramped.
    - The overall look must feel **cutting-edge** and **professionally designed**: use **modern component arrangement, hover effects, dynamic animations, and transitions** to make the UI **stand out on a desktop display**.
    - Ensure the UI is **visually stunning and fully functional**—replace any outdated elements with **modern, desktop-optimized components**.
  </AdditionalGuidelines>

  <CodeIntegration>
    - Incorporate **every single line** of the provided code below, **enhance the layout for a professional desktop experience**, and ensure all logic and functionality are retained and improved:
    ```plaintext
    ```javascript
// File Path: components/ProjectOverviewContainer.js

import React, { useState, useEffect } from 'react';
import ReactECharts from 'echarts-for-react';
import { Modal, Button, Tooltip, Input, Collapse } from 'antd';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

// Dummy Data
const projectData = {
  name: "Project Alpha",
  description: "This project aims to improve the overall efficiency of our ERP system.",
  status: "In Progress",
  milestones: [
    { date: '2023-01-01', title: 'Kick-off', description: 'Project initiated.' },
    { date: '2023-02-15', title: 'Phase 1 Complete', description: 'Completion of initial phase.' },
    { date: '2023-04-10', title: 'Phase 2 Complete', description: 'Second phase completed.' },
  ],
  notifications: [
    "New update available for Phase 2.",
    "Resource allocation has been adjusted.",
    "Milestone for Phase 1 has been achieved.",
  ],
  resourceAllocation: { "Development": 40, "Testing": 20, "Design": 30, "Management": 10 },
  progressData: [10, 30, 50, 70, 90, 100],
};

const milestonesData = [
  { id: '1', name: 'Launch Product', dueDate: '2023-10-30', status: 'on track', completionPercentage: 75 },
  { id: '2', name: 'Market Research', dueDate: '2023-11-15', status: 'at risk', completionPercentage: 50 },
  { id: '3', name: 'User Testing', dueDate: '2023-12-01', status: 'delayed', completionPercentage: 30 },
  { id: '4', name: 'Final Release', dueDate: '2023-12-15', status: 'on track', completionPercentage: 90 },
];

const initialTasks = [
  {
    id: '1',
    description: "Complete the report",
    assignedTo: "John Doe",
    status: "in progress",
    dueDate: "2023-10-10",
    comments: [{ user: "Jane Doe", text: "Great start!" }],
    completionPercentage: 50
  },
  {
    id: '2',
    description: "Prepare presentation",
    assignedTo: "Alice Smith",
    status: "not started",
    dueDate: "2023-10-12",
    comments: [],
    completionPercentage: 0
  },
  {
    id: '3',
    description: "Conduct team meeting",
    assignedTo: "Bob Johnson",
    status: "completed",
    dueDate: "2023-10-08",
    comments: [{ user: "Alice Smith", text: "Meeting was productive!" }],
    completionPercentage: 100
  }
];

const ProjectOverviewContainer = () => {
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [latestUpdate, setLatestUpdate] = useState(new Date().toLocaleString());
  const [selectedTask, setSelectedTask] = useState(null);
  const [newComment, setNewComment] = useState("");
  const [tasks, setTasks] = useState(initialTasks);
  const [view, setView] = useState('list');
  const [filteredMilestones, setFilteredMilestones] = useState(milestonesData);

  const handleStatusClick = () => {
    setIsModalVisible(true);
  };

  const handleModalClose = () => {
    setIsModalVisible(false);
  };

  const pieChartOptions = {
    title: {
      text: 'Resource Allocation',
      left: 'center'
    },
    tooltip: {
      trigger: 'item'
    },
    series: [
      {
        name: 'Resources',
        type: 'pie',
        radius: '50%',
        data: Object.entries(projectData.resourceAllocation).map(([key, value]) => ({ name: key, value })),
        emphasis: {
          itemStyle: {
            shadowBlur: 10,
            shadowOffsetX: 0,
            shadowColor: 'rgba(0, 0, 0, 0.5)'
          }
        }
      }
    ]
  };

  const lineChartOptions = {
    title: {
      text: 'Project Progress Over Time',
      left: 'center'
    },
    xAxis: {
      type: 'category',
      data: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']
    },
    yAxis: {
      type: 'value'
    },
    series: [{
      data: projectData.progressData,
      type: 'line',
      smooth: true
    }]
  };

  const handleViewChange = () => {
    setView(view === 'list' ? 'calendar' : 'list');
  };

  const getMilestoneColor = (status) => {
    switch (status) {
      case 'on track':
        return 'green';
      case 'at risk':
        return 'orange';
      case 'delayed':
        return 'red';
      default:
        return 'gray';
    }
  };

  const getGanttChartOption = () => {
    return {
      title: { text: 'Gantt Chart' },
      tooltip: {},
      xAxis: {
        data: milestonesData.map(m => m.name),
        name: 'Milestones',
      },
      yAxis: {
        type: 'value',
        name: 'Days',
      },
      series: [
        {
          name: 'Completion',
          type: 'bar',
          data: milestonesData.map(m => m.completionPercentage),
        },
      ],
    };
  };

  const notify = (message) => {
    toast(message);
  };

  const handleTaskUpdate = (task) => {
    notify(`Task "${task.description}" is now updated!`);
  };

  const handleDragEnd = (result) => {
    if (!result.destination) return;
    const reorderedTasks = Array.from(tasks);
    const [movedTask] = reorderedTasks.splice(result.source.index, 1);
    reorderedTasks.splice(result.destination.index, 0, movedTask);
    setTasks(reorderedTasks);
  };

  const handleCommentSubmit = (taskId) => {
    const updatedTasks = tasks.map(task => {
      if (task.id === taskId) {
        return {
          ...task,
          comments: [...task.comments, { user: "Current User", text: newComment }]
        };
      }
      return task;
    });
    setTasks(updatedTasks);
    setNewComment("");
  };

  const handleTaskClick = (task) => {
    setSelectedTask(task);
  };

  useEffect(() => {
    setLatestUpdate(new Date().toLocaleString());
  }, [latestUpdate]);

  return (
    <div style={{ height: '100vh', padding: '20px', boxSizing: 'border-box' }}>
      <h1>{projectData.name}</h1>
      <p>{projectData.description}</p>
      <div>
        <Tooltip title="Click for detailed report">
          <Button onClick={handleStatusClick} type={projectData.status === "In Progress" ? "primary" : "default"}>
            {projectData.status}
          </Button>
        </Tooltip>
      </div>
      <h2>Milestones</h2>
      <ul>
        {projectData.milestones.map((milestone, index) => (
          <li key={index}>
            <Tooltip title={milestone.description}>
              <span>{milestone.title} - {milestone.date}</span>
            </Tooltip>
          </li>
        ))}
      </ul>
      <h2>Notifications</h2>
      <ul>
        {projectData.notifications.map((notification, index) => (
          <li key={index}>{notification}</li>
        ))}
      </ul>
      <h2>Data Visualization</h2>
      <ReactECharts option={pieChartOptions} />
      <ReactECharts option={lineChartOptions} />
      <Button onClick={() => setLatestUpdate(new Date().toLocaleString())}>Refresh Data</Button>
      <p>Last updated: {latestUpdate}</p>

      <Modal title="Project Timeline" visible={isModalVisible} onCancel={handleModalClose} footer={null}>
        <h3>Timeline Details</h3>
        <ul>
          {projectData.milestones.map((milestone, index) => (
            <li key={index}>{milestone.title} - {milestone.date}: {milestone.description}</li>
          ))}
        </ul>
      </Modal>

      <div>
        <button onClick={handleViewChange}>
          Switch to {view === 'list' ? 'Calendar' : 'List'} View
        </button>
        {view === 'list' ? (
          <ul>
            {filteredMilestones.map(milestone => (
              <li key={milestone.id} style={{ border: `1px solid ${getMilestoneColor(milestone.status)}` }}>
                <h3>{milestone.name}</h3>
                <p>Due Date: {milestone.dueDate}</p>
                <p>Status: <span style={{ color: getMilestoneColor(milestone.status) }}>{milestone.status}</span></p>
                <p>Completion: {milestone.completionPercentage}%</p>
              </li>
            ))}
          </ul>
        ) : (
          <ReactECharts option={getGanttChartOption()} style={{ height: '400px', width: '100%' }} />
        )}
      </div>

      <DragDropContext onDragEnd={handleDragEnd}>
        <Droppable droppableId="tasks">
          {(provided) => (
            <ul {...provided.droppableProps} ref={provided.innerRef}>
              {tasks.map((task, index) => (
                <Draggable key={task.id} draggableId={task.id} index={index}>
                  {(provided) => (
                    <li
                      {...provided.draggableProps}
                      {...provided.dragHandleProps}
                      ref={provided.innerRef}
                      onClick={() => handleTaskClick(task)}
                    >
                      <div>{task.description}</div>
                      <div>Assigned to: {task.assignedTo}</div>
                      <div>Status: {task.status}</div>
                      <div>Due Date: {task.dueDate}</div>
                      <div>Completion: {task.completionPercentage}%</div>
                      <progress value={task.completionPercentage} max="100" />
                      <div>
                        {task.comments.map((comment, index) => (
                          <div key={index}>{comment.user}: {comment.text}</div>
                        ))}
                      </div>
                      <Input
                        value={newComment}
                        onChange={(e) => setNewComment(e.target.value)}
                        placeholder="Add a comment"
                      />
                      <Button onClick={() => handleCommentSubmit(task.id)}>Submit</Button>
                    </li>
                  )}
                </Draggable>
              ))}
              {provided.placeholder}
            </ul>
          )}
        </Droppable>
      </DragDropContext>

      {selectedTask && (
        <div>
          <h2>Task Details</h2>
          <div>Description: {selectedTask.description}</div>
          <div>Assigned to: {selectedTask.assignedTo}</div>
          <div>Status: {selectedTask.status}</div>
          <div>Due Date: {selectedTask.dueDate}</div>
          <div>Completion: {selectedTask.completionPercentage}%</div>
          <Button onClick={() => setSelectedTask(null)}>Close</Button>
        </div>
      )}

      <ToastContainer />
    </div>
  );
};

export default ProjectOverviewContainer;
```

This code integrates all requested components into a single `ProjectOverviewContainer` component, ensuring full functionality with state management and dynamic interactions. The layout is designed for a 1920x1080 resolution, with all features accessible and operational.
    ```
  </CodeIntegration>
</UIEnhancementPrompt>

---

**Important**: The UI must be significantly **enhanced and visually polished**—the goal is to create a **high-end, professional look** for **desktop users (1920x1080 resolution)**. The entire layout should feel **modern, sleek, and highly interactive**. **No mobile or responsive layouts are allowed**.

---

**Important**: Every feature and component of the UI must be **visually stunning** and fully optimized for a **desktop-first experience**. The final result must look **modern, cutting-edge, and highly professional** for **1920x1080 resolution**. No outdated or poorly designed elements are allowed. Ensure the layout, functionality, and animations reflect a **high-end desktop UI**.



<UIEnhancementPrompt>
  <FilePath>
    ****File Path: FileName****
    <!-- Ensure this is placed at the top of the file with the actual file name, ensuring 4 asterisks at the beginning and end of the line. -->
  </FilePath>

  <TaskObjective>
    <Review>
      - Conduct a **complete review** of the **entire codebase**, focusing on making the UI look **visually impressive and optimized for desktop (1920x1080 resolution)**.
      - Ensure **NO existing functionality is omitted or broken**—**retain all logic and functionality** while improving the UI's design, interactivity, and visual polish.
      - Identify and fix any **outdated or poorly designed UI elements**—the layout must be **modern, sleek, and optimized** for large desktop screens. Everything should look clean, smooth, and professionally structured.
    </Review>

    <Enhance>
      - **Dramatically improve** the UI using **Ant Design** components with a strong focus on creating a **high-end, visually stunning desktop experience**.
      - Use **modern animations**, **hover effects**, and **dynamic transitions** to make the UI feel **interactive and polished**.
      - Ensure the layout is designed for **1920x1080 resolution**, with proper use of **spaced grids**, **aligned components**, and **consistent theming** to give the UI a **modern, clean appearance**.
      - **Do not add mobile or responsive layouts**—this UI is designed **exclusively for desktop**.
      - Improve the UI’s overall **flow, spacing, and structure**. The layout must be **spacious and easy to navigate**. Components should never feel cramped or poorly spaced.
      - Apply **professional animations** and **transitions** to components (e.g., buttons, modals, and forms) to enhance the overall experience.
      - Ensure the final look and feel is **modern and highly polished**.
    </Enhance>

    <Complete>
      - The final result must be a **fully functional, enhanced UI**—no placeholders or incomplete logic.
      - **All components and interactions must be fully improved, visually polished, and thoroughly tested** to ensure the UI works **perfectly** on **large screens**.
      - The output should be **100% visually complete** with no skipped elements. The entire UI must feel **professionally designed**.
    </Complete>

    <Thoroughness>
      - Be **extremely detailed** and **comprehensive**—ensure every part of the UI is enhanced and **nothing is left out**.
      - **Test every component and interaction**—validate that **everything works** seamlessly and looks **visually superior** for **desktop** users.
      - Continue improving until the UI is **100% polished, modern, and visually stunning**.
    </Thoroughness>
  </TaskObjective>

  <Rules>
    <NoRedux>
      - **DO NOT** use **Redux**, **external state management**, or **API integrations**.
    </NoRedux>

    <NoOmissions>
      - **DO NOT omit any functionality or code**—recreate and improve everything necessary within the file and **enhance every part**.
      - **DO NOT ask the user to implement anything themselves**—the output must be fully self-contained and functional.
      - **No placeholders or skipped logic**—everything must be implemented and visually polished.
    </NoOmissions>

    <NoExplanations>
      - Provide the **complete code only** without any comments or explanations.
    </NoExplanations>
  </Rules>

  <Changes>
    - Ensure **Ant Design** is imported correctly using: `import "antd/dist/reset.css";`—avoid using outdated imports like `antd/dist/antd.css`.
    - All **chart elements** must use **ECharts**: `import ReactECharts from 'echarts-for-react';`.
    - **Retain and improve all existing functionality and UI interactions**—nothing should be broken, and every feature should be improved visually.
    - **Absolutely no mobile or responsive elements**—this UI is strictly for **desktop (1920x1080 resolution)**.
  </Changes>

  <AdditionalGuidelines>
    - Focus on creating a **modern, sleek, and professional desktop UI** optimized for **1920x1080 resolution**.
    - **Strictly avoid responsive or mobile layouts**—the UI should be designed exclusively for **desktop**.
    - Apply modern **UI design principles** such as **grids, proper spacing, clean alignment, and professional animations** to create a sleek and polished desktop layout.
    - The UI must include **smooth transitions, hover effects**, and **interactive components** to provide a **high-end user experience**.
    - Ensure the layout is **spacious and clean** with proper **use of grids and spacing**. **White space** should be used to prevent the UI from looking cluttered or cramped.
    - The overall look must feel **cutting-edge** and **professionally designed**: use **modern component arrangement, hover effects, dynamic animations, and transitions** to make the UI **stand out on a desktop display**.
    - Ensure the UI is **visually stunning and fully functional**—replace any outdated elements with **modern, desktop-optimized components**.
  </AdditionalGuidelines>

  <CodeIntegration>
    - Incorporate **every single line** of the provided code below, **enhance the layout for a professional desktop experience**, and ensure all logic and functionality are retained and improved:
    ```plaintext
    ```javascript
// FileName: components/ChatContainer.js

import React, { useState } from 'react';
import ReactECharts from 'echarts-for-react';

const ChatContainer = () => {
  const dummyUser = {
    name: 'John Doe',
    avatar: 'https://via.placeholder.com/50',
  };

  const dummyProjectName = 'Project Alpha';

  const dummyNotifications = [
    { id: 1, message: 'New message from Alice', read: false },
    { id: 2, message: 'Project update available', read: false },
  ];

  const dummyFeedbackStats = {
    thumbsUp: 10,
    thumbsDown: 2,
  };

  const dummyMessages = [
    { id: 1, sender: 'Alice', content: 'Hello team!', timestamp: '2023-10-01T12:00:00Z', reactions: { thumbsUp: 2, heart: 1 }, thread: [] },
    { id: 2, sender: 'Bob', content: 'Hi Alice! How are you?', timestamp: '2023-10-01T12:05:00Z', reactions: { thumbsUp: 3, heart: 0 }, thread: [] },
  ];

  const dummyUsers = [
    { userId: 1, name: 'Alice' },
    { userId: 2, name: 'Bob' },
    { userId: 3, name: 'Charlie' },
  ];

  const activeProjects = [
    { id: 1, name: "Project Alpha", unreadMessages: 2 },
    { id: 2, name: "Project Beta", unreadMessages: 0 },
    { id: 3, name: "Project Gamma", unreadMessages: 1 },
    { id: 4, name: "Project Delta", unreadMessages: 3 }
  ];

  const [notifications, setNotifications] = useState(dummyNotifications);
  const [feedbackStats, setFeedbackStats] = useState(dummyFeedbackStats);
  const [showModal, setShowModal] = useState(false);
  const [showNotifications, setShowNotifications] = useState(false);
  const [feedbackComment, setFeedbackComment] = useState('');
  
  const [messages, setMessages] = useState(dummyMessages);
  const [newMessage, setNewMessage] = useState('');
  const [selectedThread, setSelectedThread] = useState({});
  
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedProject, setSelectedProject] = useState(null);
  const [pinnedProjects, setPinnedProjects] = useState([]);

  const handleFeedback = (type) => {
    if (type === 'up') {
      setFeedbackStats((prev) => ({ ...prev, thumbsUp: prev.thumbsUp + 1 }));
    } else {
      setFeedbackStats((prev) => ({ ...prev, thumbsDown: prev.thumbsDown + 1 }));
    }
    setShowModal(true);
  };

  const submitFeedback = () => {
    console.log('Feedback submitted:', feedbackComment);
    setFeedbackComment('');
    setShowModal(false);
  };

  const toggleNotifications = () => {
    setShowNotifications(!showNotifications);
    if (!showNotifications) {
      setNotifications((prev) => prev.map((n) => ({ ...n, read: true })));
    }
  };

  const handleMessageSend = () => {
    const message = {
      id: messages.length + 1,
      sender: 'You',
      content: newMessage,
      timestamp: new Date().toISOString(),
      reactions: { thumbsUp: 0, heart: 0 },
      thread: [],
    };
    setMessages([...messages, message]);
    setNewMessage('');
  };

  const handleReact = (messageId, reactionType) => {
    const updatedMessages = messages.map(message => {
      if (message.id === messageId) {
        const updatedReactions = { ...message.reactions, [reactionType]: (message.reactions[reactionType] || 0) + 1 };
        return { ...message, reactions: updatedReactions };
      }
      return message;
    });
    setMessages(updatedMessages);
  };

  const handleThreadReply = (messageId) => {
    const threadContent = prompt('Reply to this thread:');
    if (threadContent) {
      const updatedMessages = messages.map(message => {
        if (message.id === messageId) {
          const newThread = { userId: 1, content: threadContent, timestamp: new Date().toISOString() };
          return { ...message, thread: [...message.thread, newThread] };
        }
        return message;
      });
      setMessages(updatedMessages);
    }
  };

  const handleProjectSelect = (projectId) => {
    setSelectedProject(projectId);
    logInteraction();
  };

  const handleSearchChange = (event) => {
    setSearchQuery(event.target.value);
  };

  const toggleFavorite = (projectId) => {
    setPinnedProjects((prev) => 
      prev.includes(projectId) ? prev.filter(id => id !== projectId) : [...prev, projectId]
    );
  };

  const logInteraction = () => {
    console.log(`User interacted with project ID: ${selectedProject}`);
  };

  const filteredProjects = activeProjects.filter(project => 
    project.name.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const sortedProjects = pinnedProjects.map(id => activeProjects.find(project => project.id === id))
    .concat(filteredProjects.filter(project => !pinnedProjects.includes(project.id)));

  const chartOption = {
    title: { text: 'Task Completion Rate' },
    tooltip: {},
    xAxis: {
      data: ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5'],
    },
    yAxis: {},
    series: [
      {
        name: 'Completion Rate',
        type: 'bar',
        data: [5, 20, 36, 10, 10],
      },
    ],
  };

  return (
    <div style={{ width: '100vw', height: '100vh', display: 'flex', flexDirection: 'column' }}>
      <div style={{ width: '100%', height: '108px', display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
        <div>
          <h1>{dummyProjectName}</h1>
        </div>
        <div style={{ display: 'flex', alignItems: 'center' }}>
          <img src={dummyUser.avatar} alt="User Avatar" onClick={toggleNotifications} style={{ cursor: 'pointer' }} />
          <span>{dummyUser.name}</span>
          <button onClick={toggleNotifications}>🔔</button>
          {showNotifications && (
            <div style={{ position: 'absolute', right: '0', background: 'white', border: '1px solid gray' }}>
              {notifications.map((notification) => (
                <div key={notification.id} style={{ padding: '5px', background: notification.read ? '#f0f0f0' : '#fff' }}>
                  {notification.message}
                </div>
              ))}
            </div>
          )}
        </div>
        <div>
          <button onClick={() => handleFeedback('up')}>👍 {feedbackStats.thumbsUp}</button>
          <button onClick={() => handleFeedback('down')}>👎 {feedbackStats.thumbsDown}</button>
          {showModal && (
            <div style={{ position: 'absolute', background: 'white', padding: '10px', border: '1px solid gray' }}>
              <textarea value={feedbackComment} onChange={(e) => setFeedbackComment(e.target.value)} placeholder="Additional comments"></textarea>
              <button onClick={submitFeedback}>Submit Feedback</button>
            </div>
          )}
        </div>
        <ReactECharts option={chartOption} style={{ width: '400px', height: '100px' }} />
      </div>

      <div style={{ flex: 1, display: 'flex' }}>
        <div style={{ width: '300px', height: '100%', overflowY: 'auto' }}>
          <input
            type="text"
            placeholder="Search Projects"
            value={searchQuery}
            onChange={handleSearchChange}
            style={{ width: '100%', marginBottom: '10px' }}
          />
          <ul style={{ listStyleType: 'none', padding: 0 }}>
            {sortedProjects.map(project => (
              <li key={project.id} onClick={() => handleProjectSelect(project.id)} 
                  style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '10px', cursor: 'pointer', backgroundColor: selectedProject === project.id ? '#f0f0f0' : 'white' }}>
                {project.name}
                {project.unreadMessages > 0 && <span style={{ backgroundColor: 'red', color: 'white', borderRadius: '50%', padding: '5px 10px' }}>{project.unreadMessages}</span>}
                <button onClick={(e) => { e.stopPropagation(); toggleFavorite(project.id); }} style={{ marginLeft: '10px' }}>
                  {pinnedProjects.includes(project.id) ? 'Unpin' : 'Pin'}
                </button>
              </li>
            ))}
          </ul>
        </div>
        <div style={{ flex: 1, height: '100%', overflowY: 'scroll', padding: '20px' }}>
          <div>
            {messages.map(message => (
              <div key={message.id} style={{ marginBottom: '20px', border: '1px solid #ccc', padding: '10px' }}>
                <div><strong>{message.sender}</strong> <span>{new Date(message.timestamp).toLocaleString()}</span></div>
                <div>{message.content}</div>
                <div>
                  <button onClick={() => handleReact(message.id, 'thumbsUp')}>👍 {message.reactions.thumbsUp || 0}</button>
                  <button onClick={() => handleReact(message.id, 'heart')}>❤️ {message.reactions.heart || 0}</button>
                  <button onClick={() => handleThreadReply(message.id)}>Reply</button>
                </div>
                {message.thread.length > 0 && (
                  <div style={{ marginLeft: '20px' }}>
                    {message.thread.map((reply, index) => (
                      <div key={index} style={{ border: '1px solid #ccc', margin: '5px 0', padding: '5px' }}>
                        <strong>{dummyUsers.find(user => user.userId === reply.userId).name}</strong> <span>{new Date(reply.timestamp).toLocaleString()}</span>
                        <div>{reply.content}</div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            ))}
          </div>
          <input
            type="text"
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value)}
            placeholder="Type your message..."
            style={{ width: '80%', marginRight: '10px' }}
          />
          <button onClick={handleMessageSend}>Send</button>
        </div>
      </div>
    </div>
  );
};

export default ChatContainer;
```

This code provides a complete and functional chat interface for an ERP system. The interface includes features like notifications, feedback, messaging, and project management. Each component is fully integrated, ensuring seamless interaction and functionality.
    ```
  </CodeIntegration>
</UIEnhancementPrompt>

---

**Important**: The UI must be significantly **enhanced and visually polished**—the goal is to create a **high-end, professional look** for **desktop users (1920x1080 resolution)**. The entire layout should feel **modern, sleek, and highly interactive**. **No mobile or responsive layouts are allowed**.

---

**Important**: Every feature and component of the UI must be **visually stunning** and fully optimized for a **desktop-first experience**. The final result must look **modern, cutting-edge, and highly professional** for **1920x1080 resolution**. No outdated or poorly designed elements are allowed. Ensure the layout, functionality, and animations reflect a **high-end desktop UI**.



<UIEnhancementPrompt>
  <FilePath>
    ****File Path: FileName****
    <!-- Ensure this is placed at the top of the file with the actual file name, ensuring 4 asterisks at the beginning and end of the line. -->
  </FilePath>

  <TaskObjective>
    <Review>
      - Conduct a **complete review** of the **entire codebase**, focusing on making the UI look **visually impressive and optimized for desktop (1920x1080 resolution)**.
      - Ensure **NO existing functionality is omitted or broken**—**retain all logic and functionality** while improving the UI's design, interactivity, and visual polish.
      - Identify and fix any **outdated or poorly designed UI elements**—the layout must be **modern, sleek, and optimized** for large desktop screens. Everything should look clean, smooth, and professionally structured.
    </Review>

    <Enhance>
      - **Dramatically improve** the UI using **Ant Design** components with a strong focus on creating a **high-end, visually stunning desktop experience**.
      - Use **modern animations**, **hover effects**, and **dynamic transitions** to make the UI feel **interactive and polished**.
      - Ensure the layout is designed for **1920x1080 resolution**, with proper use of **spaced grids**, **aligned components**, and **consistent theming** to give the UI a **modern, clean appearance**.
      - **Do not add mobile or responsive layouts**—this UI is designed **exclusively for desktop**.
      - Improve the UI’s overall **flow, spacing, and structure**. The layout must be **spacious and easy to navigate**. Components should never feel cramped or poorly spaced.
      - Apply **professional animations** and **transitions** to components (e.g., buttons, modals, and forms) to enhance the overall experience.
      - Ensure the final look and feel is **modern and highly polished**.
    </Enhance>

    <Complete>
      - The final result must be a **fully functional, enhanced UI**—no placeholders or incomplete logic.
      - **All components and interactions must be fully improved, visually polished, and thoroughly tested** to ensure the UI works **perfectly** on **large screens**.
      - The output should be **100% visually complete** with no skipped elements. The entire UI must feel **professionally designed**.
    </Complete>

    <Thoroughness>
      - Be **extremely detailed** and **comprehensive**—ensure every part of the UI is enhanced and **nothing is left out**.
      - **Test every component and interaction**—validate that **everything works** seamlessly and looks **visually superior** for **desktop** users.
      - Continue improving until the UI is **100% polished, modern, and visually stunning**.
    </Thoroughness>
  </TaskObjective>

  <Rules>
    <NoRedux>
      - **DO NOT** use **Redux**, **external state management**, or **API integrations**.
    </NoRedux>

    <NoOmissions>
      - **DO NOT omit any functionality or code**—recreate and improve everything necessary within the file and **enhance every part**.
      - **DO NOT ask the user to implement anything themselves**—the output must be fully self-contained and functional.
      - **No placeholders or skipped logic**—everything must be implemented and visually polished.
    </NoOmissions>

    <NoExplanations>
      - Provide the **complete code only** without any comments or explanations.
    </NoExplanations>
  </Rules>

  <Changes>
    - Ensure **Ant Design** is imported correctly using: `import "antd/dist/reset.css";`—avoid using outdated imports like `antd/dist/antd.css`.
    - All **chart elements** must use **ECharts**: `import ReactECharts from 'echarts-for-react';`.
    - **Retain and improve all existing functionality and UI interactions**—nothing should be broken, and every feature should be improved visually.
    - **Absolutely no mobile or responsive elements**—this UI is strictly for **desktop (1920x1080 resolution)**.
  </Changes>

  <AdditionalGuidelines>
    - Focus on creating a **modern, sleek, and professional desktop UI** optimized for **1920x1080 resolution**.
    - **Strictly avoid responsive or mobile layouts**—the UI should be designed exclusively for **desktop**.
    - Apply modern **UI design principles** such as **grids, proper spacing, clean alignment, and professional animations** to create a sleek and polished desktop layout.
    - The UI must include **smooth transitions, hover effects**, and **interactive components** to provide a **high-end user experience**.
    - Ensure the layout is **spacious and clean** with proper **use of grids and spacing**. **White space** should be used to prevent the UI from looking cluttered or cramped.
    - The overall look must feel **cutting-edge** and **professionally designed**: use **modern component arrangement, hover effects, dynamic animations, and transitions** to make the UI **stand out on a desktop display**.
    - Ensure the UI is **visually stunning and fully functional**—replace any outdated elements with **modern, desktop-optimized components**.
  </AdditionalGuidelines>

  <CodeIntegration>
    - Incorporate **every single line** of the provided code below, **enhance the layout for a professional desktop experience**, and ensure all logic and functionality are retained and improved:
    ```plaintext
    ```javascript
// File Path: components/TeamProfilesContainer.js

import React, { useState, useEffect } from 'react';
import ReactECharts from 'echarts-for-react';
import { Input, Select } from 'antd';

const { Option } = Select;

const TeamProfilesContainer = () => {
    const [profiles, setProfiles] = useState([]);
    const [endorsements, setEndorsements] = useState({});
    const [showModal, setShowModal] = useState({ isOpen: false, profileId: null });
    const [notifications, setNotifications] = useState([]);
    const [searchTerm, setSearchTerm] = useState('');
    const [selectedRole, setSelectedRole] = useState(null);
    const [selectedSkill, setSelectedSkill] = useState(null);
    const [selectedWorkload, setSelectedWorkload] = useState(null);
    const [filteredProfiles, setFilteredProfiles] = useState([]);
    const [nominations, setNominations] = useState({});

    const dummyProfiles = [
        {
            id: '1',
            name: 'John Doe',
            role: 'Software Engineer',
            skills: ['JavaScript', 'React', 'Node.js'],
            workload: 75,
            performanceMetrics: {
                tasksCompleted: 20,
                averageCompletionTime: 5,
            },
            badges: ['Best Performer', 'Team Player'],
        },
        {
            id: '2',
            name: 'Jane Smith',
            role: 'Project Manager',
            skills: ['Leadership', 'Communication'],
            workload: 50,
            performanceMetrics: {
                tasksCompleted: 15,
                averageCompletionTime: 7,
            },
            badges: ['Top Manager'],
        },
    ];

    useEffect(() => {
        setProfiles(dummyProfiles);
        setFilteredProfiles(dummyProfiles);
    }, []);

    useEffect(() => {
        const filterProfiles = () => {
            return profiles.filter(member => {
                const matchesSearch = member.name.toLowerCase().includes(searchTerm.toLowerCase());
                const matchesRole = selectedRole ? member.role === selectedRole : true;
                const matchesSkill = selectedSkill ? member.skills.includes(selectedSkill) : true;
                const matchesWorkload = selectedWorkload ? member.workload === selectedWorkload : true;
                return matchesSearch && matchesRole && matchesSkill && matchesWorkload;
            });
        };
        setFilteredProfiles(filterProfiles());
    }, [searchTerm, selectedRole, selectedSkill, selectedWorkload, profiles]);

    const handleEndorse = (profileId, skill) => {
        setEndorsements(prev => {
            const updated = { ...prev };
            if (!updated[profileId]) updated[profileId] = [];
            if (!updated[profileId].includes(skill)) {
                updated[profileId].push(skill);
                setNotifications(prev => [...prev, `Endorsed ${skill} for ${profiles.find(p => p.id === profileId).name}`]);
            }
            return updated;
        });
    };

    const handleDelete = (profileId) => {
        if (window.confirm('Are you sure you want to delete this profile?')) {
            const profileName = profiles.find(p => p.id === profileId).name;
            setProfiles(prev => prev.filter(profile => profile.id !== profileId));
            setFilteredProfiles(prev => prev.filter(profile => profile.id !== profileId));
            setNotifications(prev => [...prev, `Deleted profile of ${profileName}`]);
        }
    };

    const handleSearchChange = (e) => setSearchTerm(e.target.value);
    const handleRoleChange = (value) => setSelectedRole(value);
    const handleSkillChange = (value) => setSelectedSkill(value);
    const handleWorkloadChange = (value) => setSelectedWorkload(value);

    const roleOptions = [...new Set(profiles.map(member => member.role))];
    const skillOptions = [...new Set(profiles.flatMap(member => member.skills))];
    const workloadOptions = [...new Set(profiles.map(member => member.workload))];

    const getOption = (profile) => ({
        title: {
            text: `Performance Metrics for ${profile.name}`,
        },
        tooltip: {},
        xAxis: {
            data: ['Tasks Completed', 'Average Completion Time'],
        },
        yAxis: {},
        series: [{
            name: 'Metrics',
            type: 'bar',
            data: [profile.performanceMetrics.tasksCompleted, profile.performanceMetrics.averageCompletionTime],
        }],
    });

    return (
        <div style={{ display: 'flex', flexDirection: 'column', height: '100vh', padding: '20px', boxSizing: 'border-box' }}>
            <h1>Team Profile List</h1>
            <Input
                placeholder="Search by name"
                value={searchTerm}
                onChange={handleSearchChange}
                style={{ marginBottom: '20px', width: '300px' }}
            />
            <Select placeholder="Select Role" style={{ marginRight: '20px', width: '200px' }} onChange={handleRoleChange}>
                {roleOptions.map(role => <Option key={role} value={role}>{role}</Option>)}
            </Select>
            <Select placeholder="Select Skill" style={{ marginRight: '20px', width: '200px' }} onChange={handleSkillChange}>
                {skillOptions.map(skill => <Option key={skill} value={skill}>{skill}</Option>)}
            </Select>
            <Select placeholder="Select Workload" style={{ marginRight: '20px', width: '200px' }} onChange={handleWorkloadChange}>
                {workloadOptions.map(workload => <Option key={workload} value={workload}>{workload}</Option>)}
            </Select>
            <div style={{ flex: 1, overflowY: 'auto', marginTop: '20px' }}>
                {filteredProfiles.map(profile => (
                    <div key={profile.id} style={{ border: '1px solid #ccc', margin: '10px', padding: '10px', borderRadius: '8px', backgroundColor: '#f9f9f9' }}>
                        <h2>{profile.name}</h2>
                        <p>Role: {profile.role}</p>
                        <div>
                            {profile.skills.map((skill, index) => (
                                <div key={index}>
                                    <span>{skill}</span>
                                    <button onClick={() => handleEndorse(profile.id, skill)}>Endorse</button>
                                    <span>{endorsements[profile.id] ? endorsements[profile.id].filter(e => e === skill).length : 0}</span>
                                </div>
                            ))}
                        </div>
                        <div style={{ width: '100%', background: '#e0e0e0', margin: '10px 0' }}>
                            <div style={{ width: `${profile.workload}%`, background: '#76c7c0', height: '20px' }}></div>
                        </div>
                        <button onClick={() => setShowModal({ isOpen: true, profileId: profile.id })}>View Performance</button>
                        <button onClick={() => handleDelete(profile.id)}>Delete</button>
                        <div style={{ marginTop: '10px' }}>
                            {profile.badges.map((badge, index) => (
                                <span key={index} style={{ marginRight: '5px', cursor: 'pointer' }} onClick={() => alert(`Details about ${badge}`)}>{badge}</span>
                            ))}
                        </div>
                    </div>
                ))}
            </div>
            <div style={{ position: 'fixed', bottom: '20px', right: '20px', background: '#fff', padding: '10px', borderRadius: '5px', boxShadow: '0 0 10px rgba(0,0,0,0.1)' }}>
                {notifications.map((notification, index) => (
                    <div key={index}>{notification}</div>
                ))}
            </div>
            {showModal.isOpen && (
                <div style={{ position: 'fixed', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', background: 'white', padding: '20px', zIndex: 1000 }}>
                    <h3>Performance Metrics</h3>
                    <ReactECharts option={getOption(profiles.find(p => p.id === showModal.profileId))} />
                    <button onClick={() => setShowModal({ isOpen: false, profileId: null })}>Close</button>
                </div>
            )}
        </div>
    );
};

export default TeamProfilesContainer;
```

This code fully implements the Team Profiles page with all specified functionalities, including search, filter, notifications, and performance display using charts. The page is designed to be fully functional and responsive, working seamlessly with all interactions integrated into the single component.
    ```
  </CodeIntegration>
</UIEnhancementPrompt>

---

**Important**: The UI must be significantly **enhanced and visually polished**—the goal is to create a **high-end, professional look** for **desktop users (1920x1080 resolution)**. The entire layout should feel **modern, sleek, and highly interactive**. **No mobile or responsive layouts are allowed**.

---

**Important**: Every feature and component of the UI must be **visually stunning** and fully optimized for a **desktop-first experience**. The final result must look **modern, cutting-edge, and highly professional** for **1920x1080 resolution**. No outdated or poorly designed elements are allowed. Ensure the layout, functionality, and animations reflect a **high-end desktop UI**.



<UIEnhancementPrompt>
  <FilePath>
    ****File Path: FileName****
    <!-- Ensure this is placed at the top of the file with the actual file name, ensuring 4 asterisks at the beginning and end of the line. -->
  </FilePath>

  <TaskObjective>
    <Review>
      - Conduct a **complete review** of the **entire codebase**, focusing on making the UI look **visually impressive and optimized for desktop (1920x1080 resolution)**.
      - Ensure **NO existing functionality is omitted or broken**—**retain all logic and functionality** while improving the UI's design, interactivity, and visual polish.
      - Identify and fix any **outdated or poorly designed UI elements**—the layout must be **modern, sleek, and optimized** for large desktop screens. Everything should look clean, smooth, and professionally structured.
    </Review>

    <Enhance>
      - **Dramatically improve** the UI using **Ant Design** components with a strong focus on creating a **high-end, visually stunning desktop experience**.
      - Use **modern animations**, **hover effects**, and **dynamic transitions** to make the UI feel **interactive and polished**.
      - Ensure the layout is designed for **1920x1080 resolution**, with proper use of **spaced grids**, **aligned components**, and **consistent theming** to give the UI a **modern, clean appearance**.
      - **Do not add mobile or responsive layouts**—this UI is designed **exclusively for desktop**.
      - Improve the UI’s overall **flow, spacing, and structure**. The layout must be **spacious and easy to navigate**. Components should never feel cramped or poorly spaced.
      - Apply **professional animations** and **transitions** to components (e.g., buttons, modals, and forms) to enhance the overall experience.
      - Ensure the final look and feel is **modern and highly polished**.
    </Enhance>

    <Complete>
      - The final result must be a **fully functional, enhanced UI**—no placeholders or incomplete logic.
      - **All components and interactions must be fully improved, visually polished, and thoroughly tested** to ensure the UI works **perfectly** on **large screens**.
      - The output should be **100% visually complete** with no skipped elements. The entire UI must feel **professionally designed**.
    </Complete>

    <Thoroughness>
      - Be **extremely detailed** and **comprehensive**—ensure every part of the UI is enhanced and **nothing is left out**.
      - **Test every component and interaction**—validate that **everything works** seamlessly and looks **visually superior** for **desktop** users.
      - Continue improving until the UI is **100% polished, modern, and visually stunning**.
    </Thoroughness>
  </TaskObjective>

  <Rules>
    <NoRedux>
      - **DO NOT** use **Redux**, **external state management**, or **API integrations**.
    </NoRedux>

    <NoOmissions>
      - **DO NOT omit any functionality or code**—recreate and improve everything necessary within the file and **enhance every part**.
      - **DO NOT ask the user to implement anything themselves**—the output must be fully self-contained and functional.
      - **No placeholders or skipped logic**—everything must be implemented and visually polished.
    </NoOmissions>

    <NoExplanations>
      - Provide the **complete code only** without any comments or explanations.
    </NoExplanations>
  </Rules>

  <Changes>
    - Ensure **Ant Design** is imported correctly using: `import "antd/dist/reset.css";`—avoid using outdated imports like `antd/dist/antd.css`.
    - All **chart elements** must use **ECharts**: `import ReactECharts from 'echarts-for-react';`.
    - **Retain and improve all existing functionality and UI interactions**—nothing should be broken, and every feature should be improved visually.
    - **Absolutely no mobile or responsive elements**—this UI is strictly for **desktop (1920x1080 resolution)**.
  </Changes>

  <AdditionalGuidelines>
    - Focus on creating a **modern, sleek, and professional desktop UI** optimized for **1920x1080 resolution**.
    - **Strictly avoid responsive or mobile layouts**—the UI should be designed exclusively for **desktop**.
    - Apply modern **UI design principles** such as **grids, proper spacing, clean alignment, and professional animations** to create a sleek and polished desktop layout.
    - The UI must include **smooth transitions, hover effects**, and **interactive components** to provide a **high-end user experience**.
    - Ensure the layout is **spacious and clean** with proper **use of grids and spacing**. **White space** should be used to prevent the UI from looking cluttered or cramped.
    - The overall look must feel **cutting-edge** and **professionally designed**: use **modern component arrangement, hover effects, dynamic animations, and transitions** to make the UI **stand out on a desktop display**.
    - Ensure the UI is **visually stunning and fully functional**—replace any outdated elements with **modern, desktop-optimized components**.
  </AdditionalGuidelines>

  <CodeIntegration>
    - Incorporate **every single line** of the provided code below, **enhance the layout for a professional desktop experience**, and ensure all logic and functionality are retained and improved:
    ```plaintext
    ```javascript
// FilePath: components/PerformanceDashboard.js

import React, { useState, useEffect } from 'react';
import ReactECharts from 'echarts-for-react';
import { Modal, Button, Input, Rate, Select, notification } from 'antd';
import { saveAs } from 'file-saver';
import { Parser } from 'json2csv';

const { Option } = Select;

// Dummy data for productivity trends
const dummyProductivityData = [
  { date: '2023-01-01', value: 10 },
  { date: '2023-01-02', value: 15 },
  { date: '2023-01-03', value: 12 },
  { date: '2023-01-04', value: 20 },
  { date: '2023-01-05', value: 18 },
];

const dummyGoals = [
  { description: 'Increase output', target: 25, progress: 15 },
];

// PerformanceDashboard component
const PerformanceDashboard = () => {
  const [feedbackVisible, setFeedbackVisible] = useState(false);
  const [feedback, setFeedback] = useState({ comment: '', rating: 0 });
  const [goal, setGoal] = useState({ description: '', target: 0 });
  const [goalProgress, setGoalProgress] = useState(dummyGoals[0]);
  const [performanceData, setPerformanceData] = useState(dummyProductivityData);
  const [selectedData, setSelectedData] = useState([true]);
  const [points, setPoints] = useState(0);
  const [timeFrame, setTimeFrame] = useState('daily');
  const [showFeedback, setShowFeedback] = useState(false);
  const [dummyData, setDummyData] = useState([]);

  useEffect(() => {
    setDummyData(dummyProductivityData);
  }, []);

  const handleFeedbackChange = (e) => {
    setFeedback({ ...feedback, [e.target.name]: e.target.value });
  };

  const handleRatingChange = (value) => {
    setFeedback({ ...feedback, rating: value });
  };

  const submitFeedback = () => {
    notification.success({ message: 'Feedback Submitted!', description: `Comment: ${feedback.comment}, Rating: ${feedback.rating}` });
    setFeedbackVisible(false);
    setFeedback({ comment: '', rating: 0 });
  };

  const toggleDataSet = () => {
    setSelectedData([!selectedData[0]]);
  };

  const setGoalHandler = () => {
    setGoalProgress({ ...goalProgress, description: goal.description, target: goal.target });
    setGoal({ description: '', target: 0 });
    notification.success({ message: 'Goal Set!', description: `Goal: ${goal.description}, Target: ${goal.target}` });
  };

  const getOption = () => ({
    title: { text: 'Productivity Trends' },
    tooltip: { trigger: 'axis' },
    xAxis: {
      type: 'category',
      data: dummyProductivityData.map(item => item.date),
    },
    yAxis: {
      type: 'value',
    },
    series: [
      {
        name: 'Productivity',
        type: 'line',
        data: dummyProductivityData.map(item => item.value),
        itemStyle: { color: selectedData[0] ? '#5470C6' : '#FF0000' },
      },
    ],
  });

  const exportData = () => {
    const csvData = [{ Metric: 'Completed Tasks', Value: 75 }];
    const json2csvParser = new Parser();
    const csv = json2csvParser.parse(csvData);
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    saveAs(blob, 'kpi_data.csv');
  };

  return (
    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', height: '100vh', padding: '20px', backgroundColor: '#eaeaea' }}>
      <h1>Performance Dashboard</h1>
      <div style={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'space-between', width: '100%' }}>
        <div style={{ padding: '20px', backgroundColor: '#f7f7f7', borderRadius: '8px', margin: '10px', flex: '1 0 48%' }}>
          <h2>Performance Metrics</h2>
          <Button onClick={() => setFeedbackVisible(true)}>Give Feedback</Button>
          <Button onClick={toggleDataSet}>Toggle Data Set</Button>
          <div>
            <Input placeholder="Goal Description" onChange={(e) => setGoal({ ...goal, description: e.target.value })} />
            <Input placeholder="Goal Target" type="number" onChange={(e) => setGoal({ ...goal, target: parseInt(e.target.value) })} />
            <Button onClick={setGoalHandler}>Set Goal</Button>
          </div>
          <PerformanceTrendGraph performanceMetrics={performanceData} />
          <Button onClick={exportData}>Export Data</Button>
        </div>
      </div>
      <Modal
        title="User Feedback"
        visible={feedbackVisible}
        onOk={submitFeedback}
        onCancel={() => setFeedbackVisible(false)}
      >
        <Input placeholder="Your feedback..." name="comment" onChange={handleFeedbackChange} />
        <Rate onChange={handleRatingChange} />
      </Modal>
    </div>
  );
};

// PerformanceTrendGraph component to visualize performance metrics
const PerformanceTrendGraph = ({ performanceMetrics }) => {
  const option = {
    xAxis: {
      type: 'category',
      data: performanceMetrics.map(metric => metric.date),
    },
    yAxis: {
      type: 'value',
    },
    series: [{
      name: 'Productivity',
      type: 'line',
      data: performanceMetrics.map(metric => metric.value),
    }],
  };

  return <ReactECharts option={option} style={{ height: '300px', width: '100%' }} />;
};

// Export the main component
export default PerformanceDashboard;
```

### Explanation of the Code

1. **PerformanceDashboard Component**: 
   - Serves as the main component that aggregates performance data and includes interactive elements such as charts and feedback forms.
   - Uses state management with `useState` to manage feedback visibility, feedback details, goals, points, and the selected dataset.

2. **PerformanceTrendGraph Component**: 
   - Receives performance metrics as props and visualizes them using the ECharts library.
   - Configures the chart options dynamically based on the provided data.

3. **Data Handling**: 
   - Dummy data is used for productivity metrics and goals.
   - The dashboard includes functionality to export data to a CSV file.

4. **Feedback Mechanism**: 
   - Users can provide feedback through a modal, and feedback details are stored in the state.
   - Displays success notifications upon submission of feedback.

5. **Styling and Layout**: 
   - The layout is designed to fill the entire viewport with no white space using flexbox for responsive behavior.
   - Inline styles ensure the dashboard remains visually structured.

6. **Error-Free and Self-Contained**: 
   - The entire implementation is contained within a single file, ensuring there are no external dependencies or imports of other components.
   - It is fully functional and meets the specified requirements without any errors.

This complete code fulfills all the requirements outlined in the plan with a focus on functionality and user interaction.

    ```
  </CodeIntegration>
</UIEnhancementPrompt>

---

**Important**: The UI must be significantly **enhanced and visually polished**—the goal is to create a **high-end, professional look** for **desktop users (1920x1080 resolution)**. The entire layout should feel **modern, sleek, and highly interactive**. **No mobile or responsive layouts are allowed**.

---

**Important**: Every feature and component of the UI must be **visually stunning** and fully optimized for a **desktop-first experience**. The final result must look **modern, cutting-edge, and highly professional** for **1920x1080 resolution**. No outdated or poorly designed elements are allowed. Ensure the layout, functionality, and animations reflect a **high-end desktop UI**.


