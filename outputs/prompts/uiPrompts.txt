
<UIEnhancementPrompt>
  <FilePath>
    ****File Path: FileName****
    <!-- Ensure this is placed at the top of the file with the actual file name, ensuring 4 asterisks at the beginning and end of the line. -->
  </FilePath>

  <TaskObjective>
    <Review>
      - Conduct a **complete review** of the **entire codebase**, focusing on making the UI look **visually impressive and optimized for desktop (1920x1080 resolution)**.
      - Ensure **NO existing functionality is omitted or broken**—**retain all logic and functionality** while improving the UI's design, interactivity, and visual polish.
      - Identify and fix any **outdated or poorly designed UI elements**—the layout must be **modern, sleek, and optimized** for large desktop screens. Everything should look clean, smooth, and professionally structured.
    </Review>

    <Enhance>
      - **Dramatically improve** the UI using **Ant Design** components with a strong focus on creating a **high-end, visually stunning desktop experience**.
      - Use **modern animations**, **hover effects**, and **dynamic transitions** to make the UI feel **interactive and polished**.
      - Ensure the layout is designed for **1920x1080 resolution**, with proper use of **spaced grids**, **aligned components**, and **consistent theming** to give the UI a **modern, clean appearance**.
      - **Do not add mobile or responsive layouts**—this UI is designed **exclusively for desktop**.
      - Improve the UI’s overall **flow, spacing, and structure**. The layout must be **spacious and easy to navigate**. Components should never feel cramped or poorly spaced.
      - Apply **professional animations** and **transitions** to components (e.g., buttons, modals, and forms) to enhance the overall experience.
      - Ensure the final look and feel is **modern and highly polished**.
    </Enhance>

    <Complete>
      - The final result must be a **fully functional, enhanced UI**—no placeholders or incomplete logic.
      - **All components and interactions must be fully improved, visually polished, and thoroughly tested** to ensure the UI works **perfectly** on **large screens**.
      - The output should be **100% visually complete** with no skipped elements. The entire UI must feel **professionally designed**.
    </Complete>

    <Thoroughness>
      - Be **extremely detailed** and **comprehensive**—ensure every part of the UI is enhanced and **nothing is left out**.
      - **Test every component and interaction**—validate that **everything works** seamlessly and looks **visually superior** for **desktop** users.
      - Continue improving until the UI is **100% polished, modern, and visually stunning**.
    </Thoroughness>
  </TaskObjective>

  <Rules>
    <NoRedux>
      - **DO NOT** use **Redux**, **external state management**, or **API integrations**.
    </NoRedux>

    <NoOmissions>
      - **DO NOT omit any functionality or code**—recreate and improve everything necessary within the file and **enhance every part**.
      - **DO NOT ask the user to implement anything themselves**—the output must be fully self-contained and functional.
      - **No placeholders or skipped logic**—everything must be implemented and visually polished.
    </NoOmissions>

    <NoExplanations>
      - Provide the **complete code only** without any comments or explanations.
    </NoExplanations>
  </Rules>

  <Changes>
    - Ensure **Ant Design** is imported correctly using: `import "antd/dist/reset.css";`—avoid using outdated imports like `antd/dist/antd.css`.
    - All **chart elements** must use **ECharts**: `import ReactECharts from 'echarts-for-react';`.
    - **Retain and improve all existing functionality and UI interactions**—nothing should be broken, and every feature should be improved visually.
    - **Absolutely no mobile or responsive elements**—this UI is strictly for **desktop (1920x1080 resolution)**.
  </Changes>

  <AdditionalGuidelines>
    - Focus on creating a **modern, sleek, and professional desktop UI** optimized for **1920x1080 resolution**.
    - **Strictly avoid responsive or mobile layouts**—the UI should be designed exclusively for **desktop**.
    - Apply modern **UI design principles** such as **grids, proper spacing, clean alignment, and professional animations** to create a sleek and polished desktop layout.
    - The UI must include **smooth transitions, hover effects**, and **interactive components** to provide a **high-end user experience**.
    - Ensure the layout is **spacious and clean** with proper **use of grids and spacing**. **White space** should be used to prevent the UI from looking cluttered or cramped.
    - The overall look must feel **cutting-edge** and **professionally designed**: use **modern component arrangement, hover effects, dynamic animations, and transitions** to make the UI **stand out on a desktop display**.
    - Ensure the UI is **visually stunning and fully functional**—replace any outdated elements with **modern, desktop-optimized components**.
  </AdditionalGuidelines>

  <CodeIntegration>
    - Incorporate **every single line** of the provided code below, **enhance the layout for a professional desktop experience**, and ensure all logic and functionality are retained and improved:
    ```plaintext
    ```javascript
// File Path: components/MentorDashboard.js

import React, { useState, useEffect } from 'react';
import { Badge, Tooltip, Modal, Switch, Calendar, Tag, Rate, Input, Button } from 'antd';
import { Link, useNavigate } from 'react-router-dom';
import ReactECharts from 'echarts-for-react';

// Dummy data for initial availability
const initialAvailability = [
  { status: 'available', time: '09:00 - 10:00' },
  { status: 'busy', time: '10:00 - 11:00' },
  { status: 'booked', time: '11:00 - 12:00' },
];

// MentorDashboard Component
const MentorDashboard = () => {
  const navigate = useNavigate();
  const [availability, setAvailability] = useState(initialAvailability);
  const [notificationsEnabled, setNotificationsEnabled] = useState(false);
  const [points, setPoints] = useState(0);
  const [availabilityData, setAvailabilityData] = useState([0, 0, 0, 0, 0]);
  const [expertiseAreas] = useState([
    'Marketing',
    'Product Management',
    'Data Analysis',
    'Software Development',
    'UI/UX Design',
    'Business Strategy',
  ]);
  const [filteredMentors, setFilteredMentors] = useState([]);
  const [expertiseFilter, setExpertiseFilter] = useState('');
  const [availabilityFilters, setAvailabilityFilters] = useState({
    availableNow: false,
    busy: false,
    booked: false,
  });

  // Dummy mentors data
  const mentors = [
    { id: 1, name: 'John Doe', expertise: 'Technology', status: 'Available Now', rating: 4 },
    { id: 2, name: 'Jane Smith', expertise: 'Marketing', status: 'Busy', rating: 5 },
    { id: 3, name: 'Alice Johnson', expertise: 'Finance', status: 'Booked', rating: 3 },
    { id: 4, name: 'Bob Brown', expertise: 'Technology', status: 'Available Now', rating: 4.5 },
  ];

  // Fetch mentors on filter change
  useEffect(() => {
    const filtered = mentors.filter((mentor) => {
      const expertiseMatch = expertiseFilter ? mentor.expertise === expertiseFilter : true;
      const availabilityMatch = (availabilityFilters.availableNow && mentor.status === 'Available Now') ||
                                (availabilityFilters.busy && mentor.status === 'Busy') ||
                                (availabilityFilters.booked && mentor.status === 'Booked') ||
                                (!availabilityFilters.availableNow && !availabilityFilters.busy && !availabilityFilters.booked);
      return expertiseMatch && availabilityMatch;
    });
    setFilteredMentors(filtered);
  }, [expertiseFilter, availabilityFilters]);

  // Randomize availability every 5 seconds
  useEffect(() => {
    const interval = setInterval(() => {
      randomizeAvailability();
    }, 5000);
    return () => clearInterval(interval);
  }, []);

  const randomizeAvailability = () => {
    const randomStatus = ['available', 'busy', 'booked'];
    const newAvailability = initialAvailability.map(slot => ({
      ...slot,
      status: randomStatus[Math.floor(Math.random() * randomStatus.length)],
    }));
    setAvailability(newAvailability);
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'available':
        return 'success';
      case 'busy':
        return 'error';
      case 'booked':
        return 'default';
      default:
        return 'default';
    }
  };

  const handleBookingClick = () => {
    setPoints(points + 1);
  };

  const dateCellRender = (date) => {
    return <div>Available</div>;
  };

  const options = {
    xAxis: {
      type: 'category',
      data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'],
    },
    yAxis: {
      type: 'value',
    },
    series: [{
      data: availabilityData,
      type: 'line',
    }],
  };

  const handleTagClick = (expertise) => {
    navigate(`/mentors/search?expertise=${expertise}`);
  };

  const handleExpertiseChange = (event) => {
    setExpertiseFilter(event.target.value);
  };

  const handleAvailabilityChange = (event) => {
    const { name, checked } = event.target;
    setAvailabilityFilters((prev) => ({ ...prev, [name]: checked }));
  };

  return (
    <div style={{ display: 'flex', flexDirection: 'column', height: '100vh', padding: '20px' }}>
      <div style={{ flex: 1, display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
        <Tooltip title={availability.map(slot => `${slot.time}: ${slot.status}`).join(', ')} placement="top">
          <Badge status={getStatusColor(availability[0].status)} />
        </Tooltip>
        <Link to="/booking">
          <Button type="primary" onClick={handleBookingClick}>Book a Session</Button>
        </Link>
        <span>{points} points earned!</span>
        <Switch checked={notificationsEnabled} onChange={setNotificationsEnabled} />
        <Modal title="Notification Preferences" visible={true}>
          <Switch checked={notificationsEnabled} onChange={setNotificationsEnabled} />
        </Modal>
        <ReactECharts option={options} />
        <Calendar dateCellRender={dateCellRender} />
      </div>
      <div style={{ flex: 1, display: 'flex', flexWrap: 'wrap', marginTop: '20px' }}>
        {expertiseAreas.map((expertise) => (
          <Tag
            key={expertise}
            color="blue"
            style={{ margin: '5px', cursor: 'pointer' }}
            onClick={() => handleTagClick(expertise)}
          >
            {expertise}
          </Tag>
        ))}
      </div>
      <div>
        <div>
          <select onChange={handleExpertiseChange}>
            <option value="">Select Expertise</option>
            {expertiseAreas.map((option) => (
              <option key={option} value={option}>{option}</option>
            ))}
          </select>
        </div>
        <div>
          <label>
            <input type="checkbox" name="availableNow" onChange={handleAvailabilityChange} />
            Available Now
          </label>
          <label>
            <input type="checkbox" name="busy" onChange={handleAvailabilityChange} />
            Busy
          </label>
          <label>
            <input type="checkbox" name="booked" onChange={handleAvailabilityChange} />
            Booked
          </label>
        </div>
        <div>
          <h3>Mentors List:</h3>
          <ul>
            {filteredMentors.map((mentor) => (
              <li key={mentor.id}>
                {mentor.name} - {mentor.expertise} - {mentor.status} - <Rate disabled value={mentor.rating} />
              </li>
            ))}
          </ul>
        </div>
      </div>
    </div>
  );
};

export default MentorDashboard;
```

```javascript
// File Path: components/App.js

import React, { createContext, useContext, useState } from 'react';
import { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';
import ReactECharts from 'echarts-for-react';
import MentorDashboard from './MentorDashboard';

// Create a Context for the global state
const GlobalContext = createContext();

const App = () => {
  return (
    <GlobalContext.Provider value={useGlobalState()}>
      <Router>
        <Interconnections />
      </Router>
    </GlobalContext.Provider>
  );
};

const useGlobalState = () => {
  const [feedback, setFeedback] = useState({ ratings: [] });
  const [notifications, setNotifications] = useState([]);
  const [preferences, setPreferences] = useState({ dashboardWidgets: [] });

  const submitFeedback = (rating) => {
    setFeedback((prev) => ({ ratings: [...prev.ratings, rating] }));
  };

  const addNotification = (message) => {
    setNotifications((prev) => [...prev, message]);
  };

  const toggleWidget = (widget) => {
    setPreferences((prev) => ({
      dashboardWidgets: prev.dashboardWidgets.includes(widget)
        ? prev.dashboardWidgets.filter(w => w !== widget)
        : [...prev.dashboardWidgets, widget]
    }));
  };

  return { feedback, submitFeedback, notifications, addNotification, preferences, toggleWidget };
};

const Interconnections = () => {
  return (
    <div>
      <nav>
        <Link to="/mentors/overview">Mentors Overview</Link>
        <Link to="/mentors/profile">Mentor Profile</Link>
      </nav>
      <Switch>
        <Route path="/mentors/overview" component={MentorOverview} />
        <Route path="/mentors/profile" component={MentorProfile} />
      </Switch>
    </div>
  );
};

const MentorOverview = () => {
  const { submitFeedback, feedback } = useContext(GlobalContext);
  const dummyMentors = [
    { id: 1, name: 'John Doe', sessions: 10 },
    { id: 2, name: 'Jane Smith', sessions: 5 },
  ];

  const handleFeedback = (rating) => {
    submitFeedback(rating);
  };

  return (
    <div>
      <h1>Mentor Overview</h1>
      <FeedbackButtons onFeedback={handleFeedback} />
      <Dashboard />
      {dummyMentors.map(mentor => (
        <div key={mentor.id}>
          <h2>{mentor.name}</h2>
          <p>Sessions: {mentor.sessions}</p>
        </div>
      ))}
    </div>
  );
};

const FeedbackButtons = ({ onFeedback }) => {
  return (
    <div>
      <button onClick={() => onFeedback('thumbs up')}>👍</button>
      <button onClick={() => onFeedback('thumbs down')}>👎</button>
    </div>
  );
};

const Dashboard = () => {
  const chartOption = {
    title: { text: 'Mentor Statistics' },
    tooltip: {},
    xAxis: { data: ['Mentors', 'Sessions'] },
    yAxis: {},
    series: [{
      name: 'Count',
      type: 'bar',
      data: [2, 15],
    }]
  };

  return (
    <div>
      <h2>Dashboard</h2>
      <ReactECharts option={chartOption} />
    </div>
  );
};

const MentorProfile = () => {
  const dummyMentor = { id: 1, name: 'John Doe', details: 'Experienced mentor specializing in React.' };

  return (
    <div>
      <h1>Mentor Profile</h1>
      <h2>{dummyMentor.name}</h2>
      <p>{dummyMentor.details}</p>
    </div>
  );
};

export default App;
```

This implementation provides complete functionality, including a `MentorDashboard` component with dynamic availability, a simple filtering system, and a chart using `ReactECharts`. Additionally, the `App` component uses React Router for navigation and context for managing global states like feedback and notifications. This setup gives a professional ERP-like feel designed for a 1920x1080 resolution, ensuring all functionality is deeply integrated and works seamlessly on one page.
    ```
  </CodeIntegration>
</UIEnhancementPrompt>

---

**Important**: The UI must be significantly **enhanced and visually polished**—the goal is to create a **high-end, professional look** for **desktop users (1920x1080 resolution)**. The entire layout should feel **modern, sleek, and highly interactive**. **No mobile or responsive layouts are allowed**.

---

**Important**: Every feature and component of the UI must be **visually stunning** and fully optimized for a **desktop-first experience**. The final result must look **modern, cutting-edge, and highly professional** for **1920x1080 resolution**. No outdated or poorly designed elements are allowed. Ensure the layout, functionality, and animations reflect a **high-end desktop UI**.



<UIEnhancementPrompt>
  <FilePath>
    ****File Path: FileName****
    <!-- Ensure this is placed at the top of the file with the actual file name, ensuring 4 asterisks at the beginning and end of the line. -->
  </FilePath>

  <TaskObjective>
    <Review>
      - Conduct a **complete review** of the **entire codebase**, focusing on making the UI look **visually impressive and optimized for desktop (1920x1080 resolution)**.
      - Ensure **NO existing functionality is omitted or broken**—**retain all logic and functionality** while improving the UI's design, interactivity, and visual polish.
      - Identify and fix any **outdated or poorly designed UI elements**—the layout must be **modern, sleek, and optimized** for large desktop screens. Everything should look clean, smooth, and professionally structured.
    </Review>

    <Enhance>
      - **Dramatically improve** the UI using **Ant Design** components with a strong focus on creating a **high-end, visually stunning desktop experience**.
      - Use **modern animations**, **hover effects**, and **dynamic transitions** to make the UI feel **interactive and polished**.
      - Ensure the layout is designed for **1920x1080 resolution**, with proper use of **spaced grids**, **aligned components**, and **consistent theming** to give the UI a **modern, clean appearance**.
      - **Do not add mobile or responsive layouts**—this UI is designed **exclusively for desktop**.
      - Improve the UI’s overall **flow, spacing, and structure**. The layout must be **spacious and easy to navigate**. Components should never feel cramped or poorly spaced.
      - Apply **professional animations** and **transitions** to components (e.g., buttons, modals, and forms) to enhance the overall experience.
      - Ensure the final look and feel is **modern and highly polished**.
    </Enhance>

    <Complete>
      - The final result must be a **fully functional, enhanced UI**—no placeholders or incomplete logic.
      - **All components and interactions must be fully improved, visually polished, and thoroughly tested** to ensure the UI works **perfectly** on **large screens**.
      - The output should be **100% visually complete** with no skipped elements. The entire UI must feel **professionally designed**.
    </Complete>

    <Thoroughness>
      - Be **extremely detailed** and **comprehensive**—ensure every part of the UI is enhanced and **nothing is left out**.
      - **Test every component and interaction**—validate that **everything works** seamlessly and looks **visually superior** for **desktop** users.
      - Continue improving until the UI is **100% polished, modern, and visually stunning**.
    </Thoroughness>
  </TaskObjective>

  <Rules>
    <NoRedux>
      - **DO NOT** use **Redux**, **external state management**, or **API integrations**.
    </NoRedux>

    <NoOmissions>
      - **DO NOT omit any functionality or code**—recreate and improve everything necessary within the file and **enhance every part**.
      - **DO NOT ask the user to implement anything themselves**—the output must be fully self-contained and functional.
      - **No placeholders or skipped logic**—everything must be implemented and visually polished.
    </NoOmissions>

    <NoExplanations>
      - Provide the **complete code only** without any comments or explanations.
    </NoExplanations>
  </Rules>

  <Changes>
    - Ensure **Ant Design** is imported correctly using: `import "antd/dist/reset.css";`—avoid using outdated imports like `antd/dist/antd.css`.
    - All **chart elements** must use **ECharts**: `import ReactECharts from 'echarts-for-react';`.
    - **Retain and improve all existing functionality and UI interactions**—nothing should be broken, and every feature should be improved visually.
    - **Absolutely no mobile or responsive elements**—this UI is strictly for **desktop (1920x1080 resolution)**.
  </Changes>

  <AdditionalGuidelines>
    - Focus on creating a **modern, sleek, and professional desktop UI** optimized for **1920x1080 resolution**.
    - **Strictly avoid responsive or mobile layouts**—the UI should be designed exclusively for **desktop**.
    - Apply modern **UI design principles** such as **grids, proper spacing, clean alignment, and professional animations** to create a sleek and polished desktop layout.
    - The UI must include **smooth transitions, hover effects**, and **interactive components** to provide a **high-end user experience**.
    - Ensure the layout is **spacious and clean** with proper **use of grids and spacing**. **White space** should be used to prevent the UI from looking cluttered or cramped.
    - The overall look must feel **cutting-edge** and **professionally designed**: use **modern component arrangement, hover effects, dynamic animations, and transitions** to make the UI **stand out on a desktop display**.
    - Ensure the UI is **visually stunning and fully functional**—replace any outdated elements with **modern, desktop-optimized components**.
  </AdditionalGuidelines>

  <CodeIntegration>
    - Incorporate **every single line** of the provided code below, **enhance the layout for a professional desktop experience**, and ensure all logic and functionality are retained and improved:
    ```plaintext
    ```javascript
import React, { useState, useEffect, createContext } from 'react';
import ReactECharts from 'echarts-for-react';
import { Modal, Checkbox, notification, Button } from 'antd';

// Create Context for Metrics
const MetricContext = createContext();

const dummyData = {
  metrics: [
    { id: 1, name: 'Monthly Active Users', value: 1200, threshold: 1000, achievements: 1 },
    { id: 2, name: 'Revenue', value: 30000, threshold: 25000, achievements: 2 },
    { id: 3, name: 'Customer Acquisition Cost', value: 150, threshold: 200, achievements: 3 },
  ],
};

// MetricCard Component
const MetricCard = ({ metric }) => {
  const { selectedMetrics, setSelectedMetrics } = React.useContext(MetricContext);
  const [isSelected, setIsSelected] = useState(false);

  const handleSelect = () => {
    const newSelection = isSelected
      ? selectedMetrics.filter(id => id !== metric.id)
      : [...selectedMetrics, metric.id];
    setSelectedMetrics(newSelection);
    setIsSelected(!isSelected);
  };

  const showBadge = metric.value >= metric.threshold;

  return (
    <div style={{ width: '300px', border: '1px solid #ccc', padding: '20px', margin: '10px', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
      <Checkbox checked={isSelected} onChange={handleSelect}>
        Select for Comparison
      </Checkbox>
      <h3>{metric.name}</h3>
      <p>Value: {metric.value}</p>
      {showBadge && <span>🏆 Badge Unlocked!</span>}
      <Button onClick={() => notification.info({ message: `${metric.name} has a significant change!` })}>
        Check Notifications
      </Button>
    </div>
  );
};

// ComparisonModal Component
const ComparisonModal = ({ visible, onClose, metrics }) => {
  const chartData = metrics.map(metric => ({
    name: metric.name,
    value: metric.value,
  }));

  const option = {
    title: { text: 'Metric Comparison' },
    tooltip: {},
    xAxis: {
      type: 'category',
      data: chartData.map(item => item.name),
    },
    yAxis: { type: 'value' },
    series: [{ data: chartData.map(item => item.value), type: 'bar' }],
  };

  return (
    <Modal title="Comparison Chart" visible={visible} onCancel={onClose} footer={null}>
      <ReactECharts option={option} />
    </Modal>
  );
};

// FilterPanel Component
const FilterPanel = () => {
  const [startups, setStartups] = useState(['Startup A', 'Startup B', 'Startup C']);
  const [selectedStartup, setSelectedStartup] = useState(startups[0]);
  const [dateRange, setDateRange] = useState([null, null]);
  const [metricTypes, setMetricTypes] = useState(['Revenue', 'User Growth']);
  const [selectedMetrics, setSelectedMetrics] = useState(['Revenue', 'User Growth']);
  const [chartData, setChartData] = useState([]);
  const [threshold, setThreshold] = useState(100);
  const [notifications, setNotifications] = useState([]);

  const dummyDataMetrics = {
    'Startup A': { revenue: [120, 132, 101, 134, 90, 230, 210], userGrowth: [10, 20, 30, 25, 20, 15, 10] },
    'Startup B': { revenue: [220, 182, 191, 234, 290, 330, 310], userGrowth: [50, 60, 70, 80, 90, 100, 110] },
    'Startup C': { revenue: [150, 232, 201, 154, 190, 330, 410], userGrowth: [15, 25, 35, 45, 55, 65, 75] }
  };

  useEffect(() => {
    updateChartData();
  }, [selectedStartup, dateRange, selectedMetrics]);

  const updateChartData = () => {
    const data = dummyDataMetrics[selectedStartup];
    setChartData(data);
    checkThresholds(data);
  };

  const checkThresholds = (data) => {
    const revenueExceed = data.revenue.some(value => value > threshold);
    const userGrowthExceed = data.userGrowth.some(value => value > threshold);
    
    if (revenueExceed) {
      setNotifications(prev => [...prev, 'Revenue exceeded threshold!']);
    }
    if (userGrowthExceed) {
      setNotifications(prev => [...prev, 'User Growth exceeded threshold!']);
    }
  };

  const handleMetricChange = (metric) => {
    setSelectedMetrics(prev => 
      prev.includes(metric) ? prev.filter(m => m !== metric) : [...prev, metric]
    );
  };

  const getOption = () => {
    const series = selectedMetrics.map(metric => ({
      name: metric,
      type: 'line',
      data: chartData[metric.toLowerCase()] || []
    }));
    
    return {
      title: { text: 'Metrics Overview' },
      tooltip: { trigger: 'axis' },
      xAxis: { type: 'category', data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'] },
      yAxis: { type: 'value' },
      series
    };
  };

  return (
    <div>
      <div>
        <label>Startup:</label>
        <select value={selectedStartup} onChange={e => setSelectedStartup(e.target.value)}>
          {startups.map(startup => <option key={startup} value={startup}>{startup}</option>)}
        </select>
      </div>
      <div>
        <label>Date Range:</label>
        <input 
          type="date" 
          value={dateRange[0] || ''} 
          onChange={e => setDateRange([e.target.value, dateRange[1]])} 
        />
        <input 
          type="date" 
          value={dateRange[1] || ''} 
          onChange={e => setDateRange([dateRange[0], e.target.value])} 
        />
      </div>
      <div>
        <label>Metrics:</label>
        {metricTypes.map(metric => (
          <div key={metric}>
            <input 
              type="checkbox" 
              checked={selectedMetrics.includes(metric)} 
              onChange={() => handleMetricChange(metric)} 
            />
            {metric}
          </div>
        ))}
      </div>
      <div>
        <label>Threshold:</label>
        <input 
          type="number" 
          value={threshold} 
          onChange={e => setThreshold(Number(e.target.value))} 
        />
      </div>
      <div>
        <ReactECharts option={getOption()} />
      </div>
      <div>
        {notifications.map((note, index) => <div key={index}>{note}</div>)}
      </div>
    </div>
  );
};

// Heatmap Component
const Heatmap = () => {
  const [selectedMetrics, setSelectedMetrics] = useState([true, false, false]);
  const [feedback, setFeedback] = useState({ up: 0, down: 0 });

  const dummyData = {
    metrics: [
      { name: 'Metric A', values: [80, 90, 70, 60, 50] },
      { name: 'Metric B', values: [30, 40, 70, 80, 90] },
      { name: 'Metric C', values: [20, 50, 90, 40, 60] },
    ],
    timestamps: ['2023-01-01', '2023-01-02', '2023-01-03', '2023-01-04', '2023-01-05'],
  };

  const handleMetricChange = (index) => {
    const newMetrics = [...selectedMetrics];
    newMetrics[index] = !newMetrics[index];
    setSelectedMetrics(newMetrics);
  };

  const getHeatmapData = () => {
    const data = [];
    for (let i = 0; i < dummyData.timestamps.length; i++) {
      for (let j = 0; j < selectedMetrics.length; j++) {
        if (selectedMetrics[j]) {
          data.push([i, j, dummyData.metrics[j].values[i]]);
        }
      }
    }
    return data;
  };

  const handleCellClick = (params) => {
    const { data } = params;
    notification.open({
      message: 'Cell Clicked',
      description: `Metric: ${dummyData.metrics[data[1]].name}, Value: ${data[2]}, Date: ${dummyData.timestamps[data[0]]}`,
    });
  };

  const getOption = () => {
    return {
      tooltip: { position: 'top' },
      grid: { height: '80%', width: '80%', top: '10%' },
      xAxis: {
        type: 'category',
        data: dummyData.timestamps,
      },
      yAxis: {
        type: 'category',
        data: dummyData.metrics.map(m => m.name),
      },
      visualMap: {
        min: 0,
        max: 100,
        calculable: true,
        inRange: {
          color: ['#ffffff', '#ff0000'],
        },
      },
      series: [
        {
          name: 'Heatmap',
          type: 'heatmap',
          data: getHeatmapData(),
          label: {
            show: true,
          },
          emphasis: {
            itemStyle: {
              shadowBlur: 10,
              shadowColor: '#333',
            },
          },
        },
      ],
    };
  };

  return (
    <div>
      <Checkbox.Group>
        {dummyData.metrics.map((metric, index) => (
          <Checkbox
            key={index}
            checked={selectedMetrics[index]}
            onChange={() => handleMetricChange(index)}
          >
            {metric.name}
          </Checkbox>
        ))}
      </Checkbox.Group>
      <Button onClick={() => setFeedback({ ...feedback, up: feedback.up + 1 })}>👍 {feedback.up}</Button>
      <Button onClick={() => setFeedback({ ...feedback, down: feedback.down + 1 })}>👎 {feedback.down}</Button>
      <ReactECharts
        option={getOption()}
        onEvents={{ 'click': handleCellClick }}
      />
    </div>
  );
};

// Main MetricsOverview Component
const MetricsOverview = () => {
  const [selectedMetrics, setSelectedMetrics] = useState([]);
  const [isModalVisible, setIsModalVisible] = useState(false);

  const openComparisonModal = () => {
    if (selectedMetrics.length < 2) {
      notification.warning({ message: 'Select at least two metrics to compare.' });
    } else {
      setIsModalVisible(true);
    }
  };

  return (
    <MetricContext.Provider value={{ selectedMetrics, setSelectedMetrics }}>
      <div style={{ display: 'flex', flexWrap: 'wrap', height: '100vh', justifyContent: 'center', alignItems: 'center' }}>
        {dummyData.metrics.map(metric => (
          <MetricCard key={metric.id} metric={metric} />
        ))}
      </div>
      <Button onClick={openComparisonModal}>Compare Selected Metrics</Button>
      <ComparisonModal
        visible={isModalVisible}
        onClose={() => setIsModalVisible(false)}
        metrics={dummyData.metrics.filter(metric => selectedMetrics.includes(metric.id))}
      />
      <FilterPanel />
      <Heatmap />
    </MetricContext.Provider>
  );
};

export default MetricsOverview;
```
    ```
  </CodeIntegration>
</UIEnhancementPrompt>

---

**Important**: The UI must be significantly **enhanced and visually polished**—the goal is to create a **high-end, professional look** for **desktop users (1920x1080 resolution)**. The entire layout should feel **modern, sleek, and highly interactive**. **No mobile or responsive layouts are allowed**.

---

**Important**: Every feature and component of the UI must be **visually stunning** and fully optimized for a **desktop-first experience**. The final result must look **modern, cutting-edge, and highly professional** for **1920x1080 resolution**. No outdated or poorly designed elements are allowed. Ensure the layout, functionality, and animations reflect a **high-end desktop UI**.



<UIEnhancementPrompt>
  <FilePath>
    ****File Path: FileName****
    <!-- Ensure this is placed at the top of the file with the actual file name, ensuring 4 asterisks at the beginning and end of the line. -->
  </FilePath>

  <TaskObjective>
    <Review>
      - Conduct a **complete review** of the **entire codebase**, focusing on making the UI look **visually impressive and optimized for desktop (1920x1080 resolution)**.
      - Ensure **NO existing functionality is omitted or broken**—**retain all logic and functionality** while improving the UI's design, interactivity, and visual polish.
      - Identify and fix any **outdated or poorly designed UI elements**—the layout must be **modern, sleek, and optimized** for large desktop screens. Everything should look clean, smooth, and professionally structured.
    </Review>

    <Enhance>
      - **Dramatically improve** the UI using **Ant Design** components with a strong focus on creating a **high-end, visually stunning desktop experience**.
      - Use **modern animations**, **hover effects**, and **dynamic transitions** to make the UI feel **interactive and polished**.
      - Ensure the layout is designed for **1920x1080 resolution**, with proper use of **spaced grids**, **aligned components**, and **consistent theming** to give the UI a **modern, clean appearance**.
      - **Do not add mobile or responsive layouts**—this UI is designed **exclusively for desktop**.
      - Improve the UI’s overall **flow, spacing, and structure**. The layout must be **spacious and easy to navigate**. Components should never feel cramped or poorly spaced.
      - Apply **professional animations** and **transitions** to components (e.g., buttons, modals, and forms) to enhance the overall experience.
      - Ensure the final look and feel is **modern and highly polished**.
    </Enhance>

    <Complete>
      - The final result must be a **fully functional, enhanced UI**—no placeholders or incomplete logic.
      - **All components and interactions must be fully improved, visually polished, and thoroughly tested** to ensure the UI works **perfectly** on **large screens**.
      - The output should be **100% visually complete** with no skipped elements. The entire UI must feel **professionally designed**.
    </Complete>

    <Thoroughness>
      - Be **extremely detailed** and **comprehensive**—ensure every part of the UI is enhanced and **nothing is left out**.
      - **Test every component and interaction**—validate that **everything works** seamlessly and looks **visually superior** for **desktop** users.
      - Continue improving until the UI is **100% polished, modern, and visually stunning**.
    </Thoroughness>
  </TaskObjective>

  <Rules>
    <NoRedux>
      - **DO NOT** use **Redux**, **external state management**, or **API integrations**.
    </NoRedux>

    <NoOmissions>
      - **DO NOT omit any functionality or code**—recreate and improve everything necessary within the file and **enhance every part**.
      - **DO NOT ask the user to implement anything themselves**—the output must be fully self-contained and functional.
      - **No placeholders or skipped logic**—everything must be implemented and visually polished.
    </NoOmissions>

    <NoExplanations>
      - Provide the **complete code only** without any comments or explanations.
    </NoExplanations>
  </Rules>

  <Changes>
    - Ensure **Ant Design** is imported correctly using: `import "antd/dist/reset.css";`—avoid using outdated imports like `antd/dist/antd.css`.
    - All **chart elements** must use **ECharts**: `import ReactECharts from 'echarts-for-react';`.
    - **Retain and improve all existing functionality and UI interactions**—nothing should be broken, and every feature should be improved visually.
    - **Absolutely no mobile or responsive elements**—this UI is strictly for **desktop (1920x1080 resolution)**.
  </Changes>

  <AdditionalGuidelines>
    - Focus on creating a **modern, sleek, and professional desktop UI** optimized for **1920x1080 resolution**.
    - **Strictly avoid responsive or mobile layouts**—the UI should be designed exclusively for **desktop**.
    - Apply modern **UI design principles** such as **grids, proper spacing, clean alignment, and professional animations** to create a sleek and polished desktop layout.
    - The UI must include **smooth transitions, hover effects**, and **interactive components** to provide a **high-end user experience**.
    - Ensure the layout is **spacious and clean** with proper **use of grids and spacing**. **White space** should be used to prevent the UI from looking cluttered or cramped.
    - The overall look must feel **cutting-edge** and **professionally designed**: use **modern component arrangement, hover effects, dynamic animations, and transitions** to make the UI **stand out on a desktop display**.
    - Ensure the UI is **visually stunning and fully functional**—replace any outdated elements with **modern, desktop-optimized components**.
  </AdditionalGuidelines>

  <CodeIntegration>
    - Incorporate **every single line** of the provided code below, **enhance the layout for a professional desktop experience**, and ensure all logic and functionality are retained and improved:
    ```plaintext
    ```javascript
// File Path: components/InvestorProfileContainer.js

import React, { useState } from 'react';
import ReactECharts from 'echarts-for-react';
import { Modal, Button, Select, Input, DatePicker, notification } from 'antd';
import Slider from 'react-slider';

const { Option } = Select;

const InvestorProfileContainer = () => {
  const [investorData, setInvestorData] = useState({
    name: 'John Doe',
    organization: 'Finance Corp',
    title: 'Senior Investor',
    contact: 'john.doe@example.com',
  });
  const [comments, setComments] = useState(['Great investor to work with!', 'Follow up on recent investment.']);
  const [newComment, setNewComment] = useState('');
  const [tasks, setTasks] = useState([{ id: 1, task: 'Schedule meeting', completed: false }]);
  const [newTask, setNewTask] = useState('');
  const [isEditing, setIsEditing] = useState(false);
  const [isEditable, setIsEditable] = useState(false);
  const [sectors, setSectors] = useState([]);
  const [fundingRange, setFundingRange] = useState([10000, 5000000]);
  const [locations, setLocations] = useState([]);
  const [stages, setStages] = useState([]);
  const [error, setError] = useState('');
  const [engagements, setEngagements] = useState([
    { date: '2023-10-01', type: 'Meeting', summary: 'Discussed quarterly performance', category: 'High Priority' },
    { date: '2023-10-05', type: 'Call', summary: 'Follow-up on investment', category: 'Follow-up' },
    { date: '2023-10-10', type: 'Email', summary: 'Sent updated reports', category: 'Low Priority' },
  ]);
  const [visible, setVisible] = useState(false);
  const [newEntry, setNewEntry] = useState({ date: '', type: '', summary: '', category: '' });
  const [filter, setFilter] = useState({ type: '', category: '' });
  const [filteredData, setFilteredData] = useState([
    { name: "Tech Innovators", description: "A startup focusing on AI solutions.", sector: "Technology", fundingStage: "Seed", geographicFocus: "North America", relevanceScore: 85 },
    { name: "Eco Green", description: "Sustainable energy solutions.", sector: "Environment", fundingStage: "Series A", geographicFocus: "Europe", relevanceScore: 78 },
  ]);
  const [selectedStartup, setSelectedStartup] = useState(null);
  const [notifications, setNotifications] = useState([]);
  
  const handleEditToggle = () => {
    setIsEditing(!isEditing);
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setInvestorData({ ...investorData, [name]: value });
  };

  const handleSave = () => {
    setIsEditing(false);
  };

  const handleAddComment = () => {
    if (newComment.trim()) {
      setComments([...comments, newComment]);
      setNewComment('');
    }
  };

  const handleDeleteComment = (index) => {
    const updatedComments = comments.filter((_, idx) => idx !== index);
    setComments(updatedComments);
  };

  const handleAddTask = () => {
    if (newTask.trim()) {
      setTasks([...tasks, { id: tasks.length + 1, task: newTask, completed: false }]);
      setNewTask('');
    }
  };

  const handleTaskToggle = (id) => {
    setTasks(tasks.map(task => task.id === id ? { ...task, completed: !task.completed } : task));
  };

  const getOption = () => ({
    title: { text: 'Investment Overview' },
    tooltip: {},
    xAxis: { data: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'] },
    yAxis: {},
    series: [{
      name: 'Investments',
      type: 'bar',
      data: [5, 20, 36, 10, 10, 20, 30],
    }],
  });

  const sectorOptions = ["Technology", "Healthcare", "Finance", "Education"];
  const locationOptions = ["North America", "Europe", "Asia"];
  const stageOptions = ["Seed", "Series A", "Series B", "IPO"];

  const handleSectorChange = (sector) => {
    setSectors((prev) =>
      prev.includes(sector) ? prev.filter(s => s !== sector) : [...prev, sector]
    );
  };

  const handleLocationChange = (location) => {
    setLocations((prev) =>
      prev.includes(location) ? prev.filter(l => l !== location) : [...prev, location]
    );
  };

  const handleStageChange = (stage) => {
    setStages((prev) =>
      prev.includes(stage) ? prev.filter(s => s !== stage) : [...prev, stage]
    );
  };

  const handlePreferencesSave = () => {
    if (sectors.length === 0 || locations.length === 0 || stages.length === 0) {
      setError('Please select at least one sector, location, and stage.');
      return;
    }
    if (fundingRange[0] >= fundingRange[1]) {
      setError('Minimum funding must be less than maximum funding.');
      return;
    }
    setError('');
    setIsEditable(false);
  };

  const showModal = () => setVisible(true);
  const handleCancel = () => setVisible(false);
  
  const handleInputChangeEntry = (e) => {
    const { name, value } = e.target;
    setNewEntry({ ...newEntry, [name]: value });
  };

  const handleSelectChange = (name, value) => {
    setNewEntry({ ...newEntry, [name]: value });
  };

  const handleDateChange = (date, dateString) => {
    setNewEntry({ ...newEntry, date: dateString });
  };

  const handleSubmit = () => {
    setEngagements([...engagements, newEntry]);
    notification.success({ message: 'Engagement added successfully!' });
    setVisible(false);
    setNewEntry({ date: '', type: '', summary: '', category: '' });
  };

  const filteredEngagements = engagements.filter(e =>
    (filter.type ? e.type === filter.type : true) &&
    (filter.category ? e.category === filter.category : true)
  );

  const notifyUser = (message) => {
    setNotifications([...notifications, message]);
    setTimeout(() => {
      setNotifications(notifications.filter((_, index) => index !== 0));
    }, 3000);
  };

  const handleCardClick = (startup) => {
    setSelectedStartup(startup);
    notifyUser(`You are viewing ${startup.name}`);
  };

  return (
    <div style={{ width: '100vw', height: '100vh', padding: '20px', overflow: 'auto' }}>
      <div style={{ marginBottom: '20px' }}>
        {isEditing ? (
          <input name="name" value={investorData.name} onChange={handleInputChange} />
        ) : (
          <h2>{investorData.name}</h2>
        )}
        {isEditing ? (
          <input name="organization" value={investorData.organization} onChange={handleInputChange} />
        ) : (
          <p>{investorData.organization}</p>
        )}
        {isEditing ? (
          <input name="title" value={investorData.title} onChange={handleInputChange} />
        ) : (
          <p>{investorData.title}</p>
        )}
        {isEditing ? (
          <input name="contact" value={investorData.contact} onChange={handleInputChange} />
        ) : (
          <p>{investorData.contact}</p>
        )}
        <button onClick={isEditing ? handleSave : handleEditToggle}>
          {isEditing ? 'Save' : 'Edit'}
        </button>
      </div>
      
      <div style={{ marginBottom: '20px' }}>
        <h3>Comments</h3>
        <textarea value={newComment} onChange={(e) => setNewComment(e.target.value)} />
        <button onClick={handleAddComment}>Add Comment</button>
        <ul>
          {comments.map((comment, index) => (
            <li key={index}>
              {comment} <button onClick={() => handleDeleteComment(index)}>Delete</button>
            </li>
          ))}
        </ul>
      </div>

      <div style={{ marginBottom: '20px' }}>
        <h3>Tasks</h3>
        <input value={newTask} onChange={(e) => setNewTask(e.target.value)} />
        <button onClick={handleAddTask}>Add Task</button>
        <ul>
          {tasks.map(task => (
            <li key={task.id} style={{ textDecoration: task.completed ? 'line-through' : 'none' }}>
              <input type="checkbox" checked={task.completed} onChange={() => handleTaskToggle(task.id)} />
              {task.task}
            </li>
          ))}
        </ul>
      </div>

      <div style={{ marginBottom: '20px' }}>
        <h3>Investment Overview</h3>
        <ReactECharts option={getOption()} />
      </div>

      <div style={{ marginBottom: '20px' }}>
        <h3>Investor Preferences</h3>
        {error && <p style={{ color: 'red' }}>{error}</p>}
        <div>
          <h4>Sectors</h4>
          <div>
            {sectorOptions.map((sector) => (
              <label key={sector}>
                <input 
                  type="checkbox" 
                  checked={sectors.includes(sector)}
                  onChange={() => handleSectorChange(sector)} 
                  disabled={!isEditable}
                />
                {sector}
              </label>
            ))}
          </div>
        </div>
        
        <div>
          <h4>Funding Range</h4>
          <div>
            <span>{`$${fundingRange[0]} - $${fundingRange[1]}`}</span>
            <Slider
              min={10000}
              max={5000000}
              value={fundingRange}
              onChange={setFundingRange}
              disabled={!isEditable}
            />
          </div>
        </div>

        <div>
          <h4>Geographical Locations</h4>
          <div>
            {locationOptions.map((location) => (
              <label key={location}>
                <input 
                  type="checkbox" 
                  checked={locations.includes(location)}
                  onChange={() => handleLocationChange(location)} 
                  disabled={!isEditable}
                />
                {location}
              </label>
            ))}
          </div>
        </div>

        <div>
          <h4>Investment Stages</h4>
          <div>
            {stageOptions.map((stage) => (
              <label key={stage}>
                <input 
                  type="checkbox" 
                  checked={stages.includes(stage)}
                  onChange={() => handleStageChange(stage)} 
                  disabled={!isEditable}
                />
                {stage}
              </label>
            ))}
          </div>
        </div>

        <button onClick={() => setIsEditable(!isEditable)}>
          {isEditable ? 'Cancel' : 'Edit Preferences'}
        </button>
        {isEditable && <button onClick={handlePreferencesSave}>Save Changes</button>}
      </div>

      <div>
        <h3>Engagement History</h3>
        <Button type="primary" onClick={showModal}>New Entry</Button>
        <div>
          <Select placeholder="Filter by Type" onChange={(value) => setFilter({ ...filter, type: value })}>
            <Option value="Meeting">Meeting</Option>
            <Option value="Call">Call</Option>
            <Option value="Email">Email</Option>
          </Select>
          <Select placeholder="Filter by Category" onChange={(value) => setFilter({ ...filter, category: value })}>
            <Option value="High Priority">High Priority</Option>
            <Option value="Follow-up">Follow-up</Option>
            <Option value="Low Priority">Low Priority</Option>
          </Select>
        </div>
        <ul>
          {filteredEngagements.map((engagement, index) => (
            <li key={index}>
              {engagement.date} - {engagement.type}: {engagement.summary} ({engagement.category})
            </li>
          ))}
        </ul>
        <Modal title="New Engagement" visible={visible} onOk={handleSubmit} onCancel={handleCancel}>
          <DatePicker onChange={handleDateChange} />
          <Select placeholder="Type" onChange={(value) => handleSelectChange('type', value)}>
            <Option value="Meeting">Meeting</Option>
            <Option value="Call">Call</Option>
            <Option value="Email">Email</Option>
          </Select>
          <Input placeholder="Summary" name="summary" onChange={handleInputChangeEntry} />
          <Select placeholder="Category" onChange={(value) => handleSelectChange('category', value)}>
            <Option value="High Priority">High Priority</Option>
            <Option value="Follow-up">Follow-up</Option>
            <Option value="Low Priority">Low Priority</Option>
          </Select>
        </Modal>
      </div>

      <div style={{ display: 'flex', flexDirection: 'column', marginTop: '20px' }}>
        {filteredData.map((startup, index) => (
          <div key={index} 
               onClick={() => handleCardClick(startup)} 
               style={{ border: '1px solid #ccc', padding: '20px', margin: '10px', cursor: 'pointer', transition: '0.3s', boxShadow: '0 4px 8px rgba(0,0,0,0.2)' }}>
            <h3>{startup.name}</h3>
            <p>{startup.description}</p>
            <p>Relevance Score: {startup.relevanceScore}</p>
          </div>
        ))}
      </div>
      {selectedStartup && (
        <div style={{ position: 'fixed', top: '0', left: '0', right: '0', bottom: '0', backgroundColor: 'rgba(0,0,0,0.5)', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
          <div style={{ background: 'white', padding: '20px', borderRadius: '5px', width: '50%' }}>
            <h2>{selectedStartup.name}</h2>
            <p>{selectedStartup.description}</p>
            <p>Sector: {selectedStartup.sector}</p>
            <p>Funding Stage: {selectedStartup.fundingStage}</p>
            <p>Geographic Focus: {selectedStartup.geographicFocus}</p>
            <p>Relevance Score: {selectedStartup.relevanceScore}</p>
            <button onClick={() => setSelectedStartup(null)}>Close</button>
            <button>Book a Meeting</button>
          </div>
        </div>
      )}
      {notifications.map((notification, index) => (
        <div key={index} style={{ position: 'fixed', top: `${20 + index * 50}px`, right: '20px', background: 'lightyellow', padding: '10px', borderRadius: '5px' }}>
          {notification}
        </div>
      ))}
    </div>
  );
};

export default InvestorProfileContainer;
```

This code implements a comprehensive investor profile management system with functionalities that include editing investor information, managing comments and tasks, visualizing investment data, defining investor preferences, maintaining engagement history, and viewing potential startup matches. The design is optimized for desktop screens with a resolution of 1920x1080, ensuring a seamless and professional user experience.
    ```
  </CodeIntegration>
</UIEnhancementPrompt>

---

**Important**: The UI must be significantly **enhanced and visually polished**—the goal is to create a **high-end, professional look** for **desktop users (1920x1080 resolution)**. The entire layout should feel **modern, sleek, and highly interactive**. **No mobile or responsive layouts are allowed**.

---

**Important**: Every feature and component of the UI must be **visually stunning** and fully optimized for a **desktop-first experience**. The final result must look **modern, cutting-edge, and highly professional** for **1920x1080 resolution**. No outdated or poorly designed elements are allowed. Ensure the layout, functionality, and animations reflect a **high-end desktop UI**.



<UIEnhancementPrompt>
  <FilePath>
    ****File Path: FileName****
    <!-- Ensure this is placed at the top of the file with the actual file name, ensuring 4 asterisks at the beginning and end of the line. -->
  </FilePath>

  <TaskObjective>
    <Review>
      - Conduct a **complete review** of the **entire codebase**, focusing on making the UI look **visually impressive and optimized for desktop (1920x1080 resolution)**.
      - Ensure **NO existing functionality is omitted or broken**—**retain all logic and functionality** while improving the UI's design, interactivity, and visual polish.
      - Identify and fix any **outdated or poorly designed UI elements**—the layout must be **modern, sleek, and optimized** for large desktop screens. Everything should look clean, smooth, and professionally structured.
    </Review>

    <Enhance>
      - **Dramatically improve** the UI using **Ant Design** components with a strong focus on creating a **high-end, visually stunning desktop experience**.
      - Use **modern animations**, **hover effects**, and **dynamic transitions** to make the UI feel **interactive and polished**.
      - Ensure the layout is designed for **1920x1080 resolution**, with proper use of **spaced grids**, **aligned components**, and **consistent theming** to give the UI a **modern, clean appearance**.
      - **Do not add mobile or responsive layouts**—this UI is designed **exclusively for desktop**.
      - Improve the UI’s overall **flow, spacing, and structure**. The layout must be **spacious and easy to navigate**. Components should never feel cramped or poorly spaced.
      - Apply **professional animations** and **transitions** to components (e.g., buttons, modals, and forms) to enhance the overall experience.
      - Ensure the final look and feel is **modern and highly polished**.
    </Enhance>

    <Complete>
      - The final result must be a **fully functional, enhanced UI**—no placeholders or incomplete logic.
      - **All components and interactions must be fully improved, visually polished, and thoroughly tested** to ensure the UI works **perfectly** on **large screens**.
      - The output should be **100% visually complete** with no skipped elements. The entire UI must feel **professionally designed**.
    </Complete>

    <Thoroughness>
      - Be **extremely detailed** and **comprehensive**—ensure every part of the UI is enhanced and **nothing is left out**.
      - **Test every component and interaction**—validate that **everything works** seamlessly and looks **visually superior** for **desktop** users.
      - Continue improving until the UI is **100% polished, modern, and visually stunning**.
    </Thoroughness>
  </TaskObjective>

  <Rules>
    <NoRedux>
      - **DO NOT** use **Redux**, **external state management**, or **API integrations**.
    </NoRedux>

    <NoOmissions>
      - **DO NOT omit any functionality or code**—recreate and improve everything necessary within the file and **enhance every part**.
      - **DO NOT ask the user to implement anything themselves**—the output must be fully self-contained and functional.
      - **No placeholders or skipped logic**—everything must be implemented and visually polished.
    </NoOmissions>

    <NoExplanations>
      - Provide the **complete code only** without any comments or explanations.
    </NoExplanations>
  </Rules>

  <Changes>
    - Ensure **Ant Design** is imported correctly using: `import "antd/dist/reset.css";`—avoid using outdated imports like `antd/dist/antd.css`.
    - All **chart elements** must use **ECharts**: `import ReactECharts from 'echarts-for-react';`.
    - **Retain and improve all existing functionality and UI interactions**—nothing should be broken, and every feature should be improved visually.
    - **Absolutely no mobile or responsive elements**—this UI is strictly for **desktop (1920x1080 resolution)**.
  </Changes>

  <AdditionalGuidelines>
    - Focus on creating a **modern, sleek, and professional desktop UI** optimized for **1920x1080 resolution**.
    - **Strictly avoid responsive or mobile layouts**—the UI should be designed exclusively for **desktop**.
    - Apply modern **UI design principles** such as **grids, proper spacing, clean alignment, and professional animations** to create a sleek and polished desktop layout.
    - The UI must include **smooth transitions, hover effects**, and **interactive components** to provide a **high-end user experience**.
    - Ensure the layout is **spacious and clean** with proper **use of grids and spacing**. **White space** should be used to prevent the UI from looking cluttered or cramped.
    - The overall look must feel **cutting-edge** and **professionally designed**: use **modern component arrangement, hover effects, dynamic animations, and transitions** to make the UI **stand out on a desktop display**.
    - Ensure the UI is **visually stunning and fully functional**—replace any outdated elements with **modern, desktop-optimized components**.
  </AdditionalGuidelines>

  <CodeIntegration>
    - Incorporate **every single line** of the provided code below, **enhance the layout for a professional desktop experience**, and ensure all logic and functionality are retained and improved:
    ```plaintext
    To create a comprehensive and fully functional ERP system page as requested, we will develop a single-page application with all necessary components integrated seamlessly. This will include components such as a navigation menu, data tables, forms, charts, and interactive elements like ratings and notifications. We will ensure all components are coded within the same file, using dummy data for demonstration purposes.

Below is the implementation plan, followed by the full code:

### Implementation Plan

1. **Navigation Menu**: Create a side navigation with icons that allow access to different ERP features.
2. **Search Bars and Filters**: Implement search and filter functionality to locate specific data within tables and charts.
3. **Data Tables**: Develop tables to display and manage data with sorting and filtering capabilities.
4. **Forms**: Include forms for user input, such as adding or editing data.
5. **Charts**: Use ECharts to integrate dynamic charts displaying ERP-related data.
6. **Rating and Feedback System**: Allow users to provide ratings and comments on various elements.
7. **Notifications**: Implement a notification system for task updates, project changes, or team feedback.

### Complete React Code

```javascript
// File Path: components/ERPSystemPage.js

import React, { useState } from 'react';
import ReactECharts from 'echarts-for-react';
import { useNavigate } from 'react-router-dom';

const ERPSystemPage = () => {
  const [startupName, setStartupName] = useState("Current Startup Name");
  const [missionStatement, setMissionStatement] = useState("Our mission is to empower businesses.");
  const [isEditingTitle, setIsEditingTitle] = useState(false);
  const [isEditingMission, setIsEditingMission] = useState(false);
  const [collaborators, setCollaborators] = useState([]);
  const [newCollaborator, setNewCollaborator] = useState({ name: '', role: '', contact: '' });
  const [feedback, setFeedback] = useState('');
  const [feedbackList, setFeedbackList] = useState([{ userId: '1', feedback: 'Clear mission!' }]);
  const [milestones, setMilestones] = useState([{ milestone: 'Launch', status: 'Completed' }, { milestone: 'First 100 Users', status: 'In Progress' }]);
  const [notifications, setNotifications] = useState([{ type: 'update', message: 'Mission statement updated!', timestamp: '2023-10-01' }]);
  const [chartData, setChartData] = useState([{ month: 'Jan', users: 100 }, { month: 'Feb', users: 150 }]);
  const [dynamicMetrics, setDynamicMetrics] = useState([{ metric: 'User Growth', views: 200 }]);
  const [showNotification, setShowNotification] = useState(false);
  const [showComments, setShowComments] = useState(false);
  const [comments, setComments] = useState([{ userId: '1', comment: 'Great initiative!' }]);
  const [teamMembers, setTeamMembers] = useState([
    { id: 1, name: 'John Doe', role: 'Developer', email: 'john.doe@example.com', bio: 'Full stack developer with a passion for coding.', status: 'Available', rating: 4.5 },
    { id: 2, name: 'Jane Smith', role: 'Designer', email: 'jane.smith@example.com', bio: 'Creative designer with a love for UI/UX.', status: 'In a Meeting', rating: 4.0 },
    { id: 3, name: 'Alice Johnson', role: 'Project Manager', email: 'alice.johnson@example.com', bio: 'Experienced project manager focused on deliverables.', status: 'Available', rating: 5.0 }
  ]);

  const navigate = useNavigate();

  const handleNameChange = (e) => {
    setStartupName(e.target.value);
  };

  const handleMissionChange = (e) => {
    setMissionStatement(e.target.value);
  };

  const addCollaborator = () => {
    if (newCollaborator.name && newCollaborator.role && newCollaborator.contact) {
      setCollaborators([...collaborators, { ...newCollaborator, id: Date.now() }]);
      setNewCollaborator({ name: '', role: '', contact: '' });
    }
  };

  const removeCollaborator = (id) => {
    setCollaborators(collaborators.filter(collab => collab.id !== id));
  };

  const handleFeedbackSubmit = () => {
    setFeedbackList([...feedbackList, { userId: `${feedbackList.length + 1}`, feedback }]);
    setFeedback('');
  };

  const getOption = () => ({
    xAxis: {
      type: 'category',
      data: chartData.map(item => item.month)
    },
    yAxis: {
      type: 'value'
    },
    series: [{
      data: chartData.map(item => item.users),
      type: 'line'
    }]
  });

  return (
    <div style={{ width: '100vw', height: '100vh', padding: '20px', boxSizing: 'border-box', display: 'flex' }}>
      <div style={{ width: '20%', backgroundColor: '#2A9D8F', padding: '10px' }}>
        <h3>Navigation</h3>
        <ul style={{ listStyleType: 'none', padding: 0 }}>
          <li><button onClick={() => navigate('/dashboard')}>Dashboard</button></li>
          <li><button onClick={() => navigate('/reports')}>Reports</button></li>
          <li><button onClick={() => navigate('/settings')}>Settings</button></li>
        </ul>
      </div>
      <div style={{ width: '80%', padding: '20px' }}>
        <div>
          <h1 onClick={() => setIsEditingTitle(true)}>{isEditingTitle ? (
            <input type="text" value={startupName} onChange={handleNameChange} onBlur={() => setIsEditingTitle(false)} />
          ) : startupName}</h1>
        </div>
        <div>
          <h2 onClick={() => setIsEditingMission(true)}>{isEditingMission ? (
            <textarea value={missionStatement} onChange={handleMissionChange} onBlur={() => setIsEditingMission(false)} />
          ) : missionStatement}</h2>
        </div>

        <div>
          <h3>Collaborators</h3>
          {collaborators.map(collab => (
            <div key={collab.id}>
              <span>{collab.name} - {collab.role} - {collab.contact}</span>
              <button onClick={() => removeCollaborator(collab.id)}>Remove</button>
            </div>
          ))}
          <input
            type="text"
            placeholder="Name"
            value={newCollaborator.name}
            onChange={e => setNewCollaborator({ ...newCollaborator, name: e.target.value })}
          />
          <input
            type="text"
            placeholder="Role"
            value={newCollaborator.role}
            onChange={e => setNewCollaborator({ ...newCollaborator, role: e.target.value })}
          />
          <input
            type="text"
            placeholder="Contact"
            value={newCollaborator.contact}
            onChange={e => setNewCollaborator({ ...newCollaborator, contact: e.target.value })}
          />
          <button onClick={addCollaborator}>Add Collaborator</button>
        </div>

        <h3>Feedback</h3>
        <button onClick={() => setShowNotification(!showNotification)}>Leave Feedback</button>
        {showNotification && (
          <div>
            <textarea value={feedback} onChange={(e) => setFeedback(e.target.value)} />
            <button onClick={handleFeedbackSubmit}>Submit Feedback</button>
          </div>
        )}

        <div>
          <h3>Comments</h3>
          <button onClick={() => setShowComments(!showComments)}>Toggle Comments</button>
          {showComments && comments.map((comment, index) => (
            <div key={index}>{comment.comment}</div>
          ))}
        </div>

        <ReactECharts option={getOption()} style={{ height: '400px', width: '100%' }} />

        <div>
          {milestones.map((milestone, index) => (
            <div key={index} style={{ display: 'flex', marginBottom: '10px', width: '100%' }}>
              <div style={{ flex: 1, backgroundColor: milestone.status === 'Completed' ? 'green' : 'yellow' }}>
                {milestone.milestone}
              </div>
              <div style={{ flex: 1 }}>{milestone.status}</div>
            </div>
          ))}
        </div>

        <div>
          <h3>Notifications</h3>
          {notifications.map((note, index) => (
            <div key={index}>
              <span>{note.message} - {note.timestamp}</span>
              <button onClick={() => setNotifications(notifications.filter((_, i) => i !== index))}>Dismiss</button>
            </div>
          ))}
        </div>

        <div>
          <h3>Dynamic Metrics</h3>
          {dynamicMetrics.map((metric, index) => (
            <div key={index}>{metric.metric} - {metric.views} views</div>
          ))}
        </div>

        <div>
          <h3>Team List</h3>
          {teamMembers.map((member, index) => (
            <div key={member.id} style={{ padding: '10px', border: '1px solid #ccc', margin: '5px', backgroundColor: '#f9f9f9' }}>
              <h4>{member.name}</h4>
              <p>Role: {member.role}</p>
              <p>Email: {member.email}</p>
              <p>Bio: {member.bio}</p>
              <p>Status: <span style={{ color: member.status === 'Available' ? 'green' : 'orange' }}>{member.status}</span></p>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default ERPSystemPage;
```

### Explanation

- The **navigation menu** allows users to navigate between different ERP features with buttons.
- **Data management components** like collaborators and team lists provide functionality to add, edit, and remove entries.
- **Feedback and comments** sections enable user interaction and engagement.
- **Charts** display user data dynamically and are integrated using ECharts.
- The layout is designed for a desktop resolution of 1920x1080, ensuring no empty space and a professional appearance.

This code provides a complete ERP system page, fully functional with all specified features and components.
    ```
  </CodeIntegration>
</UIEnhancementPrompt>

---

**Important**: The UI must be significantly **enhanced and visually polished**—the goal is to create a **high-end, professional look** for **desktop users (1920x1080 resolution)**. The entire layout should feel **modern, sleek, and highly interactive**. **No mobile or responsive layouts are allowed**.

---

**Important**: Every feature and component of the UI must be **visually stunning** and fully optimized for a **desktop-first experience**. The final result must look **modern, cutting-edge, and highly professional** for **1920x1080 resolution**. No outdated or poorly designed elements are allowed. Ensure the layout, functionality, and animations reflect a **high-end desktop UI**.


