

import React, { useState, useEffect } from 'react';
import ReactECharts from 'echarts-for-react';
import { Layout, Menu, Avatar, Input, Button, Tooltip, Badge, Popover, Upload, List, Tag, Typography, Card, Space } from 'antd';
import { UserOutlined, SmileOutlined, UploadOutlined, SearchOutlined, BellOutlined, SendOutlined } from '@ant-design/icons';

const { Header, Content, Footer } = Layout;
const { TextArea } = Input;
const { Title, Text } = Typography;

const MessagingContainer = () => {
    return (
        <Layout style={{ minHeight: '100vh' }}>
            <Header style={{ backgroundColor: '#fff', padding: 0, boxShadow: '0 2px 8px #f0f1f2' }}>
                <ChatHeader />
            </Header>
            <Content style={{ padding: '0 50px', marginTop: 64 }}>
                <MessageList />
                <MessageInput />
            </Content>
        </Layout>
    );
};

const ChatHeader = () => {
    return (
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '0 20px' }}>
            <ChatTitle />
            <UserAvatar />
        </div>
    );
};

const UserAvatar = () => {
    const [avatarUrl, setAvatarUrl] = useState('https://via.placeholder.com/150');
    const [status, setStatus] = useState('online');
    const [achievements, setAchievements] = useState([
        { id: 1, description: 'Messages sent', icon: 'üì©' },
        { id: 2, description: 'Quick responses', icon: '‚ö°' },
    ]);
    const [notifications, setNotifications] = useState([]);
    const [showNotifications, setShowNotifications] = useState(false);

    useEffect(() => {
        const interval = setInterval(() => {
            const statuses = ['online', 'away', 'offline'];
            setStatus(statuses[Math.floor(Math.random() * statuses.length)]);
        }, 5000);
        return () => clearInterval(interval);
    }, []);

    const handleAvatarClick = () => {
        alert('Open profile modal');
    };

    const handleNotificationClick = () => {
        setShowNotifications(!showNotifications);
    };

    const fetchNotifications = () => {
        setNotifications([
            'New message from John',
            'You were mentioned in a chat',
        ]);
    };

    useEffect(() => {
        fetchNotifications();
    }, []);

    const renderAchievements = () => {
        return achievements.map((achievement) => (
            <Tooltip key={achievement.id} title={achievement.description}>
                <span>{achievement.icon}</span>
            </Tooltip>
        ));
    };

    return (
        <div style={{ position: 'relative', display: 'flex', alignItems: 'center' }}>
            <Badge dot status={status}>
                <Avatar size={50} src={avatarUrl} onClick={handleAvatarClick} />
            </Badge>
            <Popover
                content={
                    <List
                        size="small"
                        bordered
                        dataSource={notifications}
                        renderItem={item => <List.Item>{item}</List.Item>}
                    />
                }
                title="Notifications"
                trigger="click"
                visible={showNotifications}
                onVisibleChange={handleNotificationClick}
            >
                <Button style={{ marginLeft: 16 }} icon={<BellOutlined />} />
            </Popover>
            <Space style={{ marginLeft: 16 }}>
                {renderAchievements()}
            </Space>
        </div>
    );
};

const ChatTitle = () => {
    const [title, setTitle] = useState("General Chat");
    const [isEditing, setIsEditing] = useState(false);
    const [participants, setParticipants] = useState(["Alice", "Bob", "Charlie"]);
    const [typingUsers, setTypingUsers] = useState(["Alice"]);
    const [eventReminders, setEventReminders] = useState([{ id: 1, title: "Team Meeting", date: "2023-10-10" }]);
    const [badges, setBadges] = useState(["First Message", "Most Active User"]);

    const handleEdit = () => {
        setIsEditing(true);
    };

    const handleSave = (newTitle) => {
        setTitle(newTitle);
        setIsEditing(false);
    };

    const getChartOptions = () => ({
        title: { text: 'Message Statistics' },
        tooltip: {},
        xAxis: { data: ['Alice', 'Bob', 'Charlie'] },
        yAxis: {},
        series: [{
            name: 'Messages',
            type: 'bar',
            data: [5, 3, 8],
        }]
    });

    return (
        <div style={{ flex: 1 }}>
            <Title level={2} editable={{ onClick: handleEdit }}>
                {isEditing ? (
                    <Input
                        defaultValue={title}
                        onBlur={(e) => handleSave(e.target.value)}
                        autoFocus
                        style={{ width: 'auto' }}
                    />
                ) : (
                    title
                )}
            </Title>
            <Text strong>Participants:</Text> {participants.join(', ')}
            <div>
                {typingUsers.length > 0 && <Text type="secondary">{typingUsers.join(', ')} is typing...</Text>}
            </div>
            <div>
                <Text strong>Upcoming Events:</Text>
                {eventReminders.map(event => (
                    <div key={event.id}>{event.title} on {event.date}</div>
                ))}
            </div>
            <div>
                <Text strong>User Badges:</Text>
                {badges.map((badge, index) => (
                    <Tag key={index} color="blue">{badge}</Tag>
                ))}
            </div>
            <Card bordered={false}>
                <ReactECharts option={getChartOptions()} style={{ height: '200px' }} />
            </Card>
        </div>
    );
};

const MessageList = () => {
    const [messages, setMessages] = useState([
        { id: 1, sender: 'User1', text: 'Hello!', timestamp: '2023-10-01 10:00', pinned: false, reactions: {}, replies: [] },
        { id: 2, sender: 'User2', text: 'Hi there!', timestamp: '2023-10-01 10:01', pinned: false, reactions: {}, replies: [] },
    ]);
    const [searchTerm, setSearchTerm] = useState('');
    const [pinnedMessages, setPinnedMessages] = useState([]);
    const [viewMode, setViewMode] = useState('list');
    const [reactions, setReactions] = useState({});
    const [unreadCount, setUnreadCount] = useState(0);

    useEffect(() => {
        const countUnread = messages.filter(msg => !msg.read).length;
        setUnreadCount(countUnread);
    }, [messages]);

    const togglePinMessage = (id) => {
        setMessages(messages.map(msg => {
            if (msg.id === id) {
                msg.pinned = !msg.pinned;
            }
            return msg;
        }));
    };

    const handleReaction = (messageId, emoji) => {
        setReactions(prev => ({
            ...prev,
            [messageId]: prev[messageId] ? [...prev[messageId], emoji] : [emoji]
        }));
    };

    const filteredMessages = messages.filter(msg => 
        msg.text.includes(searchTerm) || msg.sender.includes(searchTerm)
    );

    const handleSearch = (e) => {
        setSearchTerm(e.target.value);
    };

    const toggleViewMode = () => {
        setViewMode(viewMode === 'list' ? 'grid' : 'list');
    };

    return (
        <div style={{ flex: 1, marginTop: '20px', overflowY: 'auto' }}>
            <Input
                prefix={<SearchOutlined />}
                placeholder="Search messages..."
                value={searchTerm}
                onChange={handleSearch}
                style={{ marginBottom: '10px' }}
            />
            <Button onClick={toggleViewMode}>Toggle View</Button>
            <List
                itemLayout="vertical"
                dataSource={filteredMessages.sort((a, b) => a.pinned === b.pinned ? 0 : a.pinned ? -1 : 1)}
                renderItem={msg => (
                    <List.Item
                        key={msg.id}
                        actions={[
                            <Button onClick={() => togglePinMessage(msg.id)}>Pin</Button>,
                            <Button onClick={() => handleReaction(msg.id, 'üëç')}>üëç</Button>,
                            <Button onClick={() => handleReaction(msg.id, '‚ù§Ô∏è')}>‚ù§Ô∏è</Button>
                        ]}
                    >
                        <List.Item.Meta
                            title={<strong>{msg.sender}</strong>}
                            description={<span>{msg.timestamp}</span>}
                        />
                        {msg.text}
                        <div>{reactions[msg.id] ? reactions[msg.id].join(', ') : ''}</div>
                        {msg.replies.length > 0 && msg.replies.map(reply => (
                            <div style={{ marginLeft: '20px' }} key={reply.id}>{reply.text}</div>
                        ))}
                    </List.Item>
                )}
            />
            <Text type="secondary">Unread Messages: {unreadCount}</Text>
        </div>
    );
};

const MessageInput = () => {
    const [message, setMessage] = useState('');
    const [files, setFiles] = useState([]);
    const [showEmojiPicker, setShowEmojiPicker] = useState(false);

    const handleSendMessage = () => {
        if (message.trim() || files.length) {
            // Dummy logic to simulate message sending
            console.log('Message sent:', { message, files });
            setMessage('');
            setFiles([]);
        }
    };

    const handleFileChange = (event) => {
        setFiles([...files, ...Array.from(event.target.files)]);
    };

    const handleDrop = (event) => {
        event.preventDefault();
        setFiles([...files, ...Array.from(event.dataTransfer.files)]);
    };

    const handleEmojiSelect = (emoji) => {
        setMessage(message + emoji);
        setShowEmojiPicker(false);
    };

    return (
        <div style={{ display: 'flex', flexDirection: 'column', padding: '20px', backgroundColor: '#f7f7f7', borderRadius: '8px', marginTop: '20px' }}>
            <TextArea
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                placeholder="Type a message..."
                autoSize={{ minRows: 3, maxRows: 5 }}
                style={{ marginBottom: '10px' }}
            />
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Upload onChange={handleFileChange} multiple>
                    <Button icon={<UploadOutlined />}>Attach Files</Button>
                </Upload>
                <Space>
                    <Button icon={<SmileOutlined />} onClick={() => setShowEmojiPicker(!showEmojiPicker)}>Emoji</Button>
                    <Button type="primary" icon={<SendOutlined />} onClick={handleSendMessage}>Send</Button>
                </Space>
            </div>
            {showEmojiPicker && (
                <div style={{ position: 'absolute', bottom: '80px', left: '20px', backgroundColor: '#fff', borderRadius: '8px', boxShadow: '0 2px 8px rgba(0,0,0,0.1)', padding: '10px' }}>
                    {/* Dummy emojis */}
                    {['üòÄ', 'üòÇ', '‚ù§Ô∏è', 'üëç'].map((emoji) => (
                        <span key={emoji} onClick={() => handleEmojiSelect(emoji)} style={{ cursor: 'pointer', fontSize: '24px', margin: '5px' }}>
                            {emoji}
                        </span>
                    ))}
                </div>
            )}
            <div
                onDrop={handleDrop}
                onDragOver={(e) => e.preventDefault()}
                style={{ border: '2px dashed #ccc', padding: '20px', marginTop: '10px', borderRadius: '8px', textAlign: 'center' }}
            >
                {files.length > 0 && (
                    <List
                        header={<Text strong>Attached Files:</Text>}
                        bordered
                        dataSource={files}
                        renderItem={file => <List.Item>{file.name}</List.Item>}
                    />
                )}
            </div>
        </div>
    );
};

export default MessagingContainer;
