

****File PATH: OrderDetailContainer.js****
import React, { useState } from 'react';

const SupplierInfo = ({ supplier }) => (
    <div>
        <h3>Supplier Information</h3>
        <p><strong>Name:</strong> {supplier.name || 'N/A'}</p>
        <p><strong>Contact:</strong> {supplier.contact || 'N/A'}</p>
    </div>
);

const ItemList = ({ items }) => (
    <div>
        <h3>Item Details</h3>
        {items.length > 0 ? (
            items.map((item, index) => (
                <div key={index}>
                    <p><strong>Description:</strong> {item.description}</p>
                    <p><strong>SKU:</strong> {item.sku}</p>
                    <p><strong>Quantity:</strong> {item.quantity}</p>
                    <p><strong>Unit Price:</strong> ${item.unitPrice.toFixed(2)}</p>
                </div>
            ))
        ) : (
            <p>No items in this order.</p>
        )}
    </div>
);

const OrderStatus = ({ status }) => (
    <div>
        <h3>Order Status</h3>
        <p>{status || 'Status not available'}</p>
    </div>
);

const AdditionalInfo = ({ info }) => (
    <div>
        <h3>Additional Information</h3>
        <p>{info || 'No additional information.'}</p>
    </div>
);

const OrderDetail = ({ order }) => {
    if (!order) {
        console.error("Order data is missing");
        return <p>Error: Order data is not available.</p>;
    }

    return (
        <div>
            <SupplierInfo supplier={order.supplier} />
            <ItemList items={order.items} />
            <OrderStatus status={order.status} />
            <AdditionalInfo info={order.additionalInfo} />
        </div>
    );
};

// EditOrderForm component
const EditOrderForm = ({ orderDetails }) => {
    const [quantity, setQuantity] = useState(orderDetails.items[0].quantity);
    const [price, setPrice] = useState(orderDetails.items[0].unitPrice);
    const [error, setError] = useState('');

    const validateInputs = () => {
        if (quantity <= 0 || price <= 0) {
            setError('Quantity and Price must be positive numbers.');
            return false;
        }
        setError('');
        return true;
    };

    const handleSubmit = (event) => {
        event.preventDefault();
        if (validateInputs()) {
            console.log('Order Updated:', { quantity, price });
            alert('Order details updated successfully!');
        }
    };

    return (
        <form onSubmit={handleSubmit}>
            <label>
                Quantity:
                <input type="number" value={quantity} onChange={(e) => setQuantity(e.target.value)} />
            </label>
            <label>
                Price:
                <input type="number" value={price} onChange={(e) => setPrice(e.target.value)} />
            </label>
            {error && <p className="error">{error}</p>}
            <button type="submit">Update Order</button>
        </form>
    );
};

// BackButton component
const BackButton = ({ onClick }) => (
    <button onClick={onClick}>
        Back
    </button>
);

// Main OrderDetailContainer component
const OrderDetailContainer = () => {
    const [order, setOrder] = useState(dummyOrderData); // Replace with dummy data
    const [isEditing, setEditing] = useState(false);

    const toggleEditing = () => setEditing(prev => !prev);
    
    const navigateBack = () => {
        console.log("Navigating back to the dashboard...");
    };

    return (
        <div style={{ width: '1920px', height: '1080px' }}>
            <OrderDetail order={order} />
            {isEditing ? <EditOrderForm orderDetails={order} /> : null}
            <BackButton onClick={navigateBack} />
            <button onClick={toggleEditing}>{isEditing ? 'Cancel' : 'Edit'}</button>
        </div>
    );
};

// Dummy data for demonstration
const dummyOrderData = {
    supplier: {
        name: "Supplier Inc.",
        contact: "contact@supplier.com"
    },
    items: [
        { description: "Item 1", sku: "SKU001", quantity: 5, unitPrice: 10.00 },
        { description: "Item 2", sku: "SKU002", quantity: 3, unitPrice: 15.00 }
    ],
    status: "Pending",
    additionalInfo: "Please deliver by end of the week."
};

// Example usage of OrderDetailContainer component
const App = () => <OrderDetailContainer />;

export default App;

****File PATH: DashboardContainer.js****
import React, { useState } from 'react';
import PropTypes from 'prop-types';
import * as XLSX from 'xlsx';

// OrderForm Component
const OrderForm = ({ addOrder }) => {
    const [formData, setFormData] = useState({ supplier: '', item: '', quantity: '', price: '' });
    const [errors, setErrors] = useState({});

    const handleChange = (e) => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
    };

    const validateForm = () => {
        let errors = {};
        if (!formData.supplier) errors.supplier = "Supplier is required.";
        if (!formData.item) errors.item = "Item is required.";
        if (!Number.isInteger(Number(formData.quantity)) || formData.quantity <= 0) errors.quantity = "Quantity must be a positive integer.";
        if (Number(formData.price) <= 0 || isNaN(Number(formData.price))) errors.price = "Price must be a positive number.";
        return errors;
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        const errors = validateForm();
        if (Object.keys(errors).length === 0) {
            addOrder(formData); 
            setFormData({ supplier: '', item: '', quantity: '', price: '' });
            setErrors({});
        } else {
            setErrors(errors);
        }
    };

    return (
        <form onSubmit={handleSubmit}>
            <div>
                <label>Supplier Name:</label>
                <input type="text" name="supplier" value={formData.supplier} onChange={handleChange} />
                {errors.supplier && <span>{errors.supplier}</span>}
            </div>
            <div>
                <label>Item Name:</label>
                <input type="text" name="item" value={formData.item} onChange={handleChange} />
                {errors.item && <span>{errors.item}</span>}
            </div>
            <div>
                <label>Quantity:</label>
                <input type="number" name="quantity" value={formData.quantity} onChange={handleChange} />
                {errors.quantity && <span>{errors.quantity}</span>}
            </div>
            <div>
                <label>Price:</label>
                <input type="number" name="price" value={formData.price} onChange={handleChange} />
                {errors.price && <span>{errors.price}</span>}
            </div>
            <button type="submit">Submit Order</button>
        </form>
    );
};

OrderForm.propTypes = {
    addOrder: PropTypes.func.isRequired,
};

// OrderList Component
const OrderList = ({ orders, setOrders }) => {
    const [editingOrder, setEditingOrder] = useState(null);
    const [searchTerm, setSearchTerm] = useState('');
    
    const handleEdit = (updatedOrder) => {
        setOrders(orders.map(order => order.id === updatedOrder.id ? updatedOrder : order));
        setEditingOrder(null);
    };

    const handleDelete = (id) => {
        if (window.confirm('Are you sure you want to delete this order?')) {
            setOrders(orders.filter(order => order.id !== id));
        }
    };

    const handleSearch = (event) => {
        setSearchTerm(event.target.value);
    };

    const filteredOrders = orders.filter(order => 
        order.supplier.toLowerCase().includes(searchTerm.toLowerCase()) ||
        order.item.toLowerCase().includes(searchTerm.toLowerCase())
    );

    return (
        <div style={{ width: '1920px', height: '1080px', overflow: 'auto' }}>
            <h1>Order List</h1>
            <input 
                type="text" 
                placeholder="Search orders..." 
                value={searchTerm}
                onChange={handleSearch}
                style={{ marginBottom: '20px', padding: '10px', width: '300px' }}
            />
            <ul>
                {filteredOrders.map(order => (
                    <li key={order.id} style={{ marginBottom: '10px', border: '1px solid #ccc', padding: '10px' }}>
                        <div>
                            <strong>Supplier:</strong> {order.supplier}<br />
                            <strong>Item:</strong> {order.item}<br />
                            <strong>Quantity:</strong> {order.quantity}<br />
                            <strong>Price:</strong> ${order.price}<br />
                            <strong>Status:</strong> {order.status}
                        </div>
                        <button onClick={() => setEditingOrder(order)}>Edit</button>
                        <button onClick={() => handleDelete(order.id)}>Delete</button>
                    </li>
                ))}
            </ul>
            {editingOrder && (
                <EditOrderForm 
                    order={editingOrder} 
                    onEdit={handleEdit} 
                    onCancel={() => setEditingOrder(null)} 
                />
            )}
        </div>
    );
};

const EditOrderForm = ({ order, onEdit, onCancel }) => {
    const [formData, setFormData] = useState(order);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData({ ...formData, [name]: value });
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        onEdit(formData);
    };

    return (
        <form onSubmit={handleSubmit} style={{ marginTop: '20px' }}>
            <h2>Edit Order</h2>
            <label>
                Supplier:
                <input 
                    type="text" 
                    name="supplier" 
                    value={formData.supplier} 
                    onChange={handleChange} 
                />
            </label>
            <label>
                Item:
                <input 
                    type="text" 
                    name="item" 
                    value={formData.item} 
                    onChange={handleChange} 
                />
            </label>
            <label>
                Quantity:
                <input 
                    type="number" 
                    name="quantity" 
                    value={formData.quantity} 
                    onChange={handleChange} 
                />
            </label>
            <label>
                Price:
                <input 
                    type="number" 
                    name="price" 
                    value={formData.price} 
                    onChange={handleChange} 
                />
            </label>
            <label>
                Status:
                <select 
                    name="status" 
                    value={formData.status} 
                    onChange={handleChange} 
                >
                    <option value="Pending">Pending</option>
                    <option value="Completed">Completed</option>
                    <option value="Cancelled">Cancelled</option>
                </select>
            </label>
            <button type="submit">Save</button>
            <button type="button" onClick={onCancel}>Cancel</button>
        </form>
    );
};

// ExportButton Component
const ExportButton = ({ orderList }) => {
    const [fileFormat, setFileFormat] = useState('CSV');

    const handleExport = () => {
        if (orderList.length === 0) {
            alert('No orders available for export.');
            return;
        }

        try {
            const data = compileData(orderList);
            if (fileFormat === 'CSV') {
                downloadCSV(data);
            } else {
                downloadExcel(data);
            }
            alert('Export successful!');
        } catch (error) {
            console.error('Export failed:', error);
            alert('There was an error exporting your data.');
        }
    };

    const compileData = (orderList) => {
        return orderList.map(order => ({
            id: order.id,
            supplier: order.supplier,
            item: order.item,
            quantity: order.quantity,
            price: order.price,
            status: order.status,
        }));
    };

    const downloadCSV = (data) => {
        const csvContent = "data:text/csv;charset=utf-8," 
            + data.map(e => Object.values(e).join(",")).join("\n");
        
        const encodedUri = encodeURI(csvContent);
        const link = document.createElement("a");
        link.setAttribute("href", encodedUri);
        link.setAttribute("download", "purchase_orders.csv");
        document.body.appendChild(link);

        link.click();
        document.body.removeChild(link);
    };

    const downloadExcel = (data) => {
        const ws = XLSX.utils.json_to_sheet(data);
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, "Orders");

        XLSX.writeFile(wb, "purchase_orders.xlsx");
    };

    return (
        <div>
            <select onChange={(e) => setFileFormat(e.target.value)}>
                <option value="CSV">CSV</option>
                <option value="Excel">Excel</option>
            </select>
            <button onClick={handleExport}>Export</button>
        </div>
    );
};

// DashboardContainer Component
const DashboardContainer = () => {
    const [orders, setOrders] = useState([
        { id: 1, supplier: 'Supplier A', item: 'Item 1', quantity: 10, price: 100, status: 'Pending' },
        { id: 2, supplier: 'Supplier B', item: 'Item 2', quantity: 5, price: 50, status: 'Completed' }
    ]);

    const addOrder = (orderData) => {
        const newOrder = {
            id: orders.length + 1,
            supplier: orderData.supplier,
            item: orderData.item,
            quantity: Number(orderData.quantity),
            price: Number(orderData.price),
            status: 'Pending'
        };
        setOrders([...orders, newOrder]);
    };

    return (
        <div style={{ width: '1920px', height: '1080px' }}>
            <OrderForm addOrder={addOrder} />
            <OrderList orders={orders} setOrders={setOrders} />
            <ExportButton orderList={orders} />
        </div>
    );
};

export default DashboardContainer;
