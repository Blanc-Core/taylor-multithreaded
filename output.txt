

****File PATH: components/DashboardContainer.js****

import React, { useState, useEffect, useMemo } from 'react';
import ReactECharts from 'echarts-for-react';
import { useNavigate } from 'react-router-dom';
import { Layout, Card, Button, Table, Input, Select, Slider, Tooltip, Alert, notification } from 'antd';
import "antd/dist/reset.css";

const { Header, Content, Sider } = Layout;
const { Option } = Select;

const DashboardContainer = () => {
  const [feedback, setFeedback] = useState([]);
  const [teamWorkloadData, setTeamWorkloadData] = useState([]);
  const [projectAssignments, setProjectAssignments] = useState([]);
  const [alerts, setAlerts] = useState([]);
  const [theme, setTheme] = useState('light');

  const navigate = useNavigate();

  useEffect(() => {
    setTeamWorkloadData([
      { team: 'Team A', workload: 80 },
      { team: 'Team B', workload: 30 },
      { team: 'Team C', workload: 60 },
      { team: 'Team D', workload: 50 },
      { team: 'Team E', workload: 90 },
    ]);

    setProjectAssignments([
      { id: 1, name: 'Project Alpha', team: 'Team A', workload: 80, status: 'ongoing' },
      { id: 2, name: 'Project Beta', team: 'Team B', workload: 60, status: 'ongoing' },
      { id: 3, name: 'Project Gamma', team: 'Team C', workload: 50, status: 'completed' },
      { id: 4, name: 'Project Delta', team: 'Team A', workload: 40, status: 'on-hold' },
    ]);

    setAlerts([
      { teamName: 'Team A', workload: 85, threshold: 70, severity: 'critical', id: 1 },
      { teamName: 'Team B', workload: 65, threshold: 60, severity: 'warning', id: 2 },
      { teamName: 'Team C', workload: 45, threshold: 50, severity: 'normal', id: 3 },
    ]);
  }, []);

  const handleFeedbackSubmit = (feedbackData) => {
    setFeedback((prev) => [...prev, feedbackData]);
    notification.success({
      message: 'Feedback Submitted',
      description: 'Your feedback has been successfully submitted.',
    });
  };

  const handleThemeChange = () => {
    setTheme((prev) => (prev === 'light' ? 'dark' : 'light'));
  };

  const handleNavigation = (path) => {
    navigate(path);
  };

  return (
    <Layout style={{ height: '100vh' }}>
      <Header style={{ backgroundColor: theme === 'light' ? '#fff' : '#001529', color: theme === 'light' ? '#000' : '#fff' }}>
        <h2 style={{ color: 'inherit' }}>Resource Allocation Dashboard</h2>
        <Button onClick={handleThemeChange} type="link" style={{ color: 'inherit' }}>
          {theme === 'light' ? 'Switch to Dark Mode' : 'Switch to Light Mode'}
        </Button>
      </Header>
      <Layout>
        <Sider width={300} theme={theme}>
          <AlertsNotification alerts={alerts} />
        </Sider>
        <Content style={{ padding: '20px', backgroundColor: theme === 'light' ? '#f0f2f5' : '#001529' }}>
          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: '20px' }}>
            <Card title="Team Workload" style={{ gridColumn: '1 / 3' }}>
              <TeamWorkloadChart data={teamWorkloadData} />
            </Card>
            <Card title="Project Assignments">
              <ProjectAssignmentsList projects={projectAssignments} />
            </Card>
            <Card title="Feedback">
              <FeedbackWidget onSubmit={handleFeedbackSubmit} />
            </Card>
            <Card title="Simulation Control">
              <SimulationControl />
            </Card>
          </div>
        </Content>
      </Layout>
    </Layout>
  );
};

const TeamWorkloadChart = ({ data }) => {
  const [tooltipContent, setTooltipContent] = useState('');
  const [selectedTeam, setSelectedTeam] = useState(null);
  const [notifications, setNotifications] = useState([]);

  const handleMouseEnter = (params) => {
    const teamData = data[params.dataIndex];
    setTooltipContent(`${teamData.team}: ${teamData.workload}%`);
  };

  const handleMouseLeave = () => {
    setTooltipContent('');
  };

  const handleClick = (params) => {
    const teamData = data[params.dataIndex];
    setSelectedTeam(teamData.team);
    notification.info({
      message: `Filtering by ${teamData.team}`,
    });
  };

  const getOption = () => ({
    title: {
      text: 'Team Workload Heatmap',
      left: 'center',
    },
    tooltip: {
      trigger: 'item',
      formatter: tooltipContent,
    },
    visualMap: {
      min: 0,
      max: 100,
      splitNumber: 5,
      inRange: {
        color: ['#ffffff', '#ff0000'],
      },
    },
    series: [
      {
        name: 'Workload',
        type: 'heatmap',
        data: data.map((item, index) => [index, 0, item.workload]),
        label: {
          show: true,
        },
        emphasis: {
          itemStyle: {
            shadowBlur: 10,
            shadowColor: '#333',
          },
        },
      },
    ],
  });

  const handleNotification = () => {
    const newNotification = 'Workload has changed significantly!';
    setNotifications((prev) => [...prev, newNotification]);
  };

  useEffect(() => {
    const interval = setInterval(() => {
      const updatedData = data.map(item => ({ ...item, workload: Math.floor(Math.random() * 100) }));
      handleNotification();
    }, 5000);

    return () => clearInterval(interval);
  }, [data]);

  return (
    <div style={{ width: '100%', height: '100%', position: 'relative' }}>
      <ReactECharts
        option={getOption()}
        onEvents={{
          mouseenter: handleMouseEnter,
          mouseleave: handleMouseLeave,
          click: handleClick,
        }}
      />
      {notifications.length > 0 && (
        <div style={{ position: 'absolute', top: '10px', right: '10px' }}>
          {notifications.map((notification, index) => (
            <Alert message={notification} type="info" key={index} />
          ))}
        </div>
      )}
      {selectedTeam && <Alert message={`You have selected: ${selectedTeam}`} type="success" />}
    </div>
  );
};

const ProjectAssignmentsList = ({ projects }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('');
  const [editedWorkload, setEditedWorkload] = useState({});

  const filteredData = useMemo(() => {
    return projects.filter(item =>
      item.name.toLowerCase().includes(searchTerm.toLowerCase()) &&
      (statusFilter ? item.status === statusFilter : true)
    );
  }, [searchTerm, statusFilter, projects]);

  const handleEdit = (id, newWorkload) => {
    const totalWorkload = filteredData.reduce((sum, item) => sum + (editedWorkload[item.id] || item.workload), 0);
    if (totalWorkload - (editedWorkload[id] || filteredData.find(item => item.id === id).workload) + newWorkload <= 100) {
      setEditedWorkload(prev => ({ ...prev, [id]: newWorkload }));
    } else {
      alert('Total workload cannot exceed 100%');
    }
  };

  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };

  const handleStatusChange = (value) => {
    setStatusFilter(value);
  };

  const columns = [
    {
      title: 'Project Name',
      dataIndex: 'name',
      key: 'name',
    },
    {
      title: 'Assigned Team',
      dataIndex: 'team',
      key: 'team',
    },
    {
      title: 'Workload (%)',
      dataIndex: 'workload',
      key: 'workload',
      render: (text, record) => (
        <Input
          defaultValue={text}
          onBlur={(e) => handleEdit(record.id, Number(e.target.value))}
        />
      ),
    },
  ];

  return (
    <div style={{ width: '100%', height: '100%' }}>
      <Input
        placeholder="Search Projects"
        value={searchTerm}
        onChange={handleSearchChange}
        style={{ marginBottom: '10px' }}
      />
      <Select
        placeholder="Filter by Status"
        style={{ width: 200, marginBottom: '10px' }}
        onChange={handleStatusChange}
      >
        <Option value="">All Statuses</Option>
        <Option value="ongoing">Ongoing</Option>
        <Option value="completed">Completed</Option>
        <Option value="on-hold">On Hold</Option>
      </Select>
      <Table columns={columns} dataSource={filteredData} rowKey="id" pagination={false} />
    </div>
  );
};

const AlertsNotification = ({ alerts }) => {
  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'critical':
        return 'red';
      case 'warning':
        return 'yellow';
      default:
        return 'green';
    }
  };

  const handleClick = (alert) => {
    notification.info({
      message: `Navigating to alert details for ${alert.teamName}`,
    });
  };

  return (
    <div style={{ padding: '20px' }}>
      <h2>Alerts Notification</h2>
      {alerts.length === 0 ? (
        <Alert message="No alerts" type="info" />
      ) : (
        alerts.map((alert) => (
          <div
            key={alert.id}
            onClick={() => handleClick(alert)}
            style={{
              padding: '10px',
              margin: '5px 0',
              backgroundColor: getSeverityColor(alert.severity),
              color: 'white',
              cursor: 'pointer',
              borderRadius: '4px',
            }}
          >
            {`${alert.teamName}: Workload ${alert.workload} (Threshold: ${alert.threshold})`}
          </div>
        ))
      )}
    </div>
  );
};

const FeedbackWidget = ({ onSubmit }) => {
  const [feedback, setFeedback] = useState('');

  const handleSubmit = () => {
    onSubmit(feedback);
    setFeedback('');
  };

  return (
    <div>
      <Input.TextArea
        value={feedback}
        onChange={(e) => setFeedback(e.target.value)}
        placeholder="Share your feedback here..."
        rows={4}
      />
      <Button onClick={handleSubmit} type="primary" style={{ marginTop: '10px' }}>
        Submit Feedback
      </Button>
    </div>
  );
};

const SimulationControl = () => {
  const [resources, setResources] = useState({ cpu: 50, memory: 50 });

  const handleChange = (value, type) => {
    setResources(prev => ({ ...prev, [type]: value }));
  };

  return (
    <div>
      <h3>Resource Allocation Simulation</h3>
      <Tooltip title={`CPU Allocation: ${resources.cpu}%`}>
        <Slider
          min={0}
          max={100}
          value={resources.cpu}
          onChange={(value) => handleChange(value, 'cpu')}
        />
      </Tooltip>
      <Tooltip title={`Memory Allocation: ${resources.memory}%`}>
        <Slider
          min={0}
          max={100}
          value={resources.memory}
          onChange={(value) => handleChange(value, 'memory')}
        />
      </Tooltip>
      <p>Current Allocation: {`CPU: ${resources.cpu}%, Memory: ${resources.memory}%`}</p>
    </div>
  );
};

export default DashboardContainer;


****File PATH: components/ProjectOverviewContainer.js****

import React, { useState, useEffect } from 'react';
import ReactECharts from 'echarts-for-react';
import { Modal, Button, Tooltip, Input, Collapse, Card, List, Progress } from 'antd';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import 'antd/dist/reset.css';

// Dummy Data
const projectData = {
  name: "Project Alpha",
  description: "This project aims to improve the overall efficiency of our ERP system.",
  status: "In Progress",
  milestones: [
    { date: '2023-01-01', title: 'Kick-off', description: 'Project initiated.' },
    { date: '2023-02-15', title: 'Phase 1 Complete', description: 'Completion of initial phase.' },
    { date: '2023-04-10', title: 'Phase 2 Complete', description: 'Second phase completed.' },
  ],
  notifications: [
    "New update available for Phase 2.",
    "Resource allocation has been adjusted.",
    "Milestone for Phase 1 has been achieved.",
  ],
  resourceAllocation: { "Development": 40, "Testing": 20, "Design": 30, "Management": 10 },
  progressData: [10, 30, 50, 70, 90, 100],
};

const milestonesData = [
  { id: '1', name: 'Launch Product', dueDate: '2023-10-30', status: 'on track', completionPercentage: 75 },
  { id: '2', name: 'Market Research', dueDate: '2023-11-15', status: 'at risk', completionPercentage: 50 },
  { id: '3', name: 'User Testing', dueDate: '2023-12-01', status: 'delayed', completionPercentage: 30 },
  { id: '4', name: 'Final Release', dueDate: '2023-12-15', status: 'on track', completionPercentage: 90 },
];

const initialTasks = [
  {
    id: '1',
    description: "Complete the report",
    assignedTo: "John Doe",
    status: "in progress",
    dueDate: "2023-10-10",
    comments: [{ user: "Jane Doe", text: "Great start!" }],
    completionPercentage: 50
  },
  {
    id: '2',
    description: "Prepare presentation",
    assignedTo: "Alice Smith",
    status: "not started",
    dueDate: "2023-10-12",
    comments: [],
    completionPercentage: 0
  },
  {
    id: '3',
    description: "Conduct team meeting",
    assignedTo: "Bob Johnson",
    status: "completed",
    dueDate: "2023-10-08",
    comments: [{ user: "Alice Smith", text: "Meeting was productive!" }],
    completionPercentage: 100
  }
];

const ProjectOverviewContainer = () => {
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [latestUpdate, setLatestUpdate] = useState(new Date().toLocaleString());
  const [selectedTask, setSelectedTask] = useState(null);
  const [newComment, setNewComment] = useState("");
  const [tasks, setTasks] = useState(initialTasks);
  const [view, setView] = useState('list');
  const [filteredMilestones, setFilteredMilestones] = useState(milestonesData);

  const handleStatusClick = () => {
    setIsModalVisible(true);
  };

  const handleModalClose = () => {
    setIsModalVisible(false);
  };

  const pieChartOptions = {
    title: {
      text: 'Resource Allocation',
      left: 'center'
    },
    tooltip: {
      trigger: 'item'
    },
    series: [
      {
        name: 'Resources',
        type: 'pie',
        radius: '50%',
        data: Object.entries(projectData.resourceAllocation).map(([key, value]) => ({ name: key, value })),
        emphasis: {
          itemStyle: {
            shadowBlur: 10,
            shadowOffsetX: 0,
            shadowColor: 'rgba(0, 0, 0, 0.5)'
          }
        }
      }
    ]
  };

  const lineChartOptions = {
    title: {
      text: 'Project Progress Over Time',
      left: 'center'
    },
    xAxis: {
      type: 'category',
      data: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']
    },
    yAxis: {
      type: 'value'
    },
    series: [{
      data: projectData.progressData,
      type: 'line',
      smooth: true
    }]
  };

  const handleViewChange = () => {
    setView(view === 'list' ? 'calendar' : 'list');
  };

  const getMilestoneColor = (status) => {
    switch (status) {
      case 'on track':
        return 'green';
      case 'at risk':
        return 'orange';
      case 'delayed':
        return 'red';
      default:
        return 'gray';
    }
  };

  const getGanttChartOption = () => {
    return {
      title: { text: 'Gantt Chart' },
      tooltip: {},
      xAxis: {
        data: milestonesData.map(m => m.name),
        name: 'Milestones',
      },
      yAxis: {
        type: 'value',
        name: 'Days',
      },
      series: [
        {
          name: 'Completion',
          type: 'bar',
          data: milestonesData.map(m => m.completionPercentage),
        },
      ],
    };
  };

  const notify = (message) => {
    toast(message);
  };

  const handleTaskUpdate = (task) => {
    notify(`Task "${task.description}" is now updated!`);
  };

  const handleDragEnd = (result) => {
    if (!result.destination) return;
    const reorderedTasks = Array.from(tasks);
    const [movedTask] = reorderedTasks.splice(result.source.index, 1);
    reorderedTasks.splice(result.destination.index, 0, movedTask);
    setTasks(reorderedTasks);
  };

  const handleCommentSubmit = (taskId) => {
    const updatedTasks = tasks.map(task => {
      if (task.id === taskId) {
        return {
          ...task,
          comments: [...task.comments, { user: "Current User", text: newComment }]
        };
      }
      return task;
    });
    setTasks(updatedTasks);
    setNewComment("");
  };

  const handleTaskClick = (task) => {
    setSelectedTask(task);
  };

  useEffect(() => {
    setLatestUpdate(new Date().toLocaleString());
  }, [latestUpdate]);

  return (
    <div style={{ height: '100vh', padding: '20px', boxSizing: 'border-box', backgroundColor: '#f0f2f5' }}>
      <Card bordered={false} style={{ marginBottom: 24 }}>
        <h1 style={{ fontSize: '24px', margin: 0 }}>{projectData.name}</h1>
        <p style={{ color: '#595959', fontSize: '16px' }}>{projectData.description}</p>
        <Tooltip title="Click for detailed report">
          <Button onClick={handleStatusClick} type={projectData.status === "In Progress" ? "primary" : "default"}>
            {projectData.status}
          </Button>
        </Tooltip>
      </Card>

      <Card title="Milestones" bordered={false} style={{ marginBottom: 24 }}>
        <List
          itemLayout="horizontal"
          dataSource={projectData.milestones}
          renderItem={milestone => (
            <List.Item>
              <Tooltip title={milestone.description}>
                <span>{milestone.title} - {milestone.date}</span>
              </Tooltip>
            </List.Item>
          )}
        />
      </Card>

      <Card title="Notifications" bordered={false} style={{ marginBottom: 24 }}>
        <List
          dataSource={projectData.notifications}
          renderItem={notification => <List.Item>{notification}</List.Item>}
        />
      </Card>

      <Card title="Data Visualization" bordered={false} style={{ marginBottom: 24 }}>
        <ReactECharts option={pieChartOptions} style={{ height: '400px' }} />
        <ReactECharts option={lineChartOptions} style={{ height: '400px' }} />
        <Button onClick={() => setLatestUpdate(new Date().toLocaleString())}>Refresh Data</Button>
        <p>Last updated: {latestUpdate}</p>
      </Card>

      <Modal title="Project Timeline" visible={isModalVisible} onCancel={handleModalClose} footer={null}>
        <h3>Timeline Details</h3>
        <ul>
          {projectData.milestones.map((milestone, index) => (
            <li key={index}>{milestone.title} - {milestone.date}: {milestone.description}</li>
          ))}
        </ul>
      </Modal>

      <Card title="Milestones Overview" bordered={false} style={{ marginBottom: 24 }}>
        <Button onClick={handleViewChange}>
          Switch to {view === 'list' ? 'Calendar' : 'List'} View
        </Button>
        {view === 'list' ? (
          <List
            itemLayout="vertical"
            dataSource={filteredMilestones}
            renderItem={milestone => (
              <List.Item key={milestone.id} style={{ border: `1px solid ${getMilestoneColor(milestone.status)}`, marginBottom: 16 }}>
                <h3>{milestone.name}</h3>
                <p>Due Date: {milestone.dueDate}</p>
                <p>Status: <span style={{ color: getMilestoneColor(milestone.status) }}>{milestone.status}</span></p>
                <Progress percent={milestone.completionPercentage} />
              </List.Item>
            )}
          />
        ) : (
          <ReactECharts option={getGanttChartOption()} style={{ height: '400px', width: '100%' }} />
        )}
      </Card>

      <DragDropContext onDragEnd={handleDragEnd}>
        <Droppable droppableId="tasks">
          {(provided) => (
            <ul {...provided.droppableProps} ref={provided.innerRef} style={{ listStyle: 'none', padding: 0 }}>
              {tasks.map((task, index) => (
                <Draggable key={task.id} draggableId={task.id} index={index}>
                  {(provided) => (
                    <li
                      {...provided.draggableProps}
                      {...provided.dragHandleProps}
                      ref={provided.innerRef}
                      onClick={() => handleTaskClick(task)}
                      style={{ marginBottom: 16, background: '#fff', padding: 16, borderRadius: 8, boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)' }}
                    >
                      <div><strong>{task.description}</strong></div>
                      <div>Assigned to: {task.assignedTo}</div>
                      <div>Status: {task.status}</div>
                      <div>Due Date: {task.dueDate}</div>
                      <Progress percent={task.completionPercentage} />
                      <div>
                        {task.comments.map((comment, index) => (
                          <div key={index}><strong>{comment.user}:</strong> {comment.text}</div>
                        ))}
                      </div>
                      <Input
                        value={newComment}
                        onChange={(e) => setNewComment(e.target.value)}
                        placeholder="Add a comment"
                        style={{ marginTop: 8 }}
                      />
                      <Button onClick={() => handleCommentSubmit(task.id)} type="primary" style={{ marginTop: 4 }}>Submit</Button>
                    </li>
                  )}
                </Draggable>
              ))}
              {provided.placeholder}
            </ul>
          )}
        </Droppable>
      </DragDropContext>

      {selectedTask && (
        <Modal
          title="Task Details"
          visible={!!selectedTask}
          onCancel={() => setSelectedTask(null)}
          footer={null}
        >
          <div>Description: {selectedTask.description}</div>
          <div>Assigned to: {selectedTask.assignedTo}</div>
          <div>Status: {selectedTask.status}</div>
          <div>Due Date: {selectedTask.dueDate}</div>
          <Progress percent={selectedTask.completionPercentage} />
        </Modal>
      )}

      <ToastContainer />
    </div>
  );
};

export default ProjectOverviewContainer;


****File PATH: components/ChatContainer.js****

import React, { useState } from 'react';
import 'antd/dist/reset.css';
import { Layout, Menu, Avatar, Button, Badge, Input, List, Modal, Tooltip, Typography } from 'antd';
import { BellOutlined, UserOutlined, LikeOutlined, DislikeOutlined, SendOutlined, PushpinOutlined } from '@ant-design/icons';
import ReactECharts from 'echarts-for-react';

const { Header, Sider, Content } = Layout;
const { TextArea } = Input;
const { Text } = Typography;

const ChatContainer = () => {
  const dummyUser = {
    name: 'John Doe',
    avatar: 'https://via.placeholder.com/50',
  };

  const dummyProjectName = 'Project Alpha';

  const dummyNotifications = [
    { id: 1, message: 'New message from Alice', read: false },
    { id: 2, message: 'Project update available', read: false },
  ];

  const dummyFeedbackStats = {
    thumbsUp: 10,
    thumbsDown: 2,
  };

  const dummyMessages = [
    { id: 1, sender: 'Alice', content: 'Hello team!', timestamp: '2023-10-01T12:00:00Z', reactions: { thumbsUp: 2, heart: 1 }, thread: [] },
    { id: 2, sender: 'Bob', content: 'Hi Alice! How are you?', timestamp: '2023-10-01T12:05:00Z', reactions: { thumbsUp: 3, heart: 0 }, thread: [] },
  ];

  const dummyUsers = [
    { userId: 1, name: 'Alice' },
    { userId: 2, name: 'Bob' },
    { userId: 3, name: 'Charlie' },
  ];

  const activeProjects = [
    { id: 1, name: "Project Alpha", unreadMessages: 2 },
    { id: 2, name: "Project Beta", unreadMessages: 0 },
    { id: 3, name: "Project Gamma", unreadMessages: 1 },
    { id: 4, name: "Project Delta", unreadMessages: 3 }
  ];

  const [notifications, setNotifications] = useState(dummyNotifications);
  const [feedbackStats, setFeedbackStats] = useState(dummyFeedbackStats);
  const [showModal, setShowModal] = useState(false);
  const [showNotifications, setShowNotifications] = useState(false);
  const [feedbackComment, setFeedbackComment] = useState('');
  const [messages, setMessages] = useState(dummyMessages);
  const [newMessage, setNewMessage] = useState('');
  const [selectedThread, setSelectedThread] = useState({});
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedProject, setSelectedProject] = useState(null);
  const [pinnedProjects, setPinnedProjects] = useState([]);

  const handleFeedback = (type) => {
    if (type === 'up') {
      setFeedbackStats((prev) => ({ ...prev, thumbsUp: prev.thumbsUp + 1 }));
    } else {
      setFeedbackStats((prev) => ({ ...prev, thumbsDown: prev.thumbsDown + 1 }));
    }
    setShowModal(true);
  };

  const submitFeedback = () => {
    console.log('Feedback submitted:', feedbackComment);
    setFeedbackComment('');
    setShowModal(false);
  };

  const toggleNotifications = () => {
    setShowNotifications(!showNotifications);
    if (!showNotifications) {
      setNotifications((prev) => prev.map((n) => ({ ...n, read: true })));
    }
  };

  const handleMessageSend = () => {
    const message = {
      id: messages.length + 1,
      sender: 'You',
      content: newMessage,
      timestamp: new Date().toISOString(),
      reactions: { thumbsUp: 0, heart: 0 },
      thread: [],
    };
    setMessages([...messages, message]);
    setNewMessage('');
  };

  const handleReact = (messageId, reactionType) => {
    const updatedMessages = messages.map(message => {
      if (message.id === messageId) {
        const updatedReactions = { ...message.reactions, [reactionType]: (message.reactions[reactionType] || 0) + 1 };
        return { ...message, reactions: updatedReactions };
      }
      return message;
    });
    setMessages(updatedMessages);
  };

  const handleThreadReply = (messageId) => {
    const threadContent = prompt('Reply to this thread:');
    if (threadContent) {
      const updatedMessages = messages.map(message => {
        if (message.id === messageId) {
          const newThread = { userId: 1, content: threadContent, timestamp: new Date().toISOString() };
          return { ...message, thread: [...message.thread, newThread] };
        }
        return message;
      });
      setMessages(updatedMessages);
    }
  };

  const handleProjectSelect = (projectId) => {
    setSelectedProject(projectId);
    logInteraction();
  };

  const handleSearchChange = (event) => {
    setSearchQuery(event.target.value);
  };

  const toggleFavorite = (projectId) => {
    setPinnedProjects((prev) => 
      prev.includes(projectId) ? prev.filter(id => id !== projectId) : [...prev, projectId]
    );
  };

  const logInteraction = () => {
    console.log(`User interacted with project ID: ${selectedProject}`);
  };

  const filteredProjects = activeProjects.filter(project => 
    project.name.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const sortedProjects = pinnedProjects.map(id => activeProjects.find(project => project.id === id))
    .concat(filteredProjects.filter(project => !pinnedProjects.includes(project.id)));

  const chartOption = {
    title: { text: 'Task Completion Rate' },
    tooltip: {},
    xAxis: {
      data: ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5'],
    },
    yAxis: {},
    series: [
      {
        name: 'Completion Rate',
        type: 'bar',
        data: [5, 20, 36, 10, 10],
      },
    ],
  };

  return (
    <Layout style={{ height: '100vh' }}>
      <Header style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
        <Text style={{ color: '#fff', fontSize: '24px' }}>{dummyProjectName}</Text>
        <div style={{ display: 'flex', alignItems: 'center' }}>
          <Avatar src={dummyUser.avatar} size="large" style={{ cursor: 'pointer' }} />
          <Text style={{ color: '#fff', marginLeft: '10px' }}>{dummyUser.name}</Text>
          <Badge count={notifications.filter(n => !n.read).length}>
            <Button type="text" icon={<BellOutlined />} onClick={toggleNotifications} />
          </Badge>
          {showNotifications && (
            <div style={{ position: 'absolute', right: '20px', top: '70px', width: '300px', backgroundColor: '#fff', boxShadow: '0 0 10px rgba(0,0,0,0.3)', zIndex: 1 }}>
              <List
                itemLayout="horizontal"
                dataSource={notifications}
                renderItem={item => (
                  <List.Item>
                    <List.Item.Meta title={item.message} description={item.read ? 'Read' : 'Unread'} />
                  </List.Item>
                )}
              />
            </div>
          )}
        </div>
        <div>
          <Button type="text" icon={<LikeOutlined />} onClick={() => handleFeedback('up')}>{feedbackStats.thumbsUp}</Button>
          <Button type="text" icon={<DislikeOutlined />} onClick={() => handleFeedback('down')}>{feedbackStats.thumbsDown}</Button>
          <Modal
            title="Submit Feedback"
            visible={showModal}
            onOk={submitFeedback}
            onCancel={() => setShowModal(false)}
          >
            <TextArea rows={4} value={feedbackComment} onChange={(e) => setFeedbackComment(e.target.value)} placeholder="Additional comments" />
          </Modal>
        </div>
      </Header>
      <Layout>
        <Sider width={300} style={{ background: '#fff', borderRight: '1px solid #f0f0f0' }}>
          <Input
            placeholder="Search Projects"
            value={searchQuery}
            onChange={handleSearchChange}
            style={{ margin: '16px' }}
          />
          <Menu
            mode="inline"
            style={{ height: '100%', borderRight: 0 }}
          >
            {sortedProjects.map(project => (
              <Menu.Item key={project.id} style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Tooltip title={project.name}>
                  <span onClick={() => handleProjectSelect(project.id)} style={{ flex: 1, cursor: 'pointer' }}>{project.name}</span>
                </Tooltip>
                {project.unreadMessages > 0 && <Badge count={project.unreadMessages} />}
                <Button type="link" onClick={(e) => { e.stopPropagation(); toggleFavorite(project.id); }}>
                  <PushpinOutlined rotate={pinnedProjects.includes(project.id) ? 0 : 45} />
                </Button>
              </Menu.Item>
            ))}
          </Menu>
        </Sider>
        <Layout style={{ padding: '24px' }}>
          <Content style={{ overflow: 'auto', background: '#fff', padding: '24px' }}>
            <List
              dataSource={messages}
              renderItem={message => (
                <List.Item key={message.id}>
                  <List.Item.Meta
                    title={<span><strong>{message.sender}</strong> <span style={{ fontSize: '12px', color: '#888' }}>{new Date(message.timestamp).toLocaleString()}</span></span>}
                    description={
                      <div>
                        <p>{message.content}</p>
                        <div>
                          <Button type="link" onClick={() => handleReact(message.id, 'thumbsUp')}>👍 {message.reactions.thumbsUp || 0}</Button>
                          <Button type="link" onClick={() => handleReact(message.id, 'heart')}>❤️ {message.reactions.heart || 0}</Button>
                          <Button type="link" onClick={() => handleThreadReply(message.id)}>Reply</Button>
                        </div>
                        {message.thread.length > 0 && (
                          <List
                            dataSource={message.thread}
                            renderItem={reply => (
                              <List.Item>
                                <List.Item.Meta
                                  title={<span><strong>{dummyUsers.find(user => user.userId === reply.userId).name}</strong> <span style={{ fontSize: '12px', color: '#888' }}>{new Date(reply.timestamp).toLocaleString()}</span></span>}
                                  description={reply.content}
                                />
                              </List.Item>
                            )}
                          />
                        )}
                      </div>
                    }
                  />
                </List.Item>
              )}
            />
            <div style={{ display: 'flex', alignItems: 'center', marginTop: '20px' }}>
              <Input
                placeholder="Type your message..."
                value={newMessage}
                onChange={(e) => setNewMessage(e.target.value)}
                style={{ marginRight: '10px' }}
              />
              <Button type="primary" icon={<SendOutlined />} onClick={handleMessageSend}>Send</Button>
            </div>
          </Content>
        </Layout>
      </Layout>
    </Layout>
  );
};

export default ChatContainer;


****File PATH: components/TeamProfilesContainer.js****

import React, { useState, useEffect } from 'react';
import ReactECharts from 'echarts-for-react';
import { Input, Select, Button, Modal, Badge, Tooltip, Progress } from 'antd';
import "antd/dist/reset.css";

const { Option } = Select;

const TeamProfilesContainer = () => {
    const [profiles, setProfiles] = useState([]);
    const [endorsements, setEndorsements] = useState({});
    const [showModal, setShowModal] = useState({ isOpen: false, profileId: null });
    const [notifications, setNotifications] = useState([]);
    const [searchTerm, setSearchTerm] = useState('');
    const [selectedRole, setSelectedRole] = useState(null);
    const [selectedSkill, setSelectedSkill] = useState(null);
    const [selectedWorkload, setSelectedWorkload] = useState(null);
    const [filteredProfiles, setFilteredProfiles] = useState([]);
    const [nominations, setNominations] = useState({});

    const dummyProfiles = [
        {
            id: '1',
            name: 'John Doe',
            role: 'Software Engineer',
            skills: ['JavaScript', 'React', 'Node.js'],
            workload: 75,
            performanceMetrics: {
                tasksCompleted: 20,
                averageCompletionTime: 5,
            },
            badges: ['Best Performer', 'Team Player'],
        },
        {
            id: '2',
            name: 'Jane Smith',
            role: 'Project Manager',
            skills: ['Leadership', 'Communication'],
            workload: 50,
            performanceMetrics: {
                tasksCompleted: 15,
                averageCompletionTime: 7,
            },
            badges: ['Top Manager'],
        },
    ];

    useEffect(() => {
        setProfiles(dummyProfiles);
        setFilteredProfiles(dummyProfiles);
    }, []);

    useEffect(() => {
        const filterProfiles = () => {
            return profiles.filter(member => {
                const matchesSearch = member.name.toLowerCase().includes(searchTerm.toLowerCase());
                const matchesRole = selectedRole ? member.role === selectedRole : true;
                const matchesSkill = selectedSkill ? member.skills.includes(selectedSkill) : true;
                const matchesWorkload = selectedWorkload ? member.workload === selectedWorkload : true;
                return matchesSearch && matchesRole && matchesSkill && matchesWorkload;
            });
        };
        setFilteredProfiles(filterProfiles());
    }, [searchTerm, selectedRole, selectedSkill, selectedWorkload, profiles]);

    const handleEndorse = (profileId, skill) => {
        setEndorsements(prev => {
            const updated = { ...prev };
            if (!updated[profileId]) updated[profileId] = [];
            if (!updated[profileId].includes(skill)) {
                updated[profileId].push(skill);
                setNotifications(prev => [...prev, `Endorsed ${skill} for ${profiles.find(p => p.id === profileId).name}`]);
            }
            return updated;
        });
    };

    const handleDelete = (profileId) => {
        if (window.confirm('Are you sure you want to delete this profile?')) {
            const profileName = profiles.find(p => p.id === profileId).name;
            setProfiles(prev => prev.filter(profile => profile.id !== profileId));
            setFilteredProfiles(prev => prev.filter(profile => profile.id !== profileId));
            setNotifications(prev => [...prev, `Deleted profile of ${profileName}`]);
        }
    };

    const handleSearchChange = (e) => setSearchTerm(e.target.value);
    const handleRoleChange = (value) => setSelectedRole(value);
    const handleSkillChange = (value) => setSelectedSkill(value);
    const handleWorkloadChange = (value) => setSelectedWorkload(value);

    const roleOptions = [...new Set(profiles.map(member => member.role))];
    const skillOptions = [...new Set(profiles.flatMap(member => member.skills))];
    const workloadOptions = [...new Set(profiles.map(member => member.workload))];

    const getOption = (profile) => ({
        title: {
            text: `Performance Metrics for ${profile.name}`,
        },
        tooltip: {},
        xAxis: {
            type: 'category',
            data: ['Tasks Completed', 'Avg Completion Time'],
        },
        yAxis: {
            type: 'value',
        },
        series: [{
            name: 'Metrics',
            type: 'bar',
            data: [profile.performanceMetrics.tasksCompleted, profile.performanceMetrics.averageCompletionTime],
        }],
    });

    return (
        <div style={{ display: 'flex', flexDirection: 'column', height: '100vh', padding: '40px', boxSizing: 'border-box', backgroundColor: '#f0f2f5' }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '30px' }}>
                <Input
                    placeholder="Search by name"
                    value={searchTerm}
                    onChange={handleSearchChange}
                    style={{ width: '300px' }}
                />
                <div style={{ display: 'flex', gap: '20px' }}>
                    <Select placeholder="Select Role" style={{ width: '200px' }} onChange={handleRoleChange} allowClear>
                        {roleOptions.map(role => <Option key={role} value={role}>{role}</Option>)}
                    </Select>
                    <Select placeholder="Select Skill" style={{ width: '200px' }} onChange={handleSkillChange} allowClear>
                        {skillOptions.map(skill => <Option key={skill} value={skill}>{skill}</Option>)}
                    </Select>
                    <Select placeholder="Select Workload" style={{ width: '200px' }} onChange={handleWorkloadChange} allowClear>
                        {workloadOptions.map(workload => <Option key={workload} value={workload}>{workload}</Option>)}
                    </Select>
                </div>
            </div>
            <div style={{ flex: 1, overflowY: 'auto' }}>
                {filteredProfiles.map(profile => (
                    <div key={profile.id} style={{ border: '1px solid #d9d9d9', marginBottom: '20px', padding: '20px', borderRadius: '10px', backgroundColor: '#fff', boxShadow: '0 2px 8px rgba(0, 0, 0, 0.1)' }}>
                        <h2>{profile.name}</h2>
                        <p><strong>Role:</strong> {profile.role}</p>
                        <div>
                            {profile.skills.map((skill, index) => (
                                <div key={index} style={{ marginBottom: '10px' }}>
                                    <Tooltip title={`Endorse ${skill}`}>
                                        <Button type="primary" shape="round" onClick={() => handleEndorse(profile.id, skill)}>{skill}</Button>
                                    </Tooltip>
                                    <Badge count={endorsements[profile.id] ? endorsements[profile.id].filter(e => e === skill).length : 0} style={{ backgroundColor: '#52c41a', marginLeft: '10px' }} />
                                </div>
                            ))}
                        </div>
                        <Progress percent={profile.workload} showInfo={false} strokeColor={{ '0%': '#108ee9', '100%': '#87d068' }} />
                        <div style={{ marginTop: '20px', display: 'flex', gap: '15px' }}>
                            <Button type="primary" onClick={() => setShowModal({ isOpen: true, profileId: profile.id })}>View Performance</Button>
                            <Button type="danger" onClick={() => handleDelete(profile.id)}>Delete</Button>
                        </div>
                        <div style={{ marginTop: '10px' }}>
                            {profile.badges.map((badge, index) => (
                                <Tooltip title={`Details about ${badge}`} key={index}>
                                    <Badge color="#108ee9" text={badge} style={{ marginRight: '10px', cursor: 'pointer' }} />
                                </Tooltip>
                            ))}
                        </div>
                    </div>
                ))}
            </div>
            <Modal
                title="Performance Metrics"
                visible={showModal.isOpen}
                onCancel={() => setShowModal({ isOpen: false, profileId: null })}
                footer={null}
            >
                {showModal.isOpen && (
                    <ReactECharts option={getOption(profiles.find(p => p.id === showModal.profileId))} style={{ height: '400px' }} />
                )}
            </Modal>
            <div style={{
                position: 'fixed', bottom: '20px', right: '20px', width: '300px', maxHeight: '300px', overflow: 'auto',
                background: '#fff', padding: '10px', borderRadius: '5px', boxShadow: '0 0 10px rgba(0,0,0,0.1)'
            }}>
                {notifications.map((notification, index) => (
                    <div key={index} style={{ marginBottom: '5px', fontSize: '14px' }}>{notification}</div>
                ))}
            </div>
        </div>
    );
};

export default TeamProfilesContainer;


****File PATH: PerformanceDashboard.js****

import React, { useState, useEffect } from 'react';
import ReactECharts from 'echarts-for-react';
import { Modal, Button, Input, Rate, Select, notification, Card, Row, Col, Tooltip } from 'antd';
import { saveAs } from 'file-saver';
import { Parser } from 'json2csv';
import "antd/dist/reset.css";

const { Option } = Select;

// Dummy data for productivity trends
const dummyProductivityData = [
  { date: '2023-01-01', value: 10 },
  { date: '2023-01-02', value: 15 },
  { date: '2023-01-03', value: 12 },
  { date: '2023-01-04', value: 20 },
  { date: '2023-01-05', value: 18 },
];

const dummyGoals = [
  { description: 'Increase output', target: 25, progress: 15 },
];

// PerformanceDashboard component
const PerformanceDashboard = () => {
  const [feedbackVisible, setFeedbackVisible] = useState(false);
  const [feedback, setFeedback] = useState({ comment: '', rating: 0 });
  const [goal, setGoal] = useState({ description: '', target: 0 });
  const [goalProgress, setGoalProgress] = useState(dummyGoals[0]);
  const [performanceData, setPerformanceData] = useState(dummyProductivityData);
  const [selectedData, setSelectedData] = useState([true]);
  const [dummyData, setDummyData] = useState([]);

  useEffect(() => {
    setDummyData(dummyProductivityData);
  }, []);

  const handleFeedbackChange = (e) => {
    setFeedback({ ...feedback, [e.target.name]: e.target.value });
  };

  const handleRatingChange = (value) => {
    setFeedback({ ...feedback, rating: value });
  };

  const submitFeedback = () => {
    notification.success({ message: 'Feedback Submitted!', description: `Comment: ${feedback.comment}, Rating: ${feedback.rating}` });
    setFeedbackVisible(false);
    setFeedback({ comment: '', rating: 0 });
  };

  const toggleDataSet = () => {
    setSelectedData([!selectedData[0]]);
  };

  const setGoalHandler = () => {
    setGoalProgress({ ...goalProgress, description: goal.description, target: goal.target });
    setGoal({ description: '', target: 0 });
    notification.success({ message: 'Goal Set!', description: `Goal: ${goal.description}, Target: ${goal.target}` });
  };

  const getOption = () => ({
    title: { text: 'Productivity Trends' },
    tooltip: { trigger: 'axis' },
    xAxis: {
      type: 'category',
      data: dummyProductivityData.map(item => item.date),
    },
    yAxis: {
      type: 'value',
    },
    series: [
      {
        name: 'Productivity',
        type: 'line',
        data: dummyProductivityData.map(item => item.value),
        itemStyle: { color: selectedData[0] ? '#5470C6' : '#FF0000' },
      },
    ],
  });

  const exportData = () => {
    const csvData = [{ Metric: 'Completed Tasks', Value: 75 }];
    const json2csvParser = new Parser();
    const csv = json2csvParser.parse(csvData);
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    saveAs(blob, 'kpi_data.csv');
  };

  return (
    <div style={{ padding: '40px', backgroundColor: '#f0f2f5', minHeight: '100vh' }}>
      <Row gutter={16}>
        <Col span={24}>
          <Card title="Performance Dashboard" bordered={false} style={{ marginBottom: '20px' }}>
            <Row gutter={16}>
              <Col span={12}>
                <Card title="Performance Metrics" bordered={false}>
                  <Button type="primary" onClick={() => setFeedbackVisible(true)} style={{ margin: '10px' }}>Give Feedback</Button>
                  <Button type="default" onClick={toggleDataSet} style={{ margin: '10px' }}>Toggle Data Set</Button>
                  <div style={{ marginBottom: '20px' }}>
                    <Input placeholder="Goal Description" value={goal.description} onChange={(e) => setGoal({ ...goal, description: e.target.value })} style={{ marginBottom: '10px' }} />
                    <Input placeholder="Goal Target" type="number" value={goal.target} onChange={(e) => setGoal({ ...goal, target: parseInt(e.target.value) })} style={{ marginBottom: '10px' }} />
                    <Button type="primary" onClick={setGoalHandler}>Set Goal</Button>
                  </div>
                  <ReactECharts option={getOption()} style={{ height: '300px', width: '100%' }} />
                  <Button type="dashed" onClick={exportData} style={{ marginTop: '20px' }}>Export Data</Button>
                </Card>
              </Col>
            </Row>
          </Card>
        </Col>
      </Row>

      <Modal
        title="User Feedback"
        visible={feedbackVisible}
        onOk={submitFeedback}
        onCancel={() => setFeedbackVisible(false)}
      >
        <Input placeholder="Your feedback..." name="comment" value={feedback.comment} onChange={handleFeedbackChange} style={{ marginBottom: '10px' }} />
        <Rate value={feedback.rating} onChange={handleRatingChange} />
      </Modal>
    </div>
  );
};

export default PerformanceDashboard;
