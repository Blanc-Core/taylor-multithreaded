

****File PATH: components/TaskManagerContainer.js****

import React, { useState, useEffect } from 'react';
import { DndProvider, useDrag, useDrop } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import { Form, Input, Select, Button, Progress, Card, Typography, Layout, Row, Col } from 'antd';
import ReactECharts from 'echarts-for-react';
import 'antd/dist/reset.css';

const { Option } = Select;
const { Title } = Typography;
const { Header, Content } = Layout;

const tasksData = [
  { id: 1, name: "Design Landing Page", assignee: "John Doe", dueDate: "2023-10-15", status: "in progress", priority: "high", progress: 75, comments: [] },
  { id: 2, name: "Develop API", assignee: "Jane Smith", dueDate: "2023-10-20", status: "pending", priority: "medium", progress: 20, comments: [] },
  { id: 3, name: "Write Documentation", assignee: "Alice Johnson", dueDate: "2023-10-25", status: "completed", priority: "low", progress: 100, comments: [] }
];

const TaskItem = ({ task, index, moveTask }) => {
  const [, ref] = useDrag({
    type: 'TASK',
    item: { index },
  });

  const [, drop] = useDrop({
    accept: 'TASK',
    hover(item) {
      if (item.index !== index) {
        moveTask(item.index, index);
        item.index = index;
      }
    },
  });

  return (
    <Card ref={node => ref(drop(node))} style={{ marginBottom: '16px' }}>
      <Title level={4}>{task.name} (Assigned to: {task.assignee})</Title>
      <p>Due Date: {task.dueDate}</p>
      <p>Status: {task.status}</p>
      <p>Priority: {task.priority}</p>
      <Progress percent={task.progress} />
    </Card>
  );
};

const TaskList = () => {
  const [tasks, setTasks] = useState(tasksData);

  const moveTask = (fromIndex, toIndex) => {
    const updatedTasks = [...tasks];
    const [movedTask] = updatedTasks.splice(fromIndex, 1);
    updatedTasks.splice(toIndex, 0, movedTask);
    setTasks(updatedTasks);
  };

  return (
    <DndProvider backend={HTML5Backend}>
      <div style={{ maxWidth: '1200px', margin: 'auto' }}>
        <Title level={2}>Task List</Title>
        {tasks.map((task, index) => (
          <TaskItem key={task.id} index={index} task={task} moveTask={moveTask} />
        ))}
      </div>
    </DndProvider>
  );
};

const TaskForm = () => {
  const [form] = Form.useForm();
  const [tasks, setTasks] = useState([]);

  const assignees = ['Alice', 'Bob', 'Charlie'];
  const priorities = ['High', 'Medium', 'Low'];

  const handleSubmit = (values) => {
    const newTask = {
      taskName: values.taskName,
      description: values.description,
      assignee: values.assignee,
      deadline: values.deadline,
      priority: values.priority,
      completed: false,
    };
    setTasks([...tasks, newTask]);
    form.resetFields();
  };

  const chartOption = {
    title: { text: 'Task Overview' },
    tooltip: {},
    legend: { data: ['Completed', 'Pending'] },
    xAxis: {
      data: ['Tasks'],
    },
    yAxis: {},
    series: [{
      name: 'Completed',
      type: 'bar',
      data: [tasks.filter(task => task.completed).length],
    }, {
      name: 'Pending',
      type: 'bar',
      data: [tasks.length - tasks.filter(task => task.completed).length],
    }],
  };

  return (
    <div>
      <Form form={form} onFinish={handleSubmit} layout="vertical" style={{ maxWidth: '800px', margin: 'auto' }}>
        <Form.Item name="taskName" rules={[{ required: true, message: 'Please enter the task name' }]}>
          <Input placeholder="Task Name" />
        </Form.Item>
        <Form.Item name="description" rules={[{ required: true, message: 'Please enter the description' }]}>
          <Input.TextArea placeholder="Description" />
        </Form.Item>
        <Form.Item name="assignee" rules={[{ required: true, message: 'Please select an assignee' }]}>
          <Select placeholder="Select Assignee">
            {assignees.map((person, index) => (
              <Option key={index} value={person}>{person}</Option>
            ))}
          </Select>
        </Form.Item>
        <Form.Item name="deadline" rules={[{ required: true, message: 'Please select the deadline' }]}>
          <Input type="date" />
        </Form.Item>
        <Form.Item name="priority">
          <Select defaultValue="Medium">
            {priorities.map((level, index) => (
              <Option key={index} value={level}>{level}</Option>
            ))}
          </Select>
        </Form.Item>
        <Form.Item>
          <Button type="primary" htmlType="submit">Add Task</Button>
        </Form.Item>
      </Form>

      <ReactECharts option={chartOption} style={{ height: '400px', width: '100%' }} />
      
      <div>
        <Title level={3}>Task List</Title>
        <ul>
          {tasks.map((task, index) => (
            <li key={index}>
              <span>{task.taskName} - {task.assignee} - {task.deadline} - {task.priority}</span>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
};

const TaskProgressChart = () => {
  const [chartData, setChartData] = useState({
    completed: 0,
    inProgress: 0,
    pending: 0,
  });

  const updateChartData = () => {
    const totalTasks = 100;
    const completedTasks = Math.floor(Math.random() * totalTasks);
    const inProgressTasks = Math.floor(Math.random() * (totalTasks - completedTasks));
    const pendingTasks = totalTasks - completedTasks - inProgressTasks;

    setChartData({
      completed: completedTasks,
      inProgress: inProgressTasks,
      pending: pendingTasks,
    });
  };

  useEffect(() => {
    updateChartData();
    const interval = setInterval(() => {
      updateChartData();
    }, 5000);

    return () => clearInterval(interval);
  }, []);

  const getOption = () => {
    return {
      tooltip: {
        trigger: 'item',
        formatter: '{a} <br/>{b}: {c} ({d}%)',
      },
      series: [
        {
          name: 'Task Progress',
          type: 'pie',
          radius: '50%',
          data: [
            { value: chartData.completed, name: 'Completed' },
            { value: chartData.inProgress, name: 'In Progress' },
            { value: chartData.pending, name: 'Pending' },
          ],
          emphasis: {
            itemStyle: {
              shadowBlur: 10,
              shadowOffsetX: 0,
              shadowColor: 'rgba(0, 0, 0, 0.5)',
            },
          },
        },
      ],
    };
  };

  return (
    <div>
      <ReactECharts option={getOption()} style={{ height: '600px', width: '100%' }} />
    </div>
  );
};

const TaskManagerContainer = () => {
  return (
    <Layout style={{ minHeight: '100vh' }}>
      <Header style={{ background: '#fff', padding: '0 50px' }}>
        <Title>Task Manager</Title>
      </Header>
      <Content style={{ padding: '0 50px', marginTop: '20px' }}>
        <Row gutter={16}>
          <Col span={12}>
            <TaskForm />
          </Col>
          <Col span={12}>
            <TaskProgressChart />
          </Col>
        </Row>
        <TaskList />
      </Content>
    </Layout>
  );
};

export default TaskManagerContainer;


****File PATH: components/ComplianceReportContainer.js****

import React, { useState } from 'react';
import ReactECharts from 'echarts-for-react';
import Select from 'react-select';
import { Button, Input, Table, notification, Layout, Typography } from 'antd';
import { saveAs } from 'file-saver';
import "antd/dist/reset.css";

const { Header, Content } = Layout;
const { Title } = Typography;

// Dummy data for compliance items
const dummyData = [
  { id: 1, name: "Compliance Item 1", dueDate: "2023-10-15", status: "in-progress" },
  { id: 2, name: "Compliance Item 2", dueDate: "2023-10-20", status: "not-started" },
  { id: 3, name: "Compliance Item 3", dueDate: "2023-10-22", status: "completed" },
  { id: 4, name: "Compliance Item 4", dueDate: "2023-10-25", status: "not-started" }
];

// Dummy data for reports
const dummyReports = [
  { id: 1, name: 'Compliance Report Q1', date: '2023-01-15', status: 'Completed', description: 'Quarterly compliance report for Q1' },
  { id: 2, name: 'Compliance Report Q2', date: '2023-04-20', status: 'Completed', description: 'Quarterly compliance report for Q2' },
  { id: 3, name: 'Compliance Report Q3', date: '2023-07-25', status: 'In Progress', description: 'Quarterly compliance report for Q3' },
  { id: 4, name: 'Compliance Report Q4', date: '2023-10-10', status: 'Pending', description: 'Quarterly compliance report for Q4' }
];

// Project, metrics, and timeframe data for dynamic report generator
const projectsData = [
  { value: 'project1', label: 'Project 1' },
  { value: 'project2', label: 'Project 2' },
  { value: 'project3', label: 'Project 3' }
];

const metricsData = [
  { value: 'safety', label: 'Safety' },
  { value: 'quality', label: 'Quality' }
];

const timeframesData = [
  { value: 'daily', label: 'Daily' },
  { value: 'weekly', label: 'Weekly' },
  { value: 'monthly', label: 'Monthly' },
  { value: 'yearly', label: 'Yearly' }
];

const ComplianceReportContainer = () => {
  const [items, setItems] = useState(dummyData);
  const [reportHistory, setReportHistory] = useState([]);
  const [selectedProjects, setSelectedProjects] = useState([]);
  const [selectedMetrics, setSelectedMetrics] = useState([]);
  const [selectedTimeframe, setSelectedTimeframe] = useState(null);
  const [chartData, setChartData] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredReports, setFilteredReports] = useState(dummyReports);

  const handleStatusChange = id => {
    setItems(prevItems =>
      prevItems.map(item =>
        item.id === id ? { ...item, status: item.status === 'completed' ? 'in-progress' : 'completed' } : item
      )
    );
  };

  const handleSubmit = async e => {
    e.preventDefault();
    const newReport = {
      id: reportHistory.length + 1,
      projectType: selectedProjects.map(p => p.label).join(', '),
      date: new Date().toISOString().split('T')[0],
      metrics: selectedMetrics.map(m => m.label).join(', '),
      timeframe: selectedTimeframe?.label || ''
    };

    setReportHistory([...reportHistory, newReport]);
    notification.success({ message: 'Report generated successfully!' });
    fetchChartData();
  };

  const fetchChartData = () => {
    const dummyChartData = [
      { date: '2023-01', compliance: Math.random() * 100 },
      { date: '2023-02', compliance: Math.random() * 100 },
      { date: '2023-03', compliance: Math.random() * 100 },
      { date: '2023-04', compliance: Math.random() * 100 },
      { date: '2023-05', compliance: Math.random() * 100 }
    ];
    setChartData(dummyChartData);
  };

  const getOption = () => {
    return {
      title: { text: 'Compliance Data Over Time' },
      tooltip: {},
      xAxis: { type: 'category', data: chartData.map(data => data.date) },
      yAxis: { type: 'value' },
      series: [{ name: 'Compliance', type: 'line', data: chartData.map(data => data.compliance) }]
    };
  };

  const handleSearch = event => {
    const value = event.target.value;
    setSearchTerm(value);
    const filtered = dummyReports.filter(report => report.name.toLowerCase().includes(value.toLowerCase()));
    setFilteredReports(filtered);
  };

  const handleDownload = report => {
    const blob = new Blob([report.description], { type: 'text/plain;charset=utf-8' });
    saveAs(blob, `${report.name}.txt`);
  };

  const getChartOption = () => {
    return {
      title: { text: 'Report Generation Trends' },
      tooltip: {},
      xAxis: { data: ['Q1', 'Q2', 'Q3', 'Q4'] },
      yAxis: {},
      series: [{ name: 'Reports', type: 'bar', data: [1, 1, 1, 1] }]
    };
  };

  const columns = [
    { title: 'Report Name', dataIndex: 'name', key: 'name' },
    { title: 'Date Generated', dataIndex: 'date', key: 'date' },
    { title: 'Status', dataIndex: 'status', key: 'status' },
    { title: 'Description', dataIndex: 'description', key: 'description' },
    {
      title: 'Actions',
      key: 'actions',
      render: (_, report) => <Button onClick={() => handleDownload(report)}>Download</Button>
    }
  ];

  return (
    <Layout style={{ minHeight: '100vh', backgroundColor: '#f0f2f5' }}>
      <Header style={{ backgroundColor: '#001529', padding: '0 50px' }}>
        <Title style={{ color: '#fff', lineHeight: '64px' }}>Compliance Report Management</Title>
      </Header>
      <Content style={{ padding: '50px' }}>
        <div>
          <Title level={2}>Compliance Checklist</Title>
          <Select
            options={[
              { value: 'all', label: 'All' },
              { value: 'completed', label: 'Completed' },
              { value: 'in-progress', label: 'In Progress' }
            ]}
            defaultValue={{ value: 'all', label: 'All' }}
            onChange={e => handleStatusChange(e.value)}
          />
          <ul>
            {items.map(item => (
              <li key={item.id}>
                <span>{item.name} - Due: {item.dueDate} - Status: {item.status}</span>
                <Button type="link" onClick={() => handleStatusChange(item.id)}>
                  Mark as {item.status === 'completed' ? 'In Progress' : 'Completed'}
                </Button>
              </li>
            ))}
          </ul>
        </div>

        <div>
          <Title level={2}>Report Generator</Title>
          <form onSubmit={handleSubmit}>
            <Select
              isMulti
              options={projectsData}
              onChange={setSelectedProjects}
              placeholder="Select Projects"
              style={{ marginBottom: '10px', width: '300px' }}
            />
            <Select
              isMulti
              options={metricsData}
              onChange={setSelectedMetrics}
              placeholder="Select Metrics"
              style={{ marginBottom: '10px', width: '300px' }}
            />
            <Select
              options={timeframesData}
              onChange={setSelectedTimeframe}
              placeholder="Select Timeframe"
              style={{ marginBottom: '10px', width: '300px' }}
            />
            <Button type="primary" htmlType="submit">Generate Report</Button>
          </form>
        </div>

        <div>
          <Title level={2}>Report History</Title>
          <Input.Search
            value={searchTerm}
            onChange={handleSearch}
            placeholder="Search reports..."
            style={{ marginBottom: '20px', width: '300px' }}
          />
          <Table dataSource={filteredReports} columns={columns} rowKey="id" />
        </div>

        <div>
          <Title level={2}>Data Visualization</Title>
          <ReactECharts option={getOption()} style={{ height: '400px', width: '100%' }} />
          <ReactECharts option={getChartOption()} style={{ height: '400px', width: '100%' }} />
        </div>
      </Content>
    </Layout>
  );
};

export default ComplianceReportContainer;


****File PATH: components/BudgetTrackingPage.js****
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import ReactECharts from 'echarts-for-react';
import { Input, Button, Form, Select, DatePicker, Typography, Layout, Card, Space, Divider } from 'antd';
import jsPDF from 'jspdf';
import "antd/dist/reset.css";

const { Title, Text } = Typography;
const { Header, Content } = Layout;
const { Option } = Select;

// BudgetForm Component
const BudgetForm = ({ updateBudget }) => {
  const [expenseName, setExpenseName] = useState('');
  const [category, setCategory] = useState('');
  const [amount, setAmount] = useState('');
  const [date, setDate] = useState(null);
  const [categories] = useState(['Food', 'Transport', 'Utilities', 'Entertainment']);
  const [suggestions, setSuggestions] = useState([]);

  const handleCategoryChange = (value) => {
    setCategory(value);
    setSuggestions(categories.filter(cat => cat.toLowerCase().includes(value.toLowerCase())));
  };

  const handleSubmit = () => {
    if (!expenseName || !category || !amount || !date) {
      alert('All fields are required!');
      return;
    }
    if (isNaN(amount) || Number(amount) <= 0) {
      alert('Amount must be a positive number!');
      return;
    }

    const newEntry = {
      name: expenseName,
      category,
      amount: Number(amount),
      date: date.format('MM/DD/YYYY')
    };

    updateBudget(newEntry);
    setExpenseName('');
    setCategory('');
    setAmount('');
    setDate(null);
    setSuggestions([]);
  };

  return (
    <Card title="Add New Expense" bordered={false} style={{ marginBottom: '20px' }}>
      <Form layout="vertical" onFinish={handleSubmit}>
        <Form.Item label="Expense Name" required>
          <Input value={expenseName} onChange={(e) => setExpenseName(e.target.value)} />
        </Form.Item>
        <Form.Item label="Category" required>
          <Select
            showSearch
            value={category}
            onChange={handleCategoryChange}
            filterOption={false}
            notFoundContent={null}
          >
            {suggestions.map((suggestion, index) => (
              <Option key={index} value={suggestion}>{suggestion}</Option>
            ))}
          </Select>
        </Form.Item>
        <Form.Item label="Amount" required>
          <Input type="number" value={amount} onChange={(e) => setAmount(e.target.value)} />
        </Form.Item>
        <Form.Item label="Date" required>
          <DatePicker value={date} onChange={setDate} style={{ width: '100%' }} />
        </Form.Item>
        <Button type="primary" htmlType="submit">Submit</Button>
      </Form>
    </Card>
  );
};

// BudgetOverview Component
const BudgetOverview = ({ budgetEntries }) => {
  const totalBudget = 10000;
  const expenditures = budgetEntries.reduce((total, entry) => total + entry.amount, 0);
  const remainingBudget = totalBudget - expenditures;

  const generatePDF = () => {
    const doc = new jsPDF();
    doc.text("Budget Overview", 10, 10);
    doc.text(`Total Budget: $${totalBudget}`, 10, 20);
    doc.text(`Total Expenditures: $${expenditures}`, 10, 30);
    doc.text(`Remaining Budget: $${remainingBudget}`, 10, 40);
    budgetEntries.forEach((entry, index) => {
      doc.text(`${entry.name} - ${entry.category}: $${entry.amount}`, 10, 50 + (index * 10));
    });
    doc.save('budget_overview.pdf');
  };

  const categories = budgetEntries.reduce((acc, entry) => {
    const existingCategory = acc.find(cat => cat.name === entry.category);
    if (existingCategory) {
      existingCategory.value += entry.amount;
    } else {
      acc.push({ name: entry.category, value: entry.amount });
    }
    return acc;
  }, []);

  const getPieChartOption = () => ({
    title: { text: 'Expenditure Distribution', left: 'center' },
    tooltip: { trigger: 'item' },
    series: [
      {
        name: 'Categories',
        type: 'pie',
        radius: '50%',
        data: categories,
        emphasis: {
          itemStyle: {
            shadowBlur: 10,
            shadowOffsetX: 0,
            shadowColor: 'rgba(0, 0, 0, 0.5)',
          },
        },
      },
    ],
  });

  return (
    <Card title="Budget Overview" bordered={false} style={{ marginBottom: '20px' }}>
      <Space direction="vertical" size="middle" style={{ width: '100%' }}>
        <Text>Total Budget: ${totalBudget}</Text>
        <Text>Total Expenditures: ${expenditures}</Text>
        <Text>Remaining Budget: ${remainingBudget}</Text>
        <Button onClick={generatePDF}>Download Report</Button>
        <ReactECharts option={getPieChartOption()} style={{ height: '400px', width: '100%' }} />
      </Space>
    </Card>
  );
};

// BudgetVisualization Component
const BudgetVisualization = ({ budgetEntries }) => {
  const [chartType, setChartType] = useState('bar');
  const dummyData = {
    categories: budgetEntries.map(entry => ({ name: entry.category, value: entry.amount })),
    historicalBudgets: [
      { month: 'January', value: 1300 },
      { month: 'February', value: 1200 },
      { month: 'March', value: 1400 },
    ],
  };

  const getOption = () => {
    switch (chartType) {
      case 'pie':
        return {
          series: [{ type: 'pie', data: dummyData.categories }],
        };
      case 'line':
        return {
          xAxis: { type: 'category', data: dummyData.historicalBudgets.map(b => b.month) },
          yAxis: {},
          series: [{ type: 'line', data: dummyData.historicalBudgets.map(b => b.value) }],
        };
      default:
        return {
          xAxis: { type: 'category', data: dummyData.categories.map(c => c.name) },
          yAxis: {},
          series: [{ type: 'bar', data: dummyData.categories.map(c => c.value) }],
        };
    }
  };

  return (
    <Card title="Budget Visualization" bordered={false}>
      <Space direction="vertical" size="middle" style={{ width: '100%' }}>
        <Select value={chartType} onChange={setChartType}>
          <Option value="bar">Bar Chart</Option>
          <Option value="pie">Pie Chart</Option>
          <Option value="line">Line Graph</Option>
        </Select>
        <ReactECharts option={getOption()} style={{ height: '400px', width: '100%' }} />
      </Space>
    </Card>
  );
};

// Main BudgetTrackingPage Component
const BudgetTrackingPage = () => {
  const [budgetEntries, setBudgetEntries] = useState([]);
  const navigate = useNavigate();

  const updateBudget = (newEntry) => {
    setBudgetEntries([...budgetEntries, newEntry]);
  };

  return (
    <Layout style={{ width: '1920px', height: '1080px', background: '#f0f2f5' }}>
      <Header style={{ background: '#001529', padding: '0 20px' }}>
        <Title level={2} style={{ color: '#fff', margin: '16px 0' }}>Budget Tracking</Title>
        <Button type="primary" onClick={() => navigate('/home')}>Go to Home</Button>
      </Header>
      <Content style={{ padding: '20px' }}>
        <Space direction="vertical" size="large" style={{ width: '100%' }}>
          <BudgetForm updateBudget={updateBudget} />
          <BudgetOverview budgetEntries={budgetEntries} />
          <BudgetVisualization budgetEntries={budgetEntries} />
        </Space>
      </Content>
    </Layout>
  );
};

export default BudgetTrackingPage;


****File PATH: components/ExperimentalResults.js****

import React, { useState, useEffect } from 'react';
import ReactECharts from 'echarts-for-react';
import { useNavigate } from 'react-router-dom';
import { Button, Input, Select, Table, Form, DatePicker, Checkbox, InputNumber, notification } from 'antd';
import "antd/dist/reset.css";

const { Option } = Select;
const { TextArea } = Input;

const ExperimentalResults = () => {
    const navigate = useNavigate();
    const [results, setResults] = useState([]);
    const [feedback, setFeedback] = useState({ rating: 0, comment: '' });
    const [notifications, setNotifications] = useState([]);
    const [points, setPoints] = useState(0);
    const [searchTerm, setSearchTerm] = useState('');
    const [sortOrder, setSortOrder] = useState('asc');
    const [loading, setLoading] = useState(false);
    const [theme, setTheme] = useState('light');

    const dummyData = [
        { id: 1, name: "Experiment A", date: "2023-01-01", parameters: "pH: 7, Temp: 25", outcome: "Success", favorite: false },
        { id: 2, name: "Experiment B", date: "2023-01-02", parameters: "pH: 6, Temp: 30", outcome: "Failure", favorite: false },
        { id: 3, name: "Experiment C", date: "2023-01-03", parameters: "pH: 8, Temp: 22", outcome: "Success", favorite: false },
    ];

    useEffect(() => {
        setResults(dummyData);
    }, []);

    const handleSubmit = async (formData) => {
        setLoading(true);
        try {
            await new Promise((resolve) => setTimeout(resolve, 2000));
            setResults([...results, { ...formData, id: results.length + 1, favorite: false }]);
            notification.success({ message: 'Result added successfully!' });
        } catch {
            notification.error({ message: 'Submission failed' });
        } finally {
            setLoading(false);
        }
    };

    const toggleFavorite = (id) => {
        const updatedResults = results.map(result => 
            result.id === id ? { ...result, favorite: !result.favorite } : result
        );
        setResults(updatedResults);
    };

    const deleteResult = (id) => {
        const updatedResults = results.filter(result => result.id !== id);
        setResults(updatedResults);
    };

    const filteredResults = results.filter(result => 
        result.name.toLowerCase().includes(searchTerm.toLowerCase())
    );

    const sortedResults = [...filteredResults].sort((a, b) => 
        sortOrder === 'asc' ? new Date(a.date) - new Date(b.date) : new Date(b.date) - new Date(a.date)
    );

    const chartData = {
        xAxis: {
            type: 'category',
            data: sortedResults.map(result => result.name),
        },
        yAxis: {
            type: 'value'
        },
        series: [{
            data: sortedResults.map(result => result.favorite ? 1 : 0),
            type: 'bar'
        }]
    };

    const handleFeedbackChange = (name, value) => {
        setFeedback({ ...feedback, [name]: value });
    };

    const submitFeedback = () => {
        const newNotification = `Rating: ${feedback.rating}, Comment: ${feedback.comment}`;
        setNotifications([...notifications, newNotification]);
        setFeedback({ rating: 0, comment: '' });
        notification.success({ message: 'Feedback submitted successfully!' });
    };

    const toggleTheme = () => {
        setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');
    };

    return (
        <div style={{ padding: '20px', width: '800px', background: theme === 'light' ? '#fff' : '#333', color: theme === 'light' ? '#000' : '#fff' }}>
            <h1>Experimental Results Management</h1>
            <Button onClick={toggleTheme} type="primary" style={{ marginBottom: '20px' }}>Toggle Theme</Button>
            <ResultsForm onSubmit={handleSubmit} loading={loading} />
            <Input
                placeholder="Search..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                style={{ marginBottom: '20px', width: '300px' }}
            />
            <Select onChange={(value) => setSortOrder(value)} value={sortOrder} style={{ marginBottom: '20px', width: '200px' }}>
                <Option value="asc">Sort by Date Ascending</Option>
                <Option value="desc">Sort by Date Descending</Option>
            </Select>
            <ResultsList results={sortedResults} onToggleFavorite={toggleFavorite} onDelete={deleteResult} />
            <ReactECharts option={chartData} style={{ height: '400px', marginTop: '20px' }} />
            <div style={{ marginTop: '20px' }}>
                <h4>Feedback</h4>
                <InputNumber min={1} max={5} placeholder="Rating (1-5)" value={feedback.rating} onChange={(value) => handleFeedbackChange('rating', value)} style={{ marginBottom: '10px', width: '200px' }} />
                <TextArea placeholder="Comment" value={feedback.comment} onChange={(e) => handleFeedbackChange('comment', e.target.value)} rows={4} style={{ marginBottom: '10px' }} />
                <Button onClick={submitFeedback} type="primary">Submit Feedback</Button>
                <h4>Notifications</h4>
                {notifications.map((note, index) => (
                    <div key={index}>{note}</div>
                ))}
            </div>
        </div>
    );
};

const ResultsForm = ({ onSubmit, loading }) => {
    const [formData, setFormData] = useState({
        experimentName: '',
        date: null,
        parameters: [],
        outcome: ''
    });

    const [errors, setErrors] = useState({});
    const paramsOptions = ['pH: 7', 'Temp: 25', 'pH: 6', 'Temp: 30'];

    const validate = (data) => {
        const errors = {};
        if (!data.experimentName) errors.experimentName = 'Experiment Name is required';
        if (!data.date) errors.date = 'Date is required';
        else if (data.date && data.date > new Date()) errors.date = 'Date cannot be in the future';
        if (data.parameters.length === 0) errors.parameters = 'At least one parameter must be selected';
        return errors;
    };

    const handleChange = (changedValues) => {
        setFormData(prevState => ({ ...prevState, ...changedValues }));
    };

    const handleSubmit = async () => {
        const validationErrors = validate(formData);
        if (Object.keys(validationErrors).length) {
            setErrors(validationErrors);
            return;
        }
        await onSubmit(formData);
        setFormData({ experimentName: '', date: null, parameters: [], outcome: '' });
        setErrors({});
    };

    return (
        <Form onFinish={handleSubmit} layout="vertical" style={{ padding: '10px', border: '1px solid #ccc', marginBottom: '20px' }}>
            <h2>Add New Result</h2>
            <Form.Item label="Experiment Name" validateStatus={errors.experimentName && 'error'} help={errors.experimentName}>
                <Input value={formData.experimentName} onChange={e => handleChange({ experimentName: e.target.value })} />
            </Form.Item>
            <Form.Item label="Date" validateStatus={errors.date && 'error'} help={errors.date}>
                <DatePicker value={formData.date} onChange={date => handleChange({ date })} style={{ width: '100%' }} />
            </Form.Item>
            <Form.Item label="Parameters" validateStatus={errors.parameters && 'error'} help={errors.parameters}>
                <Select mode="multiple" value={formData.parameters} onChange={value => handleChange({ parameters: value })}>
                    {paramsOptions.map(param => (
                        <Option key={param} value={param}>{param}</Option>
                    ))}
                </Select>
            </Form.Item>
            <Form.Item label="Outcome">
                <TextArea value={formData.outcome} onChange={e => handleChange({ outcome: e.target.value })} rows={3} />
            </Form.Item>
            <Form.Item>
                <Button type="primary" htmlType="submit" loading={loading}>
                    {loading ? 'Submitting...' : 'Submit'}
                </Button>
            </Form.Item>
        </Form>
    );
};

const ResultsList = ({ results, onToggleFavorite, onDelete }) => {
    const columns = [
        { title: 'Experiment Name', dataIndex: 'name', key: 'name' },
        { title: 'Date', dataIndex: 'date', key: 'date' },
        { title: 'Parameters', dataIndex: 'parameters', key: 'parameters' },
        { title: 'Outcome', dataIndex: 'outcome', key: 'outcome' },
        {
            title: 'Actions',
            key: 'actions',
            render: (_, record) => (
                <>
                    <Button onClick={() => onToggleFavorite(record.id)} type="link">
                        {record.favorite ? '★' : '☆'}
                    </Button>
                    <Button onClick={() => onDelete(record.id)} type="link" danger>
                        Delete
                    </Button>
                </>
            ),
        },
    ];

    return (
        <Table columns={columns} dataSource={results} rowKey="id" pagination={false} />
    );
};

export default ExperimentalResults;


****File PATH: components/DashboardContainer.js****

import React, { useState, useEffect } from 'react';
import ReactECharts from 'echarts-for-react';
import { Button, Modal, Select, Card, Col, Row, Typography, Badge, notification, Input } from 'antd';
import { useDrag, useDrop } from 'react-dnd';
import "antd/dist/reset.css";

const { Title } = Typography;

// Simulated data for demonstration
const dummyProjects = [
  {
    id: 1,
    name: 'Project Alpha',
    completion: 70,
    dueDate: '2023-09-30',
    status: 'In Progress',
    tasks: ['Task 1', 'Task 2', 'Task 3'],
  },
  {
    id: 2,
    name: 'Project Beta',
    completion: 30,
    dueDate: '2023-10-15',
    status: 'Not Started',
    tasks: ['Task 1', 'Task 2'],
  },
  {
    id: 3,
    name: 'Project Gamma',
    completion: 90,
    dueDate: '2023-08-20',
    status: 'Completed',
    tasks: ['Task 1', 'Task 2', 'Task 3', 'Task 4'],
  },
];

// Project Card Component
const ProjectCard = ({ project, index, moveProject, editProject }) => {
  const [, ref] = useDrag(() => ({
    type: 'PROJECT',
    item: { index },
  }));

  const [, drop] = useDrop(() => ({
    accept: 'PROJECT',
    hover(item) {
      if (item.index !== index) {
        moveProject(item.index, index);
        item.index = index;
      }
    },
  }));

  return (
    <Card
      ref={(node) => ref(drop(node))}
      style={{ margin: '10px', width: 300 }}
      hoverable
      title={<a onClick={() => editProject(project.id)}>{project.name}</a>}
    >
      <ReactECharts
        option={{
          series: [{
            type: 'pie',
            radius: '50%',
            data: [
              { value: project.completion, name: 'Completed' },
              { value: 100 - project.completion, name: 'Remaining' }
            ],
            emphasis: {
              itemStyle: {
                shadowBlur: 10,
                shadowOffsetX: 0,
                shadowColor: 'rgba(0, 0, 0, 0.5)',
              },
            },
          }],
        }}
        style={{ height: 150 }}
      />
      <p>Status: {project.status}</p>
      <p>Due Date: {project.dueDate}</p>
      <p>Completion: {project.completion}%</p>
      <p>Tasks: {project.tasks.join(', ')}</p>
    </Card>
  );
};

// Project List Component
const ProjectList = () => {
  const [projects, setProjects] = useState(dummyProjects);

  const moveProject = (fromIndex, toIndex) => {
    const updatedProjects = [...projects];
    const [movedProject] = updatedProjects.splice(fromIndex, 1);
    updatedProjects.splice(toIndex, 0, movedProject);
    setProjects(updatedProjects);
  };

  const editProject = (id) => {
    const projectName = prompt('Edit project name:');
    if (projectName) {
      setProjects((prevProjects) =>
        prevProjects.map((project) => (project.id === id ? { ...project, name: projectName } : project))
      );
    }
  };

  return (
    <Row gutter={[16, 16]} style={{ padding: '20px' }}>
      {projects.map((project, index) => (
        <Col key={project.id}>
          <ProjectCard project={project} index={index} moveProject={moveProject} editProject={editProject} />
        </Col>
      ))}
    </Row>
  );
};

// Compliance Status Component
const ComplianceStatus = () => {
  const [complianceData, setComplianceData] = useState({
    safety: [70, 80, 90],
    ethics: [85, 75, 95],
    regulations: [60, 80, 100],
  });

  const [historyData, setHistoryData] = useState({
    safety: [
      { date: '2023-01-01', score: 70 },
      { date: '2023-02-01', score: 80 },
      { date: '2023-03-01', score: 90 },
    ],
    ethics: [
      { date: '2023-01-01', score: 85 },
      { date: '2023-02-01', score: 75 },
      { date: '2023-03-01', score: 95 },
    ],
    regulations: [
      { date: '2023-01-01', score: 60 },
      { date: '2023-02-01', score: 80 },
      { date: '2023-03-01', score: 100 },
    ],
  });

  const getRadarOption = () => {
    return {
      title: {
        text: 'Compliance Status',
      },
      tooltip: {
        trigger: 'item',
      },
      radar: {
        indicator: [
          { name: 'Safety', max: 100 },
          { name: 'Ethics', max: 100 },
          { name: 'Regulations', max: 100 },
        ],
      },
      series: [
        {
          type: 'radar',
          data: [
            {
              value: complianceData.safety,
              name: 'Project 1',
              itemStyle: {
                color: complianceData.safety[0] > 75 ? 'green' : complianceData.safety[0] > 50 ? 'yellow' : 'red',
              },
            },
            {
              value: complianceData.ethics,
              name: 'Project 2',
              itemStyle: {
                color: complianceData.ethics[0] > 75 ? 'green' : complianceData.ethics[0] > 50 ? 'yellow' : 'red',
              },
            },
            {
              value: complianceData.regulations,
              name: 'Project 3',
              itemStyle: {
                color: complianceData.regulations[0] > 75 ? 'green' : complianceData.regulations[0] > 50 ? 'yellow' : 'red',
              },
            },
          ],
          areaStyle: {},
        },
      ],
    };
  };

  const handleChartClick = (params) => {
    const chartName = params.name.toLowerCase();
    alert(`Compliance History for ${chartName.charAt(0).toUpperCase() + chartName.slice(1)}:\n` +
      historyData[chartName].map(item => `${item.date}: ${item.score}`).join('\n'));
  };

  return (
    <div style={{ width: '1920px', height: '500px' }}>
      <ReactECharts
        option={getRadarOption()}
        onEvents={{ click: handleChartClick }}
        style={{ height: '100%', width: '100%' }}
      />
    </div>
  );
};

// Budget Overview Component
const BudgetOverview = () => {
  const [modalVisible, setModalVisible] = useState(false);
  const [selectedProject, setSelectedProject] = useState(null);
  const [feedbackVisible, setFeedbackVisible] = useState(false);
  const [notificationCount, setNotificationCount] = useState(0);

  const dummyData = [
    { projectName: "Project A", budget: 50000, spent: 30000 },
    { projectName: "Project B", budget: 70000, spent: 90000 },
    { projectName: "Project C", budget: 30000, spent: 20000 },
    { projectName: "Project D", budget: 60000, spent: 50000 },
  ];

  const onSegmentClick = (params) => {
    const project = dummyData[params.dataIndex];
    setSelectedProject(project);
    setModalVisible(true);
  };

  const getTooltipContent = (params) => {
    const project = dummyData[params.dataIndex];
    return `${project.projectName}<br/>Spent: $${project.spent} / Budget: $${project.budget}`;
  };

  const getOption = () => {
    const seriesData = dummyData.map(item => ({
      name: item.projectName,
      value: item.budget,
      itemStyle: {
        color: item.spent > item.budget ? 'red' : 'green'
      }
    }));

    return {
      tooltip: {
        formatter: getTooltipContent
      },
      series: [{
        type: 'treemap',
        data: seriesData,
        label: {
          show: true,
          formatter: '{b}'
        },
        emphasis: {
          label: {
            show: true
          }
        }
      }]
    };
  };

  const handleFeedbackSubmit = () => {
    setFeedbackVisible(false);
    notification.success({ message: 'Feedback Submitted', description: 'Thank you for your feedback!' });
  };

  const handleNotificationClick = () => {
    setNotificationCount(0);
  };

  return (
    <div>
      <div style={{ position: 'absolute', top: 20, right: 20 }}>
        <Button onClick={handleNotificationClick}>
          Notifications {notificationCount > 0 && `(${notificationCount})`}
        </Button>
        <Button onClick={() => setFeedbackVisible(true)} style={{ marginLeft: 10 }}>
          Feedback
        </Button>
      </div>
      <ReactECharts
        option={getOption()}
        onEvents={{ click: onSegmentClick }}
        style={{ height: '80vh', width: '100%' }}
      />
      <Modal
        title="Project Details"
        visible={modalVisible}
        onCancel={() => setModalVisible(false)}
        footer={null}
      >
        {selectedProject && (
          <div>
            <h3>{selectedProject.projectName}</h3>
            <p>Budget: ${selectedProject.budget}</p>
            <p>Spent: ${selectedProject.spent}</p>
            <p>Status: {selectedProject.spent > selectedProject.budget ? 'Over Budget' : 'Under Budget'}</p>
          </div>
        )}
      </Modal>
      <Modal
        title="Feedback"
        visible={feedbackVisible}
        onCancel={() => setFeedbackVisible(false)}
        footer={[
          <Button key="submit" type="primary" onClick={handleFeedbackSubmit}>
            Submit
          </Button>,
        ]}
      >
        <Input.TextArea rows={4} placeholder="Let us know your thoughts on the budget allocation!" />
      </Modal>
    </div>
  );
};

// Notifications Component
const Notifications = () => {
  const [notifications, setNotifications] = useState([]);
  const [filteredNotifications, setFilteredNotifications] = useState([]);
  const [filterType, setFilterType] = useState('all');

  const dummyNotifications = [
    {
      id: '1',
      type: 'task',
      message: 'You have been assigned a new task: Update project documentation.',
      timestamp: '2023-10-01T12:00:00Z',
      isRead: false,
    },
    {
      id: '2',
      type: 'project update',
      message: 'Project Alpha has been updated. Check the latest changes.',
      timestamp: '2023-10-02T09:30:00Z',
      isRead: false,
    },
    {
      id: '3',
      type: 'compliance',
      message: 'Compliance alert: Please review the new guidelines.',
      timestamp: '2023-10-03T14:00:00Z',
      isRead: false,
    },
    {
      id: '4',
      type: 'budget',
      message: 'Budget report for Q3 is now available.',
      timestamp: '2023-10-04T11:15:00Z',
      isRead: false,
    },
  ];

  useEffect(() => {
    setNotifications(dummyNotifications);
    setFilteredNotifications(dummyNotifications);
  }, []);

  useEffect(() => {
    if (filterType === 'all') {
      setFilteredNotifications(notifications);
    } else {
      setFilteredNotifications(notifications.filter(notification => notification.type === filterType));
    }
  }, [filterType, notifications]);

  const markAsRead = (id) => {
    const updatedNotifications = notifications.map(notification => 
      notification.id === id ? { ...notification, isRead: true } : notification
    );
    setNotifications(updatedNotifications);
  };

  const dismissNotification = (id) => {
    const updatedNotifications = notifications.filter(notification => notification.id !== id);
    setNotifications(updatedNotifications);
  };

  const handleFilterChange = (value) => {
    setFilterType(value);
  };

  const getChartOptions = () => {
    const taskCount = notifications.filter(n => n.type === 'task').length;
    const projectUpdateCount = notifications.filter(n => n.type === 'project update').length;
    const complianceCount = notifications.filter(n => n.type === 'compliance').length;
    const budgetCount = notifications.filter(n => n.type === 'budget').length;

    return {
      title: { text: 'Notification Types' },
      tooltip: {},
      xAxis: {
        type: 'category',
        data: ['Tasks', 'Project Updates', 'Compliance', 'Budgets'],
      },
      yAxis: { type: 'value' },
      series: [{
        name: 'Count',
        type: 'bar',
        data: [taskCount, projectUpdateCount, complianceCount, budgetCount],
      }],
    };
  };

  return (
    <div style={{ width: '1920px', height: '500px', padding: '20px' }}>
      <Title level={2}>Notifications</Title>
      <Select defaultValue="all" onChange={handleFilterChange} style={{ width: 200, marginBottom: 20 }}>
        <Select.Option value="all">All</Select.Option>
        <Select.Option value="task">Tasks</Select.Option>
        <Select.Option value="project update">Project Updates</Select.Option>
        <Select.Option value="compliance">Compliance</Select.Option>
        <Select.Option value="budget">Budgets</Select.Option>
      </Select>
      <div>
        {filteredNotifications.length === 0 ? (
          <p>No notifications to display.</p>
        ) : (
          filteredNotifications.map(notification => (
            <Card key={notification.id} style={{ marginBottom: '10px' }}>
              <p>{notification.message}</p>
              <p>{new Date(notification.timestamp).toLocaleString()}</p>
              <Button type="link" onClick={() => markAsRead(notification.id)}>Mark as Read</Button>
              <Button type="link" onClick={() => dismissNotification(notification.id)}>Dismiss</Button>
            </Card>
          ))
        )}
      </div>
      <ReactECharts option={getChartOptions()} style={{ height: '400px', width: '100%' }} />
    </div>
  );
};

// Dashboard Container Component
const DashboardContainer = () => {
  return (
    <div style={{ width: '1920px', height: '1080px', display: 'flex', flexDirection: 'column', overflowY: 'auto' }}>
      <Title level={1}>Dashboard</Title>
      <ProjectList />
      <ComplianceStatus />
      <BudgetOverview />
      <Notifications />
    </div>
  );
};

export default DashboardContainer;
