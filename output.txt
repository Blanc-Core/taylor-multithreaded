

Node: Mentor Overview Page
Code: 
****File PATH: components/MentorDashboard.js****

import React, { useState, useEffect, createContext, useContext } from 'react';
import { Badge, Tooltip, Modal, Switch, Calendar, Tag, Rate, Input, Button, Layout, Row, Col, Card, Checkbox, Select } from 'antd';
import ReactECharts from 'echarts-for-react';
import 'antd/dist/reset.css';

// Create a Context for the global state
const GlobalContext = createContext();

const MentorDashboard = () => {
  const [availability, setAvailability] = useState([
    { status: 'available', time: '09:00 - 10:00' },
    { status: 'busy', time: '10:00 - 11:00' },
    { status: 'booked', time: '11:00 - 12:00' },
  ]);
  const [notificationsEnabled, setNotificationsEnabled] = useState(false);
  const [points, setPoints] = useState(0);
  const [availabilityData, setAvailabilityData] = useState([0, 0, 0, 0, 0]);
  const [expertiseAreas] = useState([
    'Marketing',
    'Product Management',
    'Data Analysis',
    'Software Development',
    'UI/UX Design',
    'Business Strategy',
  ]);
  const [filteredMentors, setFilteredMentors] = useState([]);
  const [expertiseFilter, setExpertiseFilter] = useState('');
  const [availabilityFilters, setAvailabilityFilters] = useState({
    availableNow: false,
    busy: false,
    booked: false,
  });

  const mentors = [
    { id: 1, name: 'John Doe', expertise: 'Technology', status: 'Available Now', rating: 4 },
    { id: 2, name: 'Jane Smith', expertise: 'Marketing', status: 'Busy', rating: 5 },
    { id: 3, name: 'Alice Johnson', expertise: 'Finance', status: 'Booked', rating: 3 },
    { id: 4, name: 'Bob Brown', expertise: 'Technology', status: 'Available Now', rating: 4.5 },
  ];

  // Fetch mentors on filter change
  useEffect(() => {
    const filtered = mentors.filter((mentor) => {
      const expertiseMatch = expertiseFilter ? mentor.expertise === expertiseFilter : true;
      const availabilityMatch = (availabilityFilters.availableNow && mentor.status === 'Available Now') ||
        (availabilityFilters.busy && mentor.status === 'Busy') ||
        (availabilityFilters.booked && mentor.status === 'Booked') ||
        (!availabilityFilters.availableNow && !availabilityFilters.busy && !availabilityFilters.booked);
      return expertiseMatch && availabilityMatch;
    });
    setFilteredMentors(filtered);
  }, [expertiseFilter, availabilityFilters]);

  // Randomize availability every 5 seconds
  useEffect(() => {
    const interval = setInterval(() => {
      randomizeAvailability();
    }, 5000);
    return () => clearInterval(interval);
  }, []);

  const randomizeAvailability = () => {
    const randomStatus = ['available', 'busy', 'booked'];
    const newAvailability = availability.map(slot => ({
      ...slot,
      status: randomStatus[Math.floor(Math.random() * randomStatus.length)],
    }));
    setAvailability(newAvailability);
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'available':
        return 'success';
      case 'busy':
        return 'error';
      case 'booked':
        return 'default';
      default:
        return 'default';
    }
  };

  const handleBookingClick = () => {
    setPoints(points + 1);
  };

  const dateCellRender = (date) => {
    return <div>Available</div>;
  };

  const chartOptions = {
    xAxis: {
      type: 'category',
      data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'],
    },
    yAxis: {
      type: 'value',
    },
    series: [{
      data: availabilityData,
      type: 'line',
    }],
  };

  const handleExpertiseChange = (value) => {
    setExpertiseFilter(value);
  };

  const handleAvailabilityChange = (e) => {
    const { name, checked } = e.target;
    setAvailabilityFilters((prev) => ({ ...prev, [name]: checked }));
  };

  const useGlobalState = () => {
    const [feedback, setFeedback] = useState({ ratings: [] });
    const [notifications, setNotifications] = useState([]);
    const [preferences, setPreferences] = useState({ dashboardWidgets: [] });

    const submitFeedback = (rating) => {
      setFeedback((prev) => ({ ratings: [...prev.ratings, rating] }));
    };

    const addNotification = (message) => {
      setNotifications((prev) => [...prev, message]);
    };

    const toggleWidget = (widget) => {
      setPreferences((prev) => ({
        dashboardWidgets: prev.dashboardWidgets.includes(widget)
          ? prev.dashboardWidgets.filter(w => w !== widget)
          : [...prev.dashboardWidgets, widget]
      }));
    };

    return { feedback, submitFeedback, notifications, addNotification, preferences, toggleWidget };
  };

  const FeedbackButtons = ({ onFeedback }) => {
    return (
      <div>
        <Button onClick={() => onFeedback('thumbs up')} type="primary" shape="round">Thumbs Up</Button>
        <Button onClick={() => onFeedback('thumbs down')} type="danger" shape="round" style={{ marginLeft: '10px' }}>Thumbs Down</Button>
      </div>
    );
  };

  const Dashboard = () => {
    const chartOption = {
      title: { text: 'Mentor Statistics' },
      tooltip: {},
      xAxis: { data: ['Mentors', 'Sessions'] },
      yAxis: {},
      series: [{
        name: 'Count',
        type: 'bar',
        data: [2, 15],
      }]
    };

    return (
      <div style={{ marginTop: '20px' }}>
        <h2>Dashboard</h2>
        <ReactECharts option={chartOption} style={{ height: '400px' }} />
      </div>
    );
  };

  const MentorOverview = () => {
    const { submitFeedback } = useContext(GlobalContext);
    const dummyMentors = [
      { id: 1, name: 'John Doe', sessions: 10 },
      { id: 2, name: 'Jane Smith', sessions: 5 },
    ];

    const handleFeedback = (rating) => {
      submitFeedback(rating);
    };

    return (
      <div style={{ padding: '20px' }}>
        <h1>Mentor Overview</h1>
        <FeedbackButtons onFeedback={handleFeedback} />
        <Dashboard />
        {dummyMentors.map(mentor => (
          <div key={mentor.id}>
            <h2>{mentor.name}</h2>
            <p>Sessions: {mentor.sessions}</p>
          </div>
        ))}
      </div>
    );
  };

  const MentorProfile = () => {
    const dummyMentor = { id: 1, name: 'John Doe', details: 'Experienced mentor specializing in React.' };

    return (
      <div style={{ padding: '20px' }}>
        <h1>Mentor Profile</h1>
        <h2>{dummyMentor.name}</h2>
        <p>{dummyMentor.details}</p>
      </div>
    );
  };

  return (
    <GlobalContext.Provider value={useGlobalState()}>
      <Layout style={{ height: '100vh', background: '#f0f2f5' }}>
        <Layout.Header style={{ background: '#001529', padding: '0 50px', display: 'flex', alignItems: 'center' }}>
          <h1 style={{ color: 'white', flex: 1 }}>Mentor Dashboard</h1>
          <Switch checked={notificationsEnabled} onChange={setNotificationsEnabled} />
          <Modal title="Notification Preferences" visible={false}>
            <Switch checked={notificationsEnabled} onChange={setNotificationsEnabled} />
          </Modal>
        </Layout.Header>
        <Layout.Content style={{ padding: '50px' }}>
          <Row gutter={16}>
            <Col span={16}>
              <Card title="Mentor Availability" bordered={false} style={{ marginBottom: '20px' }}>
                <Tooltip title={availability.map(slot => `${slot.time}: ${slot.status}`).join(', ')} placement="top">
                  <Badge status={getStatusColor(availability[0].status)} />
                </Tooltip>
                <Button type="primary" onClick={handleBookingClick} style={{ marginLeft: '10px' }}>Book a Session</Button>
                <span style={{ marginLeft: '20px' }}>{points} points earned!</span>
              </Card>
              <Card bordered={false}>
                <ReactECharts option={chartOptions} style={{ height: '400px' }} />
              </Card>
            </Col>
            <Col span={8}>
              <Card title="Calendar" bordered={false}>
                <Calendar dateCellRender={dateCellRender} fullscreen={false} />
              </Card>
            </Col>
          </Row>
          <Row gutter={16} style={{ marginTop: '20px' }}>
            <Col span={24}>
              <Card title="Expertise Areas" bordered={false}>
                {expertiseAreas.map((expertise) => (
                  <Tag
                    key={expertise}
                    color="blue"
                    style={{ margin: '5px', cursor: 'pointer' }}
                    onClick={() => console.log(`Search for ${expertise}`)}  // Removed navigation due to no routing
                  >
                    {expertise}
                  </Tag>
                ))}
              </Card>
            </Col>
          </Row>
          <Row gutter={16} style={{ marginTop: '20px' }}>
            <Col span={12}>
              <Select
                placeholder="Select Expertise"
                style={{ width: '100%' }}
                onChange={handleExpertiseChange}
                allowClear
              >
                {expertiseAreas.map((option) => (
                  <Select.Option key={option} value={option}>{option}</Select.Option>
                ))}
              </Select>
            </Col>
            <Col span={12}>
              <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                <Checkbox name="availableNow" onChange={handleAvailabilityChange}>Available Now</Checkbox>
                <Checkbox name="busy" onChange={handleAvailabilityChange}>Busy</Checkbox>
                <Checkbox name="booked" onChange={handleAvailabilityChange}>Booked</Checkbox>
              </div>
            </Col>
          </Row>
          <Row gutter={16} style={{ marginTop: '20px' }}>
            <Col span={24}>
              <Card title="Mentors List" bordered={false}>
                <ul>
                  {filteredMentors.map((mentor) => (
                    <li key={mentor.id}>
                      {mentor.name} - {mentor.expertise} - {mentor.status} - <Rate disabled value={mentor.rating} />
                    </li>
                  ))}
                </ul>
              </Card>
            </Col>
          </Row>
          <Row gutter={16} style={{ marginTop: '20px' }}>
            <Col span={24}>
              <MentorOverview />
              <MentorProfile />
            </Col>
          </Row>
        </Layout.Content>
      </Layout>
    </GlobalContext.Provider>
  );
};

export default MentorDashboard;




Node: Growth Metrics Page
Code: 
****File PATH: components/GrowthMetricsPage.js****

import React, { useState, useEffect, createContext } from 'react';
import ReactECharts from 'echarts-for-react';
import { Modal, Checkbox, notification, Button, Select, DatePicker, Input, Card, Tooltip, Space } from 'antd';
import "antd/dist/reset.css";

const { RangePicker } = DatePicker;
const { Option } = Select;

// Create Context for Metrics
const MetricContext = createContext();

const dummyData = {
  metrics: [
    { id: 1, name: 'Monthly Active Users', value: 1200, threshold: 1000, achievements: 1 },
    { id: 2, name: 'Revenue', value: 30000, threshold: 25000, achievements: 2 },
    { id: 3, name: 'Customer Acquisition Cost', value: 150, threshold: 200, achievements: 3 },
  ],
};

const MetricCard = ({ metric }) => {
  const { selectedMetrics, setSelectedMetrics } = React.useContext(MetricContext);
  const [isSelected, setIsSelected] = useState(false);

  const handleSelect = () => {
    const newSelection = isSelected
      ? selectedMetrics.filter(id => id !== metric.id)
      : [...selectedMetrics, metric.id];
    setSelectedMetrics(newSelection);
    setIsSelected(!isSelected);
  };

  const showBadge = metric.value >= metric.threshold;

  return (
    <Card hoverable style={{ width: 300, margin: 10, textAlign: 'center' }}>
      <Checkbox checked={isSelected} onChange={handleSelect}>
        Select for Comparison
      </Checkbox>
      <h3>{metric.name}</h3>
      <p>Value: {metric.value}</p>
      {showBadge && <span role="img" aria-label="Badge">🏆 Badge Unlocked!</span>}
      <Button type="primary" onClick={() => notification.info({ message: `${metric.name} has a significant change!` })}>
        Check Notifications
      </Button>
    </Card>
  );
};

const ComparisonModal = ({ visible, onClose, metrics }) => {
  const chartData = metrics.map(metric => ({
    name: metric.name,
    value: metric.value,
  }));

  const option = {
    title: { text: 'Metric Comparison' },
    tooltip: {},
    xAxis: {
      type: 'category',
      data: chartData.map(item => item.name),
    },
    yAxis: { type: 'value' },
    series: [{ data: chartData.map(item => item.value), type: 'bar' }],
  };

  return (
    <Modal title="Comparison Chart" visible={visible} onCancel={onClose} footer={null}>
      <ReactECharts option={option} />
    </Modal>
  );
};

const FilterPanel = () => {
  const [startups, setStartups] = useState(['Startup A', 'Startup B', 'Startup C']);
  const [selectedStartup, setSelectedStartup] = useState(startups[0]);
  const [dateRange, setDateRange] = useState([null, null]);
  const [metricTypes, setMetricTypes] = useState(['Revenue', 'User Growth']);
  const [selectedMetrics, setSelectedMetrics] = useState(['Revenue', 'User Growth']);
  const [chartData, setChartData] = useState([]);
  const [threshold, setThreshold] = useState(100);
  const [notifications, setNotifications] = useState([]);

  const dummyDataMetrics = {
    'Startup A': { revenue: [120, 132, 101, 134, 90, 230, 210], userGrowth: [10, 20, 30, 25, 20, 15, 10] },
    'Startup B': { revenue: [220, 182, 191, 234, 290, 330, 310], userGrowth: [50, 60, 70, 80, 90, 100, 110] },
    'Startup C': { revenue: [150, 232, 201, 154, 190, 330, 410], userGrowth: [15, 25, 35, 45, 55, 65, 75] }
  };

  useEffect(() => {
    updateChartData();
  }, [selectedStartup, dateRange, selectedMetrics]);

  const updateChartData = () => {
    const data = dummyDataMetrics[selectedStartup];
    setChartData(data);
    checkThresholds(data);
  };

  const checkThresholds = (data) => {
    const revenueExceed = data.revenue.some(value => value > threshold);
    const userGrowthExceed = data.userGrowth.some(value => value > threshold);
    
    if (revenueExceed) {
      setNotifications(prev => [...prev, 'Revenue exceeded threshold!']);
    }
    if (userGrowthExceed) {
      setNotifications(prev => [...prev, 'User Growth exceeded threshold!']);
    }
  };

  const handleMetricChange = (metric) => {
    setSelectedMetrics(prev => 
      prev.includes(metric) ? prev.filter(m => m !== metric) : [...prev, metric]
    );
  };

  const getOption = () => {
    const series = selectedMetrics.map(metric => ({
      name: metric,
      type: 'line',
      data: chartData[metric.toLowerCase()] || []
    }));
    
    return {
      title: { text: 'Metrics Overview' },
      tooltip: { trigger: 'axis' },
      xAxis: { type: 'category', data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'] },
      yAxis: { type: 'value' },
      series
    };
  };

  return (
    <div style={{ padding: 20 }}>
      <Space direction="vertical" size="large" style={{ width: '100%' }}>
        <Space>
          <label>Startup:</label>
          <Select value={selectedStartup} onChange={setSelectedStartup} style={{ width: 200 }}>
            {startups.map(startup => <Option key={startup} value={startup}>{startup}</Option>)}
          </Select>
        </Space>
        <Space>
          <label>Date Range:</label>
          <RangePicker value={dateRange} onChange={setDateRange} />
        </Space>
        <Space>
          <label>Metrics:</label>
          {metricTypes.map(metric => (
            <Checkbox key={metric} checked={selectedMetrics.includes(metric)} onChange={() => handleMetricChange(metric)}>
              {metric}
            </Checkbox>
          ))}
        </Space>
        <Space>
          <label>Threshold:</label>
          <Input type="number" value={threshold} onChange={e => setThreshold(Number(e.target.value))} style={{ width: 100 }} />
        </Space>
        <ReactECharts option={getOption()} style={{ height: 400 }} />
        <div>
          {notifications.map((note, index) => <div key={index}>{note}</div>)}
        </div>
      </Space>
    </div>
  );
};

const Heatmap = () => {
  const [selectedMetrics, setSelectedMetrics] = useState([true, false, false]);
  const [feedback, setFeedback] = useState({ up: 0, down: 0 });

  const dummyData = {
    metrics: [
      { name: 'Metric A', values: [80, 90, 70, 60, 50] },
      { name: 'Metric B', values: [30, 40, 70, 80, 90] },
      { name: 'Metric C', values: [20, 50, 90, 40, 60] },
    ],
    timestamps: ['2023-01-01', '2023-01-02', '2023-01-03', '2023-01-04', '2023-01-05'],
  };

  const handleMetricChange = (index) => {
    const newMetrics = [...selectedMetrics];
    newMetrics[index] = !newMetrics[index];
    setSelectedMetrics(newMetrics);
  };

  const getHeatmapData = () => {
    const data = [];
    for (let i = 0; i < dummyData.timestamps.length; i++) {
      for (let j = 0; j < selectedMetrics.length; j++) {
        if (selectedMetrics[j]) {
          data.push([i, j, dummyData.metrics[j].values[i]]);
        }
      }
    }
    return data;
  };

  const handleCellClick = (params) => {
    const { data } = params;
    notification.open({
      message: 'Cell Clicked',
      description: `Metric: ${dummyData.metrics[data[1]].name}, Value: ${data[2]}, Date: ${dummyData.timestamps[data[0]]}`,
    });
  };

  const getOption = () => {
    return {
      tooltip: { position: 'top' },
      grid: { height: '80%', width: '80%', top: '10%' },
      xAxis: {
        type: 'category',
        data: dummyData.timestamps,
      },
      yAxis: {
        type: 'category',
        data: dummyData.metrics.map(m => m.name),
      },
      visualMap: {
        min: 0,
        max: 100,
        calculable: true,
        inRange: {
          color: ['#ffffff', '#ff0000'],
        },
      },
      series: [
        {
          name: 'Heatmap',
          type: 'heatmap',
          data: getHeatmapData(),
          label: {
            show: true,
          },
          emphasis: {
            itemStyle: {
              shadowBlur: 10,
              shadowColor: '#333',
            },
          },
        },
      ],
    };
  };

  return (
    <div style={{ padding: 20 }}>
      <div>
        <Checkbox.Group>
          {dummyData.metrics.map((metric, index) => (
            <Checkbox
              key={index}
              checked={selectedMetrics[index]}
              onChange={() => handleMetricChange(index)}
            >
              {metric.name}
            </Checkbox>
          ))}
        </Checkbox.Group>
      </div>
      <div style={{ marginTop: 10 }}>
        <Button onClick={() => setFeedback({ ...feedback, up: feedback.up + 1 })}>👍 {feedback.up}</Button>
        <Button onClick={() => setFeedback({ ...feedback, down: feedback.down + 1 })}>👎 {feedback.down}</Button>
      </div>
      <ReactECharts
        option={getOption()}
        onEvents={{ 'click': handleCellClick }}
        style={{ height: 400, marginTop: 20 }}
      />
    </div>
  );
};

const MetricsOverview = () => {
  const [selectedMetrics, setSelectedMetrics] = useState([]);
  const [isModalVisible, setIsModalVisible] = useState(false);

  const openComparisonModal = () => {
    if (selectedMetrics.length < 2) {
      notification.warning({ message: 'Select at least two metrics to compare.' });
    } else {
      setIsModalVisible(true);
    }
  };

  return (
    <MetricContext.Provider value={{ selectedMetrics, setSelectedMetrics }}>
      <div style={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'center', alignItems: 'center', padding: 20 }}>
        {dummyData.metrics.map(metric => (
          <MetricCard key={metric.id} metric={metric} />
        ))}
      </div>
      <div style={{ textAlign: 'center', marginBottom: 20 }}>
        <Button type="primary" onClick={openComparisonModal}>Compare Selected Metrics</Button>
      </div>
      <ComparisonModal
        visible={isModalVisible}
        onClose={() => setIsModalVisible(false)}
        metrics={dummyData.metrics.filter(metric => selectedMetrics.includes(metric.id))}
      />
      <FilterPanel />
      <Heatmap />
    </MetricContext.Provider>
  );
};

export default MetricsOverview;

Node: Investor Overview Page
Code: 
****File PATH: components/InvestorProfileContainer.js****

import React, { useState } from 'react';
import ReactECharts from 'echarts-for-react';
import { Modal, Button, Select, Input, DatePicker, notification, Typography, Card, Row, Col, Space, List, Checkbox, Slider } from 'antd';
import 'antd/dist/reset.css';

const { Option } = Select;
const { Title, Paragraph } = Typography;

const InvestorProfileContainer = () => {
  const [investorData, setInvestorData] = useState({
    name: 'John Doe',
    organization: 'Finance Corp',
    title: 'Senior Investor',
    contact: 'john.doe@example.com',
  });
  const [comments, setComments] = useState(['Great investor to work with!', 'Follow up on recent investment.']);
  const [newComment, setNewComment] = useState('');
  const [tasks, setTasks] = useState([{ id: 1, task: 'Schedule meeting', completed: false }]);
  const [newTask, setNewTask] = useState('');
  const [isEditing, setIsEditing] = useState(false);
  const [isEditable, setIsEditable] = useState(false);
  const [sectors, setSectors] = useState([]);
  const [fundingRange, setFundingRange] = useState([10000, 5000000]);
  const [locations, setLocations] = useState([]);
  const [stages, setStages] = useState([]);
  const [error, setError] = useState('');
  const [engagements, setEngagements] = useState([
    { date: '2023-10-01', type: 'Meeting', summary: 'Discussed quarterly performance', category: 'High Priority' },
    { date: '2023-10-05', type: 'Call', summary: 'Follow-up on investment', category: 'Follow-up' },
    { date: '2023-10-10', type: 'Email', summary: 'Sent updated reports', category: 'Low Priority' },
  ]);
  const [visible, setVisible] = useState(false);
  const [newEntry, setNewEntry] = useState({ date: '', type: '', summary: '', category: '' });
  const [filter, setFilter] = useState({ type: '', category: '' });
  const [filteredData, setFilteredData] = useState([
    { name: "Tech Innovators", description: "A startup focusing on AI solutions.", sector: "Technology", fundingStage: "Seed", geographicFocus: "North America", relevanceScore: 85 },
    { name: "Eco Green", description: "Sustainable energy solutions.", sector: "Environment", fundingStage: "Series A", geographicFocus: "Europe", relevanceScore: 78 },
  ]);
  const [selectedStartup, setSelectedStartup] = useState(null);
  const [notifications, setNotifications] = useState([]);

  const handleEditToggle = () => {
    setIsEditing(!isEditing);
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setInvestorData({ ...investorData, [name]: value });
  };

  const handleSave = () => {
    setIsEditing(false);
  };

  const handleAddComment = () => {
    if (newComment.trim()) {
      setComments([...comments, newComment]);
      setNewComment('');
    }
  };

  const handleDeleteComment = (index) => {
    const updatedComments = comments.filter((_, idx) => idx !== index);
    setComments(updatedComments);
  };

  const handleAddTask = () => {
    if (newTask.trim()) {
      setTasks([...tasks, { id: tasks.length + 1, task: newTask, completed: false }]);
      setNewTask('');
    }
  };

  const handleTaskToggle = (id) => {
    setTasks(tasks.map(task => task.id === id ? { ...task, completed: !task.completed } : task));
  };

  const getOption = () => ({
    title: { text: 'Investment Overview' },
    tooltip: {},
    xAxis: { data: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'] },
    yAxis: {},
    series: [{
      name: 'Investments',
      type: 'bar',
      data: [5, 20, 36, 10, 10, 20, 30],
    }],
  });

  const sectorOptions = ["Technology", "Healthcare", "Finance", "Education"];
  const locationOptions = ["North America", "Europe", "Asia"];
  const stageOptions = ["Seed", "Series A", "Series B", "IPO"];

  const handleSectorChange = (sector) => {
    setSectors((prev) =>
      prev.includes(sector) ? prev.filter(s => s !== sector) : [...prev, sector]
    );
  };

  const handleLocationChange = (location) => {
    setLocations((prev) =>
      prev.includes(location) ? prev.filter(l => l !== location) : [...prev, location]
    );
  };

  const handleStageChange = (stage) => {
    setStages((prev) =>
      prev.includes(stage) ? prev.filter(s => s !== stage) : [...prev, stage]
    );
  };

  const handlePreferencesSave = () => {
    if (sectors.length === 0 || locations.length === 0 || stages.length === 0) {
      setError('Please select at least one sector, location, and stage.');
      return;
    }
    if (fundingRange[0] >= fundingRange[1]) {
      setError('Minimum funding must be less than maximum funding.');
      return;
    }
    setError('');
    setIsEditable(false);
  };

  const showModal = () => setVisible(true);
  const handleCancel = () => setVisible(false);
  
  const handleInputChangeEntry = (e) => {
    const { name, value } = e.target;
    setNewEntry({ ...newEntry, [name]: value });
  };

  const handleSelectChange = (name, value) => {
    setNewEntry({ ...newEntry, [name]: value });
  };

  const handleDateChange = (date, dateString) => {
    setNewEntry({ ...newEntry, date: dateString });
  };

  const handleSubmit = () => {
    setEngagements([...engagements, newEntry]);
    notification.success({ message: 'Engagement added successfully!' });
    setVisible(false);
    setNewEntry({ date: '', type: '', summary: '', category: '' });
  };

  const filteredEngagements = engagements.filter(e =>
    (filter.type ? e.type === filter.type : true) &&
    (filter.category ? e.category === filter.category : true)
  );

  const notifyUser = (message) => {
    setNotifications([...notifications, message]);
    setTimeout(() => {
      setNotifications(notifications.filter((_, index) => index !== 0));
    }, 3000);
  };

  const handleCardClick = (startup) => {
    setSelectedStartup(startup);
    notifyUser(`You are viewing ${startup.name}`);
  };

  return (
    <div style={{ padding: '20px', overflow: 'auto', backgroundColor: '#f0f2f5' }}>
      <Row gutter={[16, 16]}>
        <Col xs={24} md={12} lg={8}>
          <Card title="Investor Information" bordered={false}>
            <Space direction="vertical" style={{ width: '100%' }}>
              <div>
                {isEditing ? (
                  <Input name="name" value={investorData.name} onChange={handleInputChange} />
                ) : (
                  <Title level={4}>{investorData.name}</Title>
                )}
                {isEditing ? (
                  <Input name="organization" value={investorData.organization} onChange={handleInputChange} />
                ) : (
                  <Paragraph>{investorData.organization}</Paragraph>
                )}
                {isEditing ? (
                  <Input name="title" value={investorData.title} onChange={handleInputChange} />
                ) : (
                  <Paragraph>{investorData.title}</Paragraph>
                )}
                {isEditing ? (
                  <Input name="contact" value={investorData.contact} onChange={handleInputChange} />
                ) : (
                  <Paragraph>{investorData.contact}</Paragraph>
                )}
                <Button type="primary" onClick={isEditing ? handleSave : handleEditToggle}>
                  {isEditing ? 'Save' : 'Edit'}
                </Button>
              </div>
            </Space>
          </Card>
        </Col>

        <Col xs={24} md={12} lg={8}>
          <Card title="Comments" bordered={false}>
            <Input.TextArea value={newComment} onChange={(e) => setNewComment(e.target.value)} rows={3} />
            <Button type="primary" onClick={handleAddComment} style={{ marginTop: '10px' }}>Add Comment</Button>
            <List
              size="small"
              dataSource={comments}
              renderItem={(comment, index) => (
                <List.Item
                  actions={[<Button type="link" onClick={() => handleDeleteComment(index)}>Delete</Button>]}
                >
                  {comment}
                </List.Item>
              )}
              style={{ marginTop: '10px' }}
            />
          </Card>
        </Col>

        <Col xs={24} md={12} lg={8}>
          <Card title="Tasks" bordered={false}>
            <Input value={newTask} onChange={(e) => setNewTask(e.target.value)} />
            <Button type="primary" onClick={handleAddTask} style={{ marginTop: '10px' }}>Add Task</Button>
            <List
              size="small"
              dataSource={tasks}
              renderItem={task => (
                <List.Item
                  actions={[
                    <Checkbox checked={task.completed} onChange={() => handleTaskToggle(task.id)} />
                  ]}
                  style={{ textDecoration: task.completed ? 'line-through' : 'none' }}
                >
                  {task.task}
                </List.Item>
              )}
              style={{ marginTop: '10px' }}
            />
          </Card>
        </Col>

        <Col xs={24} lg={12}>
          <Card title="Investment Overview" bordered={false}>
            <ReactECharts option={getOption()} style={{ height: '350px' }} />
          </Card>
        </Col>

        <Col xs={24} lg={12}>
          <Card title="Investor Preferences" bordered={false}>
            <Space direction="vertical" style={{ width: '100%' }}>
              {error && <Paragraph type="danger">{error}</Paragraph>}
              <div>
                <Title level={5}>Sectors</Title>
                {sectorOptions.map((sector) => (
                  <Checkbox
                    key={sector}
                    checked={sectors.includes(sector)}
                    onChange={() => handleSectorChange(sector)}
                    disabled={!isEditable}
                  >
                    {sector}
                  </Checkbox>
                ))}
              </div>
              <div>
                <Title level={5}>Funding Range</Title>
                <Slider
                  range
                  min={10000}
                  max={5000000}
                  value={fundingRange}
                  onChange={setFundingRange}
                  disabled={!isEditable}
                />
                <Paragraph>{`$${fundingRange[0]} - $${fundingRange[1]}`}</Paragraph>
              </div>
              <div>
                <Title level={5}>Geographical Locations</Title>
                {locationOptions.map((location) => (
                  <Checkbox
                    key={location}
                    checked={locations.includes(location)}
                    onChange={() => handleLocationChange(location)}
                    disabled={!isEditable}
                  >
                    {location}
                  </Checkbox>
                ))}
              </div>
              <div>
                <Title level={5}>Investment Stages</Title>
                {stageOptions.map((stage) => (
                  <Checkbox
                    key={stage}
                    checked={stages.includes(stage)}
                    onChange={() => handleStageChange(stage)}
                    disabled={!isEditable}
                  >
                    {stage}
                  </Checkbox>
                ))}
              </div>
              <Button type="primary" onClick={() => setIsEditable(!isEditable)}>
                {isEditable ? 'Cancel' : 'Edit Preferences'}
              </Button>
              {isEditable && <Button type="default" onClick={handlePreferencesSave}>Save Changes</Button>}
            </Space>
          </Card>
        </Col>

        <Col xs={24}>
          <Card title="Engagement History" bordered={false}>
            <Button type="primary" onClick={showModal}>New Entry</Button>
            <Space direction="horizontal" style={{ marginTop: '10px' }}>
              <Select placeholder="Filter by Type" onChange={(value) => setFilter({ ...filter, type: value })} style={{ width: 150 }}>
                <Option value="Meeting">Meeting</Option>
                <Option value="Call">Call</Option>
                <Option value="Email">Email</Option>
              </Select>
              <Select placeholder="Filter by Category" onChange={(value) => setFilter({ ...filter, category: value })} style={{ width: 150 }}>
                <Option value="High Priority">High Priority</Option>
                <Option value="Follow-up">Follow-up</Option>
                <Option value="Low Priority">Low Priority</Option>
              </Select>
            </Space>
            <List
              size="small"
              dataSource={filteredEngagements}
              renderItem={(engagement, index) => (
                <List.Item>
                  {engagement.date} - {engagement.type}: {engagement.summary} ({engagement.category})
                </List.Item>
              )}
              style={{ marginTop: '10px' }}
            />
            <Modal title="New Engagement" visible={visible} onOk={handleSubmit} onCancel={handleCancel}>
              <DatePicker onChange={handleDateChange} style={{ width: '100%', marginBottom: '10px' }} />
              <Select placeholder="Type" onChange={(value) => handleSelectChange('type', value)} style={{ width: '100%', marginBottom: '10px' }}>
                <Option value="Meeting">Meeting</Option>
                <Option value="Call">Call</Option>
                <Option value="Email">Email</Option>
              </Select>
              <Input placeholder="Summary" name="summary" onChange={handleInputChangeEntry} style={{ width: '100%', marginBottom: '10px' }} />
              <Select placeholder="Category" onChange={(value) => handleSelectChange('category', value)} style={{ width: '100%' }}>
                <Option value="High Priority">High Priority</Option>
                <Option value="Follow-up">Follow-up</Option>
                <Option value="Low Priority">Low Priority</Option>
              </Select>
            </Modal>
          </Card>
        </Col>

        <Col xs={24}>
          <Row gutter={[16, 16]}>
            {filteredData.map((startup, index) => (
              <Col xs={24} md={12} key={index}>
                <Card
                  hoverable
                  onClick={() => handleCardClick(startup)}
                  style={{ transition: '0.3s', boxShadow: '0 4px 8px rgba(0,0,0,0.2)' }}
                >
                  <Title level={4}>{startup.name}</Title>
                  <Paragraph>{startup.description}</Paragraph>
                  <Paragraph>Relevance Score: {startup.relevanceScore}</Paragraph>
                </Card>
              </Col>
            ))}
          </Row>
        </Col>
      </Row>

      {selectedStartup && (
        <Modal
          title={selectedStartup.name}
          visible={!!selectedStartup}
          onCancel={() => setSelectedStartup(null)}
          footer={[
            <Button key="close" onClick={() => setSelectedStartup(null)}>Close</Button>,
            <Button key="book" type="primary">Book a Meeting</Button>
          ]}
        >
          <Paragraph>{selectedStartup.description}</Paragraph>
          <Paragraph>Sector: {selectedStartup.sector}</Paragraph>
          <Paragraph>Funding Stage: {selectedStartup.fundingStage}</Paragraph>
          <Paragraph>Geographic Focus: {selectedStartup.geographicFocus}</Paragraph>
          <Paragraph>Relevance Score: {selectedStartup.relevanceScore}</Paragraph>
        </Modal>
      )}

      {notifications.map((notification, index) => (
        <div key={index} style={{ position: 'fixed', top: `${20 + index * 50}px`, right: '20px', background: 'lightyellow', padding: '10px', borderRadius: '5px' }}>
          {notification}
        </div>
      ))}
    </div>
  );
};

export default InvestorProfileContainer;

Node: Startup Overview Page
Code: 
****File PATH: components/ERPSystemPage.js****

import React, { useState } from 'react';
import 'antd/dist/reset.css';
import ReactECharts from 'echarts-for-react';
import { Layout, Menu, Input, Button, Table, Form, Drawer, notification, Card, List, Tag, Avatar, Space } from 'antd';
import { UserOutlined, FileOutlined, SettingOutlined, PlusOutlined, EditOutlined, CheckOutlined, BellOutlined, CloseOutlined } from '@ant-design/icons';
import { useNavigate } from 'react-router-dom';

const { Header, Content, Sider } = Layout;
const { TextArea } = Input;

const ERPSystemPage = () => {
  const [startupName, setStartupName] = useState("Current Startup Name");
  const [missionStatement, setMissionStatement] = useState("Our mission is to empower businesses.");
  const [isEditingTitle, setIsEditingTitle] = useState(false);
  const [isEditingMission, setIsEditingMission] = useState(false);
  const [collaborators, setCollaborators] = useState([]);
  const [newCollaborator, setNewCollaborator] = useState({ name: '', role: '', contact: '' });
  const [feedback, setFeedback] = useState('');
  const [feedbackList, setFeedbackList] = useState([{ userId: '1', feedback: 'Clear mission!' }]);
  const [milestones, setMilestones] = useState([{ milestone: 'Launch', status: 'Completed' }, { milestone: 'First 100 Users', status: 'In Progress' }]);
  const [notifications, setNotifications] = useState([{ type: 'update', message: 'Mission statement updated!', timestamp: '2023-10-01' }]);
  const [chartData, setChartData] = useState([{ month: 'Jan', users: 100 }, { month: 'Feb', users: 150 }]);
  const [dynamicMetrics, setDynamicMetrics] = useState([{ metric: 'User Growth', views: 200 }]);
  const [showNotification, setShowNotification] = useState(false);
  const [showComments, setShowComments] = useState(false);
  const [comments, setComments] = useState([{ userId: '1', comment: 'Great initiative!' }]);
  const [teamMembers, setTeamMembers] = useState([
    { id: 1, name: 'John Doe', role: 'Developer', email: 'john.doe@example.com', bio: 'Full stack developer with a passion for coding.', status: 'Available', rating: 4.5 },
    { id: 2, name: 'Jane Smith', role: 'Designer', email: 'jane.smith@example.com', bio: 'Creative designer with a love for UI/UX.', status: 'In a Meeting', rating: 4.0 },
    { id: 3, name: 'Alice Johnson', role: 'Project Manager', email: 'alice.johnson@example.com', bio: 'Experienced project manager focused on deliverables.', status: 'Available', rating: 5.0 }
  ]);

  const navigate = useNavigate();

  const handleNameChange = (e) => {
    setStartupName(e.target.value);
  };

  const handleMissionChange = (e) => {
    setMissionStatement(e.target.value);
  };

  const addCollaborator = () => {
    if (newCollaborator.name && newCollaborator.role && newCollaborator.contact) {
      setCollaborators([...collaborators, { ...newCollaborator, id: Date.now() }]);
      setNewCollaborator({ name: '', role: '', contact: '' });
    }
  };

  const removeCollaborator = (id) => {
    setCollaborators(collaborators.filter(collab => collab.id !== id));
  };

  const handleFeedbackSubmit = () => {
    setFeedbackList([...feedbackList, { userId: `${feedbackList.length + 1}`, feedback }]);
    setFeedback('');
    notification.success({ message: 'Feedback submitted!' });
  };

  const getOption = () => ({
    xAxis: {
      type: 'category',
      data: chartData.map(item => item.month)
    },
    yAxis: {
      type: 'value'
    },
    series: [{
      data: chartData.map(item => item.users),
      type: 'line',
      smooth: true
    }]
  });

  return (
    <Layout style={{ height: '100vh' }}>
      <Sider theme="light" style={{ backgroundColor: '#2A9D8F' }}>
        <Menu mode="inline" defaultSelectedKeys={['1']} style={{ height: '100%', borderRight: 0 }}>
          <Menu.Item key="1" icon={<UserOutlined />} onClick={() => navigate('/dashboard')}>Dashboard</Menu.Item>
          <Menu.Item key="2" icon={<FileOutlined />} onClick={() => navigate('/reports')}>Reports</Menu.Item>
          <Menu.Item key="3" icon={<SettingOutlined />} onClick={() => navigate('/settings')}>Settings</Menu.Item>
        </Menu>
      </Sider>
      <Layout>
        <Header style={{ background: '#fff', padding: 0, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <Button type="primary" icon={<BellOutlined />} onClick={() => setShowNotification(!showNotification)}>
            Notifications
          </Button>
          <Drawer
            title="Notifications"
            placement="right"
            onClose={() => setShowNotification(false)}
            visible={showNotification}
          >
            <List
              dataSource={notifications}
              renderItem={item => (
                <List.Item key={item.timestamp}>
                  <List.Item.Meta
                    title={item.message}
                    description={item.timestamp}
                  />
                  <Button type="link" icon={<CloseOutlined />} onClick={() => setNotifications(notifications.filter((_, i) => i !== notifications.indexOf(item)))}>Dismiss</Button>
                </List.Item>
              )}
            />
          </Drawer>
        </Header>
        <Content style={{ padding: '0 24px', minHeight: 280 }}>
          <Space direction="vertical" style={{ width: '100%', padding: '20px' }}>
            <Card>
              <h1 onClick={() => setIsEditingTitle(true)}>{isEditingTitle ? (
                <Input value={startupName} onChange={handleNameChange} onBlur={() => setIsEditingTitle(false)} addonAfter={<CheckOutlined />} />
              ) : (
                <>{startupName} <EditOutlined onClick={() => setIsEditingTitle(true)} /></>
              )}</h1>
            </Card>

            <Card>
              <h2 onClick={() => setIsEditingMission(true)}>{isEditingMission ? (
                <TextArea value={missionStatement} onChange={handleMissionChange} onBlur={() => setIsEditingMission(false)} rows={2} addonAfter={<CheckOutlined />} />
              ) : (
                <>{missionStatement} <EditOutlined onClick={() => setIsEditingMission(true)} /></>
              )}</h2>
            </Card>

            <Card title="Collaborators" extra={<Button type="dashed" icon={<PlusOutlined />} onClick={addCollaborator}>Add</Button>}>
              <Table dataSource={collaborators} rowKey="id" pagination={false}>
                <Table.Column title="Name" dataIndex="name" key="name" />
                <Table.Column title="Role" dataIndex="role" key="role" />
                <Table.Column title="Contact" dataIndex="contact" key="contact" />
                <Table.Column
                  title="Action"
                  key="action"
                  render={(text, record) => (
                    <Button type="link" onClick={() => removeCollaborator(record.id)}>Remove</Button>
                  )}
                />
              </Table>
              <Form layout="inline" style={{ marginTop: '16px' }}>
                <Form.Item>
                  <Input placeholder="Name" value={newCollaborator.name} onChange={e => setNewCollaborator({ ...newCollaborator, name: e.target.value })} />
                </Form.Item>
                <Form.Item>
                  <Input placeholder="Role" value={newCollaborator.role} onChange={e => setNewCollaborator({ ...newCollaborator, role: e.target.value })} />
                </Form.Item>
                <Form.Item>
                  <Input placeholder="Contact" value={newCollaborator.contact} onChange={e => setNewCollaborator({ ...newCollaborator, contact: e.target.value })} />
                </Form.Item>
              </Form>
            </Card>

            <Card title="Feedback" extra={<Button type="dashed" icon={<PlusOutlined />} onClick={() => setShowComments(!showComments)}>Toggle Comments</Button>}>
              <TextArea rows={4} value={feedback} onChange={(e) => setFeedback(e.target.value)} />
              <Button type="primary" style={{ marginTop: '10px' }} onClick={handleFeedbackSubmit}>Submit Feedback</Button>
              <Drawer
                title="Comments"
                placement="bottom"
                onClose={() => setShowComments(false)}
                visible={showComments}
                height={300}
              >
                <List
                  dataSource={comments}
                  renderItem={(item, index) => (
                    <List.Item key={index}>
                      <List.Item.Meta
                        avatar={<Avatar icon={<UserOutlined />} />}
                        title={`User ${item.userId}`}
                        description={item.comment}
                      />
                    </List.Item>
                  )}
                />
              </Drawer>
            </Card>

            <Card title="User Growth Chart">
              <ReactECharts option={getOption()} style={{ height: '400px', width: '100%' }} />
            </Card>

            <Card title="Milestones">
              <List
                dataSource={milestones}
                renderItem={item => (
                  <List.Item>
                    <List.Item.Meta
                      title={item.milestone}
                      description={<Tag color={item.status === 'Completed' ? 'green' : 'yellow'}>{item.status}</Tag>}
                    />
                  </List.Item>
                )}
              />
            </Card>

            <Card title="Dynamic Metrics">
              <List
                dataSource={dynamicMetrics}
                renderItem={(item, index) => (
                  <List.Item key={index}>
                    <List.Item.Meta
                      title={`${item.metric} - ${item.views} views`}
                    />
                  </List.Item>
                )}
              />
            </Card>

            <Card title="Team List">
              <List
                itemLayout="horizontal"
                dataSource={teamMembers}
                renderItem={member => (
                  <List.Item key={member.id}>
                    <List.Item.Meta
                      avatar={<Avatar>{member.name[0]}</Avatar>}
                      title={member.name}
                      description={
                        <>
                          <p>Role: {member.role}</p>
                          <p>Email: {member.email}</p>
                          <p>Bio: {member.bio}</p>
                          <p>Status: <Tag color={member.status === 'Available' ? 'green' : 'orange'}>{member.status}</Tag></p>
                        </>
                      }
                    />
                  </List.Item>
                )}
              />
            </Card>
          </Space>
        </Content>
      </Layout>
    </Layout>
  );
};

export default ERPSystemPage;
